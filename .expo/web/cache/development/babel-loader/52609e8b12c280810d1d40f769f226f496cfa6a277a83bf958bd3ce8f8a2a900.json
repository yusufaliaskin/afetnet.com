{"ast":null,"code":"\"use strict\";\n\nimport _construct from \"@babel/runtime/helpers/construct\";\nimport { FlingGesture } from \"./flingGesture\";\nimport { ForceTouchGesture } from \"./forceTouchGesture\";\nimport { ComposedGesture, ExclusiveGesture, SimultaneousGesture } from \"./gestureComposition\";\nimport { LongPressGesture } from \"./longPressGesture\";\nimport { PanGesture } from \"./panGesture\";\nimport { PinchGesture } from \"./pinchGesture\";\nimport { RotationGesture } from \"./rotationGesture\";\nimport { TapGesture } from \"./tapGesture\";\nimport { NativeGesture } from \"./nativeGesture\";\nimport { ManualGesture } from \"./manualGesture\";\nimport { HoverGesture } from \"./hoverGesture\";\nexport var GestureObjects = {\n  Tap: function Tap() {\n    return new TapGesture();\n  },\n  Pan: function Pan() {\n    return new PanGesture();\n  },\n  Pinch: function Pinch() {\n    return new PinchGesture();\n  },\n  Rotation: function Rotation() {\n    return new RotationGesture();\n  },\n  Fling: function Fling() {\n    return new FlingGesture();\n  },\n  LongPress: function LongPress() {\n    return new LongPressGesture();\n  },\n  ForceTouch: function ForceTouch() {\n    return new ForceTouchGesture();\n  },\n  Native: function Native() {\n    return new NativeGesture();\n  },\n  Manual: function Manual() {\n    return new ManualGesture();\n  },\n  Hover: function Hover() {\n    return new HoverGesture();\n  },\n  Race: function Race() {\n    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n      gestures[_key] = arguments[_key];\n    }\n    return _construct(ComposedGesture, gestures);\n  },\n  Simultaneous: function Simultaneous() {\n    for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      gestures[_key2] = arguments[_key2];\n    }\n    return _construct(SimultaneousGesture, gestures);\n  },\n  Exclusive: function Exclusive() {\n    for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      gestures[_key3] = arguments[_key3];\n    }\n    return _construct(ExclusiveGesture, gestures);\n  }\n};","map":{"version":3,"names":["FlingGesture","ForceTouchGesture","ComposedGesture","ExclusiveGesture","SimultaneousGesture","LongPressGesture","PanGesture","PinchGesture","RotationGesture","TapGesture","NativeGesture","ManualGesture","HoverGesture","GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Hover","Race","_len","arguments","length","gestures","Array","_key","_construct","Simultaneous","_len2","_key2","Exclusive","_len3","_key3"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\gestureObjects.ts"],"sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\nimport { HoverGesture } from './hoverGesture';\n\n/**\n * `Gesture` is the object that allows you to create and compose gestures.\n *\n * ### Remarks\n * - Consider wrapping your gesture configurations with `useMemo`, as it will reduce the amount of work Gesture Handler has to do under the hood when updating gestures.\n *\n * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/gesture\n */\nexport const GestureObjects = {\n  /**\n   * A discrete gesture that recognizes one or many taps.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/tap-gesture\n   */\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  /**\n   * A continuous gesture that can recognize a panning (dragging) gesture and track its movement.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture\n   */\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  /**\n   * A continuous gesture that recognizes pinch gesture. It allows for tracking the distance between two fingers and use that information to scale or zoom your content.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pinch-gesture\n   */\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  /**\n   * A continuous gesture that can recognize rotation and track its movement.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/rotation-gesture\n   */\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  /**\n   * A discrete gesture that activates when the movement is sufficiently fast.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/fling-gesture\n   */\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  /**\n   * A discrete gesture that activates when the corresponding view is pressed for a sufficiently long time.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/long-press-gesture\n   */\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  /**\n   * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n   *\n   *  #### iOS only\n   * A continuous gesture that recognizes force of a touch. It allows for tracking pressure of touch on some iOS devices.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/force-touch-gesture\n   */\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  /**\n   * A gesture that allows other touch handling components to participate in RNGH's gesture system.\n   * When used, the other component should be the direct child of a `GestureDetector`.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/native-gesture\n   */\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  /**\n   * A plain gesture that has no specific activation criteria nor event data set.\n   * Its state has to be controlled manually using a state manager.\n   * It will not fail when all the pointers are lifted from the screen.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/manual-gesture\n   */\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * A continuous gesture that can recognize hovering above the view it's attached to.\n   * The hover effect may be activated by moving a mouse or a stylus over the view.\n   *\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/hover-gesture\n   */\n  Hover: () => {\n    return new HoverGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#race\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneous\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#exclusive\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"],"mappings":";;;AAAA,SAASA,YAAY;AACrB,SAASC,iBAAiB;AAE1B,SACEC,eAAe,EACfC,gBAAgB,EAChBC,mBAAmB;AAErB,SAASC,gBAAgB;AACzB,SAASC,UAAU;AACnB,SAASC,YAAY;AACrB,SAASC,eAAe;AACxB,SAASC,UAAU;AACnB,SAASC,aAAa;AACtB,SAASC,aAAa;AACtB,SAASC,YAAY;AAUrB,OAAO,IAAMC,cAAc,GAAG;EAK5BC,GAAG,EAAE,SAALA,GAAGA,CAAA,EAAQ;IACT,OAAO,IAAIL,UAAU,CAAC,CAAC;EACzB,CAAC;EAMDM,GAAG,EAAE,SAALA,GAAGA,CAAA,EAAQ;IACT,OAAO,IAAIT,UAAU,CAAC,CAAC;EACzB,CAAC;EAMDU,KAAK,EAAE,SAAPA,KAAKA,CAAA,EAAQ;IACX,OAAO,IAAIT,YAAY,CAAC,CAAC;EAC3B,CAAC;EAMDU,QAAQ,EAAE,SAAVA,QAAQA,CAAA,EAAQ;IACd,OAAO,IAAIT,eAAe,CAAC,CAAC;EAC9B,CAAC;EAMDU,KAAK,EAAE,SAAPA,KAAKA,CAAA,EAAQ;IACX,OAAO,IAAIlB,YAAY,CAAC,CAAC;EAC3B,CAAC;EAMDmB,SAAS,EAAE,SAAXA,SAASA,CAAA,EAAQ;IACf,OAAO,IAAId,gBAAgB,CAAC,CAAC;EAC/B,CAAC;EASDe,UAAU,EAAE,SAAZA,UAAUA,CAAA,EAAQ;IAChB,OAAO,IAAInB,iBAAiB,CAAC,CAAC;EAChC,CAAC;EAODoB,MAAM,EAAE,SAARA,MAAMA,CAAA,EAAQ;IACZ,OAAO,IAAIX,aAAa,CAAC,CAAC;EAC5B,CAAC;EAQDY,MAAM,EAAE,SAARA,MAAMA,CAAA,EAAQ;IACZ,OAAO,IAAIX,aAAa,CAAC,CAAC;EAC5B,CAAC;EAQDY,KAAK,EAAE,SAAPA,KAAKA,CAAA,EAAQ;IACX,OAAO,IAAIX,YAAY,CAAC,CAAC;EAC3B,CAAC;EAODY,IAAI,EAAE,SAANA,IAAIA,CAAA,EAA8B;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAxBC,QAAmB,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAnBF,QAAmB,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;IAAA;IAC3B,OAAAC,UAAA,CAAW7B,eAAe,EAAI0B,QAAQ;EACxC,CAAC;EAMDI,YAAY,WAAZA,YAAYA,CAAA,EAAyB;IAAA,SAAAC,KAAA,GAAAP,SAAA,CAAAC,MAAA,EAArBC,QAAmB,OAAAC,KAAA,CAAAI,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAnBN,QAAmB,CAAAM,KAAA,IAAAR,SAAA,CAAAQ,KAAA;IAAA;IACjC,OAAAH,UAAA,CAAW3B,mBAAmB,EAAIwB,QAAQ;EAC5C,CAAC;EAUDO,SAAS,WAATA,SAASA,CAAA,EAAyB;IAAA,SAAAC,KAAA,GAAAV,SAAA,CAAAC,MAAA,EAArBC,QAAmB,OAAAC,KAAA,CAAAO,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAnBT,QAAmB,CAAAS,KAAA,IAAAX,SAAA,CAAAW,KAAA;IAAA;IAC9B,OAAAN,UAAA,CAAW5B,gBAAgB,EAAIyB,QAAQ;EACzC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}