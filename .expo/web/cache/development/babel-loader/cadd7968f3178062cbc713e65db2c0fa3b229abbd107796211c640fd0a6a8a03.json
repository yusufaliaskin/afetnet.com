{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createClient } from '@supabase/supabase-js';\nvar supabaseUrl = 'https://rjzvcanjkdwukasjaeib.supabase.co';\nvar supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJqenZjYW5qa2R3dWthc2phZWliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2ODU1NDQsImV4cCI6MjA3MTI2MTU0NH0.xSQyVF6axjElOB2Ti6zcP5fO_Zxnbdl58wi7eR93Oy0';\nexport var supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false\n  }\n});\nexport var auth = {\n  signUp: function () {\n    var _signUp = _asyncToGenerator(function* (email, password, userData) {\n      try {\n        var _yield$supabase$auth$ = yield supabase.auth.signUp({\n            email: email,\n            password: password,\n            options: {\n              data: {\n                first_name: userData.firstName,\n                last_name: userData.lastName,\n                phone: userData.phone\n              }\n            }\n          }),\n          authData = _yield$supabase$auth$.data,\n          authError = _yield$supabase$auth$.error;\n        if (authError) throw authError;\n        if (authData.user) {\n          var _yield$supabase$from$ = yield supabase.from('profiles').insert({\n              id: authData.user.id,\n              first_name: userData.firstName,\n              last_name: userData.lastName,\n              phone: userData.phone,\n              email: email,\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString()\n            }),\n            profileError = _yield$supabase$from$.error;\n          if (profileError) {\n            console.error('Profile creation error:', profileError);\n          }\n        }\n        return {\n          user: authData.user,\n          session: authData.session\n        };\n      } catch (error) {\n        console.error('SignUp error:', error);\n        throw error;\n      }\n    });\n    function signUp(_x, _x2, _x3) {\n      return _signUp.apply(this, arguments);\n    }\n    return signUp;\n  }(),\n  signIn: function () {\n    var _signIn = _asyncToGenerator(function* (email, password) {\n      try {\n        var _yield$supabase$auth$2 = yield supabase.auth.signInWithPassword({\n            email: email,\n            password: password\n          }),\n          data = _yield$supabase$auth$2.data,\n          error = _yield$supabase$auth$2.error;\n        if (error) throw error;\n        return {\n          user: data.user,\n          session: data.session\n        };\n      } catch (error) {\n        console.error('SignIn error:', error);\n        throw error;\n      }\n    });\n    function signIn(_x4, _x5) {\n      return _signIn.apply(this, arguments);\n    }\n    return signIn;\n  }(),\n  signOut: function () {\n    var _signOut = _asyncToGenerator(function* () {\n      try {\n        var _yield$supabase$auth$3 = yield supabase.auth.signOut(),\n          error = _yield$supabase$auth$3.error;\n        if (error) throw error;\n      } catch (error) {\n        console.error('SignOut error:', error);\n        throw error;\n      }\n    });\n    function signOut() {\n      return _signOut.apply(this, arguments);\n    }\n    return signOut;\n  }(),\n  getSession: function () {\n    var _getSession = _asyncToGenerator(function* () {\n      try {\n        var _yield$supabase$auth$4 = yield supabase.auth.getSession(),\n          session = _yield$supabase$auth$4.data.session,\n          error = _yield$supabase$auth$4.error;\n        if (error) throw error;\n        return session;\n      } catch (error) {\n        console.error('Get session error:', error);\n        throw error;\n      }\n    });\n    function getSession() {\n      return _getSession.apply(this, arguments);\n    }\n    return getSession;\n  }(),\n  getUserProfile: function () {\n    var _getUserProfile = _asyncToGenerator(function* (userId) {\n      try {\n        var _yield$supabase$from$2 = yield supabase.from('profiles').select('*').eq('id', userId).single(),\n          data = _yield$supabase$from$2.data,\n          error = _yield$supabase$from$2.error;\n        if (error) throw error;\n        return data;\n      } catch (error) {\n        console.error('Get user profile error:', error);\n        throw error;\n      }\n    });\n    function getUserProfile(_x6) {\n      return _getUserProfile.apply(this, arguments);\n    }\n    return getUserProfile;\n  }()\n};\nexport var validation = {\n  isValidEmail: function isValidEmail(email) {\n    var emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  },\n  isValidPassword: function isValidPassword(password) {\n    return password && password.length >= 8;\n  },\n  isValidPhone: function isValidPhone(phone) {\n    var phoneRegex = /^(\\+90|0)?[5][0-9]{9}$/;\n    return phoneRegex.test(phone.replace(/\\s/g, ''));\n  },\n  isValidName: function isValidName(name) {\n    return name && name.trim().length >= 2;\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","signUp","_signUp","_asyncToGenerator","email","password","userData","_yield$supabase$auth$","options","data","first_name","firstName","last_name","lastName","phone","authData","authError","error","user","_yield$supabase$from$","from","insert","id","created_at","Date","toISOString","updated_at","profileError","console","session","_x","_x2","_x3","apply","arguments","signIn","_signIn","_yield$supabase$auth$2","signInWithPassword","_x4","_x5","signOut","_signOut","_yield$supabase$auth$3","getSession","_getSession","_yield$supabase$auth$4","getUserProfile","_getUserProfile","userId","_yield$supabase$from$2","select","eq","single","_x6","validation","isValidEmail","emailRegex","test","isValidPassword","length","isValidPhone","phoneRegex","replace","isValidName","name","trim"],"sources":["C:/Users/Yusuf Ali Aşkın/Desktop/proje_afetnet/src/lib/supabase.js"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://rjzvcanjkdwukasjaeib.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJqenZjYW5qa2R3dWthc2phZWliIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU2ODU1NDQsImV4cCI6MjA3MTI2MTU0NH0.xSQyVF6axjElOB2Ti6zcP5fO_Zxnbdl58wi7eR93Oy0';\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false\n  }\n});\n\n// Auth helper functions\nexport const auth = {\n  // Kullanıcı kayıt işlemi\n  async signUp(email, password, userData) {\n    try {\n      // Supabase auth ile kullanıcı oluştur\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            first_name: userData.firstName,\n            last_name: userData.lastName,\n            phone: userData.phone\n          }\n        }\n      });\n\n      if (authError) throw authError;\n\n      // Kullanıcı profil bilgilerini profiles tablosuna kaydet\n      if (authData.user) {\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            id: authData.user.id,\n            first_name: userData.firstName,\n            last_name: userData.lastName,\n            phone: userData.phone,\n            email: email,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n          });\n\n        if (profileError) {\n          console.error('Profile creation error:', profileError);\n          // Auth kullanıcısı oluşturuldu ama profil oluşturulamadı\n          // Bu durumda kullanıcıyı bilgilendir ama işlemi başarılı say\n        }\n      }\n\n      return { user: authData.user, session: authData.session };\n    } catch (error) {\n      console.error('SignUp error:', error);\n      throw error;\n    }\n  },\n\n  // Kullanıcı giriş işlemi\n  async signIn(email, password) {\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) throw error;\n      return { user: data.user, session: data.session };\n    } catch (error) {\n      console.error('SignIn error:', error);\n      throw error;\n    }\n  },\n\n  // Kullanıcı çıkış işlemi\n  async signOut() {\n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n    } catch (error) {\n      console.error('SignOut error:', error);\n      throw error;\n    }\n  },\n\n  // Mevcut kullanıcı oturumunu al\n  async getSession() {\n    try {\n      const { data: { session }, error } = await supabase.auth.getSession();\n      if (error) throw error;\n      return session;\n    } catch (error) {\n      console.error('Get session error:', error);\n      throw error;\n    }\n  },\n\n  // Kullanıcı profil bilgilerini al\n  async getUserProfile(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Get user profile error:', error);\n      throw error;\n    }\n  }\n};\n\n// Validation helper functions\nexport const validation = {\n  // E-posta format kontrolü\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  },\n\n  // Şifre güvenlik kontrolü\n  isValidPassword(password) {\n    // Sadece en az 8 karakter kontrolü\n    return password && password.length >= 8;\n  },\n\n  // Telefon numarası format kontrolü\n  isValidPhone(phone) {\n    // Türkiye telefon numarası formatı\n    const phoneRegex = /^(\\+90|0)?[5][0-9]{9}$/;\n    return phoneRegex.test(phone.replace(/\\s/g, ''));\n  },\n\n  // Ad/soyad kontrolü\n  isValidName(name) {\n    return name && name.trim().length >= 2;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}