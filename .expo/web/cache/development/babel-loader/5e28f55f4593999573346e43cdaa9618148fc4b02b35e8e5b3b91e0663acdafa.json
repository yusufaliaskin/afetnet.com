{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar Blob = function () {\n  function Blob() {\n    var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n    _classCallCheck(this, Blob);\n    var BlobManager = require(\"./BlobManager\");\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n  return _createClass(Blob, [{\n    key: \"data\",\n    get: function get() {\n      if (!this._data) {\n        throw new Error('Blob has been closed and is no longer available');\n      }\n      return this._data;\n    },\n    set: function set(data) {\n      this._data = data;\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      var BlobManager = require(\"./BlobManager\");\n      var _this$data = this.data,\n        offset = _this$data.offset,\n        size = _this$data.size;\n      if (typeof start === 'number') {\n        if (start > size) {\n          start = size;\n        }\n        offset += start;\n        size -= start;\n        if (typeof end === 'number') {\n          if (end < 0) {\n            end = this.size + end;\n          }\n          if (end > this.size) {\n            end = this.size;\n          }\n          size = end - start;\n        }\n      }\n      return BlobManager.createFromOptions({\n        blobId: this.data.blobId,\n        offset: offset,\n        size: size,\n        __collector: this.data.__collector\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var BlobManager = require(\"./BlobManager\");\n      BlobManager.release(this.data.blobId);\n      this.data = null;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.data.size;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.data.type || '';\n    }\n  }]);\n}();\nmodule.exports = Blob;","map":{"version":3,"names":["_classCallCheck","_createClass","Blob","parts","arguments","length","undefined","options","BlobManager","require","data","createFromParts","key","get","_data","Error","set","value","slice","start","end","_this$data","offset","size","createFromOptions","blobId","__collector","close","release","type","module","exports"],"sources":["C:/Users/Yusuf Ali Aşkın/Downloads/Desktop/proje_afetnet/node_modules/react-native/Libraries/Blob/Blob.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n *   class WebSocketImage extends React.Component {\n *      state = {blob: null};\n *      componentDidMount() {\n *        let ws = this.ws = new WebSocket(...);\n *        ws.binaryType = 'blob';\n *        ws.onmessage = (event) => {\n *          if (this.state.blob) {\n *            this.state.blob.close();\n *          }\n *          this.setState({blob: event.data});\n *        };\n *      }\n *      componentUnmount() {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.ws.close();\n *      }\n *      render() {\n *        if (!this.state.blob) {\n *          return <View />;\n *        }\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *      }\n *   }\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  _data: ?BlobData;\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\n    const BlobManager = require('./BlobManager');\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  set data(data: ?BlobData) {\n    this._data = data;\n  }\n\n  // $FlowFixMe[unsafe-getters-setters]\n  get data(): BlobData {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n\n    return this._data;\n  }\n\n  slice(start?: number, end?: number): Blob {\n    const BlobManager = require('./BlobManager');\n    let {offset, size} = this.data;\n\n    if (typeof start === 'number') {\n      if (start > size) {\n        // $FlowFixMe[reassign-const]\n        start = size;\n      }\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          // $FlowFixMe[reassign-const]\n          end = this.size + end;\n        }\n        if (end > this.size) {\n          // $FlowFixMe[reassign-const]\n          end = this.size;\n        }\n        size = end - start;\n      }\n    }\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size,\n      /* Since `blob.slice()` creates a new view onto the same binary\n       * data as the original blob, we should re-use the same collector\n       * object so that the underlying resource gets deallocated when\n       * the last view into the data is released, not the first.\n       */\n      __collector: this.data.__collector,\n    });\n  }\n\n  /**\n   * This method is in the standard, but not actually implemented by\n   * any browsers at this point. It's important for how Blobs work in\n   * React Native, however, since we cannot de-allocate resources automatically,\n   * so consumers need to explicitly de-allocate them.\n   *\n   * Note that the semantics around Blobs created via `blob.slice()`\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\n   * new *view* onto the same binary data, so calling `close()` on any\n   * of those views is enough to deallocate the data, whereas\n   * `new Blob([blob, ...])` actually copies the data in memory.\n   */\n  close() {\n    const BlobManager = require('./BlobManager');\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get size(): number {\n    return this.data.size;\n  }\n\n  /*\n   * String indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get type(): string {\n    return this.data.type || '';\n  }\n}\n\nmodule.exports = Blob;\n"],"mappings":"AAUA,YAAY;;AAAC,OAAAA,eAAA;AAAA,OAAAC,YAAA;AAAA,IAyCPC,IAAI;EAQR,SAAAA,KAAA,EAAqE;IAAA,IAAzDC,KAA2B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IAAEG,OAAqB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAAN,eAAA,OAAAE,IAAA;IACjE,IAAMM,WAAW,GAAGC,OAAO,gBAAgB,CAAC;IAC5C,IAAI,CAACC,IAAI,GAAGF,WAAW,CAACG,eAAe,CAACR,KAAK,EAAEI,OAAO,CAAC,CAACG,IAAI;EAC9D;EAAC,OAAAT,YAAA,CAAAC,IAAA;IAAAU,GAAA;IAAAC,GAAA,EAaD,SAAAA,IAAA,EAAqB;MACnB,IAAI,CAAC,IAAI,CAACC,KAAK,EAAE;QACf,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;MACpE;MAEA,OAAO,IAAI,CAACD,KAAK;IACnB,CAAC;IAAAE,GAAA,EAXD,SAAAA,IAASN,IAAe,EAAE;MACxB,IAAI,CAACI,KAAK,GAAGJ,IAAI;IACnB;EAAC;IAAAE,GAAA;IAAAK,KAAA,EAWD,SAAAC,KAAKA,CAACC,KAAc,EAAEC,GAAY,EAAQ;MACxC,IAAMZ,WAAW,GAAGC,OAAO,gBAAgB,CAAC;MAC5C,IAAAY,UAAA,GAAqB,IAAI,CAACX,IAAI;QAAzBY,MAAM,GAAAD,UAAA,CAANC,MAAM;QAAEC,IAAI,GAAAF,UAAA,CAAJE,IAAI;MAEjB,IAAI,OAAOJ,KAAK,KAAK,QAAQ,EAAE;QAC7B,IAAIA,KAAK,GAAGI,IAAI,EAAE;UAEhBJ,KAAK,GAAGI,IAAI;QACd;QACAD,MAAM,IAAIH,KAAK;QACfI,IAAI,IAAIJ,KAAK;QAEb,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;UAC3B,IAAIA,GAAG,GAAG,CAAC,EAAE;YAEXA,GAAG,GAAG,IAAI,CAACG,IAAI,GAAGH,GAAG;UACvB;UACA,IAAIA,GAAG,GAAG,IAAI,CAACG,IAAI,EAAE;YAEnBH,GAAG,GAAG,IAAI,CAACG,IAAI;UACjB;UACAA,IAAI,GAAGH,GAAG,GAAGD,KAAK;QACpB;MACF;MACA,OAAOX,WAAW,CAACgB,iBAAiB,CAAC;QACnCC,MAAM,EAAE,IAAI,CAACf,IAAI,CAACe,MAAM;QACxBH,MAAM,EAANA,MAAM;QACNC,IAAI,EAAJA,IAAI;QAMJG,WAAW,EAAE,IAAI,CAAChB,IAAI,CAACgB;MACzB,CAAC,CAAC;IACJ;EAAC;IAAAd,GAAA;IAAAK,KAAA,EAcD,SAAAU,KAAKA,CAAA,EAAG;MACN,IAAMnB,WAAW,GAAGC,OAAO,gBAAgB,CAAC;MAC5CD,WAAW,CAACoB,OAAO,CAAC,IAAI,CAAClB,IAAI,CAACe,MAAM,CAAC;MACrC,IAAI,CAACf,IAAI,GAAG,IAAI;IAClB;EAAC;IAAAE,GAAA;IAAAC,GAAA,EAMD,SAAAA,IAAA,EAAmB;MACjB,OAAO,IAAI,CAACH,IAAI,CAACa,IAAI;IACvB;EAAC;IAAAX,GAAA;IAAAC,GAAA,EAOD,SAAAA,IAAA,EAAmB;MACjB,OAAO,IAAI,CAACH,IAAI,CAACmB,IAAI,IAAI,EAAE;IAC7B;EAAC;AAAA;AAGHC,MAAM,CAACC,OAAO,GAAG7B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}