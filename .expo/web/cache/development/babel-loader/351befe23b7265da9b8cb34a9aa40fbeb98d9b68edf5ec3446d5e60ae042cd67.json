{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"testOnly_pressed\", \"hitSlop\", \"pressRetentionOffset\", \"delayHoverIn\", \"delayHoverOut\", \"delayLongPress\", \"unstable_pressDelay\", \"onHoverIn\", \"onHoverOut\", \"onPress\", \"onPressIn\", \"onPressOut\", \"onLongPress\", \"onLayout\", \"style\", \"children\", \"android_disableSound\", \"android_ripple\", \"disabled\", \"accessible\", \"simultaneousWithExternalGesture\", \"requireExternalGestureToFail\", \"blocksExternalGesture\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { GestureObjects as Gesture } from \"../../handlers/gestures/gestureObjects\";\nimport { GestureDetector } from \"../../handlers/gestures/GestureDetector\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport NativeButton from \"../GestureHandlerButton\";\nimport { gestureToPressableEvent, addInsets, numberAsInset, gestureTouchToPressableEvent, isTouchWithinInset } from \"./utils\";\nimport { PressabilityDebugView } from \"../../handlers/PressabilityDebugView\";\nimport { INT32_MAX, isFabric, isTestEnv } from \"../../utils\";\nimport { applyRelationProp } from \"../utils\";\nimport { getStatesConfig, StateMachineEvent } from \"./stateDefinitions\";\nimport { PressableStateMachine } from \"./StateMachine\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DEFAULT_LONG_PRESS_DURATION = 500;\nvar IS_TEST_ENV = isTestEnv();\nvar IS_FABRIC = null;\nvar Pressable = function Pressable(props) {\n  var _android_ripple$radiu;\n  var testOnly_pressed = props.testOnly_pressed,\n    hitSlop = props.hitSlop,\n    pressRetentionOffset = props.pressRetentionOffset,\n    delayHoverIn = props.delayHoverIn,\n    delayHoverOut = props.delayHoverOut,\n    delayLongPress = props.delayLongPress,\n    unstable_pressDelay = props.unstable_pressDelay,\n    onHoverIn = props.onHoverIn,\n    onHoverOut = props.onHoverOut,\n    onPress = props.onPress,\n    onPressIn = props.onPressIn,\n    onPressOut = props.onPressOut,\n    onLongPress = props.onLongPress,\n    onLayout = props.onLayout,\n    style = props.style,\n    children = props.children,\n    android_disableSound = props.android_disableSound,\n    android_ripple = props.android_ripple,\n    disabled = props.disabled,\n    accessible = props.accessible,\n    simultaneousWithExternalGesture = props.simultaneousWithExternalGesture,\n    requireExternalGestureToFail = props.requireExternalGestureToFail,\n    blocksExternalGesture = props.blocksExternalGesture,\n    remainingProps = _objectWithoutProperties(props, _excluded);\n  var relationProps = {\n    simultaneousWithExternalGesture: simultaneousWithExternalGesture,\n    requireExternalGestureToFail: requireExternalGestureToFail,\n    blocksExternalGesture: blocksExternalGesture\n  };\n  var _useState = useState(testOnly_pressed != null ? testOnly_pressed : false),\n    _useState2 = _slicedToArray(_useState, 2),\n    pressedState = _useState2[0],\n    setPressedState = _useState2[1];\n  var longPressTimeoutRef = useRef(null);\n  var pressDelayTimeoutRef = useRef(null);\n  var isOnPressAllowed = useRef(true);\n  var isCurrentlyPressed = useRef(false);\n  var dimensions = useRef({\n    width: 0,\n    height: 0\n  });\n  var normalizedHitSlop = useMemo(function () {\n    return typeof hitSlop === 'number' ? numberAsInset(hitSlop) : hitSlop != null ? hitSlop : {};\n  }, [hitSlop]);\n  var normalizedPressRetentionOffset = useMemo(function () {\n    return typeof pressRetentionOffset === 'number' ? numberAsInset(pressRetentionOffset) : pressRetentionOffset != null ? pressRetentionOffset : {};\n  }, [pressRetentionOffset]);\n  var appliedHitSlop = addInsets(normalizedHitSlop, normalizedPressRetentionOffset);\n  var cancelLongPress = useCallback(function () {\n    if (longPressTimeoutRef.current) {\n      clearTimeout(longPressTimeoutRef.current);\n      longPressTimeoutRef.current = null;\n      isOnPressAllowed.current = true;\n    }\n  }, []);\n  var cancelDelayedPress = useCallback(function () {\n    if (pressDelayTimeoutRef.current) {\n      clearTimeout(pressDelayTimeoutRef.current);\n      pressDelayTimeoutRef.current = null;\n    }\n  }, []);\n  var startLongPress = useCallback(function (event) {\n    if (onLongPress) {\n      cancelLongPress();\n      longPressTimeoutRef.current = setTimeout(function () {\n        isOnPressAllowed.current = false;\n        onLongPress(event);\n      }, delayLongPress != null ? delayLongPress : DEFAULT_LONG_PRESS_DURATION);\n    }\n  }, [onLongPress, cancelLongPress, delayLongPress]);\n  var innerHandlePressIn = useCallback(function (event) {\n    onPressIn == null ? void 0 : onPressIn(event);\n    startLongPress(event);\n    setPressedState(true);\n    if (pressDelayTimeoutRef.current) {\n      clearTimeout(pressDelayTimeoutRef.current);\n      pressDelayTimeoutRef.current = null;\n    }\n  }, [onPressIn, startLongPress]);\n  var handleFinalize = useCallback(function () {\n    isCurrentlyPressed.current = false;\n    cancelLongPress();\n    cancelDelayedPress();\n    setPressedState(false);\n  }, [cancelDelayedPress, cancelLongPress]);\n  var handlePressIn = useCallback(function (event) {\n    if (!isTouchWithinInset(dimensions.current, normalizedHitSlop, event.nativeEvent.changedTouches.at(-1))) {\n      return;\n    }\n    isCurrentlyPressed.current = true;\n    if (unstable_pressDelay) {\n      pressDelayTimeoutRef.current = setTimeout(function () {\n        innerHandlePressIn(event);\n      }, unstable_pressDelay);\n    } else {\n      innerHandlePressIn(event);\n    }\n  }, [innerHandlePressIn, normalizedHitSlop, unstable_pressDelay]);\n  var handlePressOut = useCallback(function (event) {\n    var success = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!isCurrentlyPressed.current) {\n      return;\n    }\n    isCurrentlyPressed.current = false;\n    if (pressDelayTimeoutRef.current) {\n      innerHandlePressIn(event);\n    }\n    onPressOut == null ? void 0 : onPressOut(event);\n    if (isOnPressAllowed.current && success) {\n      onPress == null ? void 0 : onPress(event);\n    }\n    handleFinalize();\n  }, [handleFinalize, innerHandlePressIn, onPress, onPressOut]);\n  var stateMachine = useMemo(function () {\n    return new PressableStateMachine();\n  }, []);\n  useEffect(function () {\n    var configuration = getStatesConfig(handlePressIn, handlePressOut);\n    stateMachine.setStates(configuration);\n  }, [handlePressIn, handlePressOut, stateMachine]);\n  var hoverInTimeout = useRef(null);\n  var hoverOutTimeout = useRef(null);\n  var hoverGesture = useMemo(function () {\n    return Gesture.Hover().manualActivation(true).cancelsTouchesInView(false).onBegin(function (event) {\n      if (hoverOutTimeout.current) {\n        clearTimeout(hoverOutTimeout.current);\n      }\n      if (delayHoverIn) {\n        hoverInTimeout.current = setTimeout(function () {\n          return onHoverIn == null ? void 0 : onHoverIn(gestureToPressableEvent(event));\n        }, delayHoverIn);\n        return;\n      }\n      onHoverIn == null ? void 0 : onHoverIn(gestureToPressableEvent(event));\n    }).onFinalize(function (event) {\n      if (hoverInTimeout.current) {\n        clearTimeout(hoverInTimeout.current);\n      }\n      if (delayHoverOut) {\n        hoverOutTimeout.current = setTimeout(function () {\n          return onHoverOut == null ? void 0 : onHoverOut(gestureToPressableEvent(event));\n        }, delayHoverOut);\n        return;\n      }\n      onHoverOut == null ? void 0 : onHoverOut(gestureToPressableEvent(event));\n    });\n  }, [delayHoverIn, delayHoverOut, onHoverIn, onHoverOut]);\n  var pressAndTouchGesture = useMemo(function () {\n    return Gesture.LongPress().minDuration(INT32_MAX).maxDistance(INT32_MAX).cancelsTouchesInView(false).onTouchesDown(function (event) {\n      var pressableEvent = gestureTouchToPressableEvent(event);\n      stateMachine.handleEvent(StateMachineEvent.LONG_PRESS_TOUCHES_DOWN, pressableEvent);\n    }).onTouchesUp(function () {\n      if (Platform.OS === 'android') {\n        stateMachine.reset();\n        handleFinalize();\n      }\n    }).onTouchesCancelled(function (event) {\n      var pressableEvent = gestureTouchToPressableEvent(event);\n      stateMachine.reset();\n      handlePressOut(pressableEvent, false);\n    }).onFinalize(function () {\n      if (Platform.OS === 'web') {\n        stateMachine.handleEvent(StateMachineEvent.FINALIZE);\n        handleFinalize();\n      }\n    });\n  }, [stateMachine, handleFinalize, handlePressOut]);\n  var buttonGesture = useMemo(function () {\n    return Gesture.Native().onTouchesCancelled(function (event) {\n      if (Platform.OS !== 'macos' && Platform.OS !== 'web') {\n        var pressableEvent = gestureTouchToPressableEvent(event);\n        stateMachine.reset();\n        handlePressOut(pressableEvent, false);\n      }\n    }).onBegin(function () {\n      stateMachine.handleEvent(StateMachineEvent.NATIVE_BEGIN);\n    }).onStart(function () {\n      if (Platform.OS !== 'android') {\n        stateMachine.handleEvent(StateMachineEvent.NATIVE_START);\n      }\n    }).onFinalize(function () {\n      if (Platform.OS !== 'web') {\n        stateMachine.handleEvent(StateMachineEvent.FINALIZE);\n        handleFinalize();\n      }\n    });\n  }, [stateMachine, handlePressOut, handleFinalize]);\n  var isPressableEnabled = disabled !== true;\n  var gestures = [buttonGesture, pressAndTouchGesture, hoverGesture];\n  var _loop = function _loop(_gesture) {\n    _gesture.enabled(isPressableEnabled);\n    _gesture.runOnJS(true);\n    _gesture.hitSlop(appliedHitSlop);\n    _gesture.shouldCancelWhenOutside(Platform.OS !== 'web');\n    Object.entries(relationProps).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        relationName = _ref2[0],\n        relation = _ref2[1];\n      applyRelationProp(_gesture, relationName, relation);\n    });\n  };\n  for (var _gesture of gestures) {\n    _loop(_gesture);\n  }\n  var gesture = Gesture.Simultaneous.apply(Gesture, gestures);\n  var pointerStyle = Platform.OS === 'web' ? {\n    cursor: 'pointer'\n  } : {};\n  var styleProp = typeof style === 'function' ? style({\n    pressed: pressedState\n  }) : style;\n  var childrenProp = typeof children === 'function' ? children({\n    pressed: pressedState\n  }) : children;\n  var rippleColor = useMemo(function () {\n    var _android_ripple$color;\n    if (IS_FABRIC === null) {\n      IS_FABRIC = isFabric();\n    }\n    var defaultRippleColor = android_ripple ? undefined : 'transparent';\n    var unprocessedRippleColor = (_android_ripple$color = android_ripple == null ? void 0 : android_ripple.color) != null ? _android_ripple$color : defaultRippleColor;\n    return IS_FABRIC ? unprocessedRippleColor : processColor(unprocessedRippleColor);\n  }, [android_ripple]);\n  var setDimensions = useCallback(function (event) {\n    onLayout == null ? void 0 : onLayout(event);\n    dimensions.current = event.nativeEvent.layout;\n  }, [onLayout]);\n  return _jsx(GestureDetector, {\n    gesture: gesture,\n    children: _jsxs(NativeButton, _objectSpread(_objectSpread({}, remainingProps), {}, {\n      onLayout: setDimensions,\n      accessible: accessible !== false,\n      hitSlop: appliedHitSlop,\n      enabled: isPressableEnabled,\n      touchSoundDisabled: android_disableSound != null ? android_disableSound : undefined,\n      rippleColor: rippleColor,\n      rippleRadius: (_android_ripple$radiu = android_ripple == null ? void 0 : android_ripple.radius) != null ? _android_ripple$radiu : undefined,\n      style: [pointerStyle, styleProp],\n      testOnly_onPress: IS_TEST_ENV ? onPress : undefined,\n      testOnly_onPressIn: IS_TEST_ENV ? onPressIn : undefined,\n      testOnly_onPressOut: IS_TEST_ENV ? onPressOut : undefined,\n      testOnly_onLongPress: IS_TEST_ENV ? onLongPress : undefined,\n      children: [childrenProp, __DEV__ ? _jsx(PressabilityDebugView, {\n        color: \"red\",\n        hitSlop: normalizedHitSlop\n      }) : null]\n    }))\n  });\n};\nexport default Pressable;","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","GestureObjects","Gesture","GestureDetector","Platform","processColor","NativeButton","gestureToPressableEvent","addInsets","numberAsInset","gestureTouchToPressableEvent","isTouchWithinInset","PressabilityDebugView","INT32_MAX","isFabric","isTestEnv","applyRelationProp","getStatesConfig","StateMachineEvent","PressableStateMachine","jsx","_jsx","jsxs","_jsxs","DEFAULT_LONG_PRESS_DURATION","IS_TEST_ENV","IS_FABRIC","Pressable","props","_android_ripple$radiu","testOnly_pressed","hitSlop","pressRetentionOffset","delayHoverIn","delayHoverOut","delayLongPress","unstable_pressDelay","onHoverIn","onHoverOut","onPress","onPressIn","onPressOut","onLongPress","onLayout","style","children","android_disableSound","android_ripple","disabled","accessible","simultaneousWithExternalGesture","requireExternalGestureToFail","blocksExternalGesture","remainingProps","_objectWithoutProperties","_excluded","relationProps","_useState","_useState2","_slicedToArray","pressedState","setPressedState","longPressTimeoutRef","pressDelayTimeoutRef","isOnPressAllowed","isCurrentlyPressed","dimensions","width","height","normalizedHitSlop","normalizedPressRetentionOffset","appliedHitSlop","cancelLongPress","current","clearTimeout","cancelDelayedPress","startLongPress","event","setTimeout","innerHandlePressIn","handleFinalize","handlePressIn","nativeEvent","changedTouches","at","handlePressOut","success","arguments","length","undefined","stateMachine","configuration","setStates","hoverInTimeout","hoverOutTimeout","hoverGesture","Hover","manualActivation","cancelsTouchesInView","onBegin","onFinalize","pressAndTouchGesture","LongPress","minDuration","maxDistance","onTouchesDown","pressableEvent","handleEvent","LONG_PRESS_TOUCHES_DOWN","onTouchesUp","OS","reset","onTouchesCancelled","FINALIZE","buttonGesture","Native","NATIVE_BEGIN","onStart","NATIVE_START","isPressableEnabled","gestures","_loop","_gesture","gesture","enabled","runOnJS","shouldCancelWhenOutside","Object","entries","forEach","_ref","_ref2","relationName","relation","Simultaneous","apply","pointerStyle","cursor","styleProp","pressed","childrenProp","rippleColor","_android_ripple$color","defaultRippleColor","unprocessedRippleColor","color","setDimensions","layout","_objectSpread","touchSoundDisabled","rippleRadius","radius","testOnly_onPress","testOnly_onPressIn","testOnly_onPressOut","testOnly_onLongPress","__DEV__"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\components\\Pressable\\Pressable.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { GestureObjects as Gesture } from '../../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../../handlers/gestures/GestureDetector';\nimport {\n  PressableEvent,\n  PressableProps,\n  PressableDimensions,\n} from './PressableProps';\nimport {\n  Insets,\n  LayoutChangeEvent,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  processColor,\n} from 'react-native';\nimport NativeButton from '../GestureHandlerButton';\nimport {\n  gestureToPressableEvent,\n  addInsets,\n  numberAsInset,\n  gestureTouchToPressableEvent,\n  isTouchWithinInset,\n} from './utils';\nimport { PressabilityDebugView } from '../../handlers/PressabilityDebugView';\nimport { INT32_MAX, isFabric, isTestEnv } from '../../utils';\nimport {\n  applyRelationProp,\n  RelationPropName,\n  RelationPropType,\n} from '../utils';\nimport { getStatesConfig, StateMachineEvent } from './stateDefinitions';\nimport { PressableStateMachine } from './StateMachine';\n\nconst DEFAULT_LONG_PRESS_DURATION = 500;\nconst IS_TEST_ENV = isTestEnv();\n\nlet IS_FABRIC: null | boolean = null;\n\nconst Pressable = (props: PressableProps) => {\n  const {\n    testOnly_pressed,\n    hitSlop,\n    pressRetentionOffset,\n    delayHoverIn,\n    delayHoverOut,\n    delayLongPress,\n    unstable_pressDelay,\n    onHoverIn,\n    onHoverOut,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    onLayout,\n    style,\n    children,\n    android_disableSound,\n    android_ripple,\n    disabled,\n    accessible,\n    simultaneousWithExternalGesture,\n    requireExternalGestureToFail,\n    blocksExternalGesture,\n    ...remainingProps\n  } = props;\n\n  const relationProps = {\n    simultaneousWithExternalGesture,\n    requireExternalGestureToFail,\n    blocksExternalGesture,\n  };\n\n  const [pressedState, setPressedState] = useState(testOnly_pressed ?? false);\n\n  const longPressTimeoutRef = useRef<number | null>(null);\n  const pressDelayTimeoutRef = useRef<number | null>(null);\n  const isOnPressAllowed = useRef<boolean>(true);\n  const isCurrentlyPressed = useRef<boolean>(false);\n  const dimensions = useRef<PressableDimensions>({ width: 0, height: 0 });\n\n  const normalizedHitSlop: Insets = useMemo(\n    () =>\n      typeof hitSlop === 'number' ? numberAsInset(hitSlop) : (hitSlop ?? {}),\n    [hitSlop]\n  );\n\n  const normalizedPressRetentionOffset: Insets = useMemo(\n    () =>\n      typeof pressRetentionOffset === 'number'\n        ? numberAsInset(pressRetentionOffset)\n        : (pressRetentionOffset ?? {}),\n    [pressRetentionOffset]\n  );\n\n  const appliedHitSlop = addInsets(\n    normalizedHitSlop,\n    normalizedPressRetentionOffset\n  );\n\n  const cancelLongPress = useCallback(() => {\n    if (longPressTimeoutRef.current) {\n      clearTimeout(longPressTimeoutRef.current);\n      longPressTimeoutRef.current = null;\n      isOnPressAllowed.current = true;\n    }\n  }, []);\n\n  const cancelDelayedPress = useCallback(() => {\n    if (pressDelayTimeoutRef.current) {\n      clearTimeout(pressDelayTimeoutRef.current);\n      pressDelayTimeoutRef.current = null;\n    }\n  }, []);\n\n  const startLongPress = useCallback(\n    (event: PressableEvent) => {\n      if (onLongPress) {\n        cancelLongPress();\n        longPressTimeoutRef.current = setTimeout(() => {\n          isOnPressAllowed.current = false;\n          onLongPress(event);\n        }, delayLongPress ?? DEFAULT_LONG_PRESS_DURATION);\n      }\n    },\n    [onLongPress, cancelLongPress, delayLongPress]\n  );\n\n  const innerHandlePressIn = useCallback(\n    (event: PressableEvent) => {\n      onPressIn?.(event);\n      startLongPress(event);\n      setPressedState(true);\n      if (pressDelayTimeoutRef.current) {\n        clearTimeout(pressDelayTimeoutRef.current);\n        pressDelayTimeoutRef.current = null;\n      }\n    },\n    [onPressIn, startLongPress]\n  );\n\n  const handleFinalize = useCallback(() => {\n    isCurrentlyPressed.current = false;\n    cancelLongPress();\n    cancelDelayedPress();\n    setPressedState(false);\n  }, [cancelDelayedPress, cancelLongPress]);\n\n  const handlePressIn = useCallback(\n    (event: PressableEvent) => {\n      if (\n        !isTouchWithinInset(\n          dimensions.current,\n          normalizedHitSlop,\n          event.nativeEvent.changedTouches.at(-1)\n        )\n      ) {\n        // Ignoring pressIn within pressRetentionOffset\n        return;\n      }\n\n      isCurrentlyPressed.current = true;\n      if (unstable_pressDelay) {\n        pressDelayTimeoutRef.current = setTimeout(() => {\n          innerHandlePressIn(event);\n        }, unstable_pressDelay);\n      } else {\n        innerHandlePressIn(event);\n      }\n    },\n    [innerHandlePressIn, normalizedHitSlop, unstable_pressDelay]\n  );\n\n  const handlePressOut = useCallback(\n    (event: PressableEvent, success: boolean = true) => {\n      if (!isCurrentlyPressed.current) {\n        // Some prop configurations may lead to handlePressOut being called mutliple times.\n        return;\n      }\n\n      isCurrentlyPressed.current = false;\n\n      if (pressDelayTimeoutRef.current) {\n        innerHandlePressIn(event);\n      }\n\n      onPressOut?.(event);\n\n      if (isOnPressAllowed.current && success) {\n        onPress?.(event);\n      }\n\n      handleFinalize();\n    },\n    [handleFinalize, innerHandlePressIn, onPress, onPressOut]\n  );\n\n  const stateMachine = useMemo(() => new PressableStateMachine(), []);\n\n  useEffect(() => {\n    const configuration = getStatesConfig(handlePressIn, handlePressOut);\n    stateMachine.setStates(configuration);\n  }, [handlePressIn, handlePressOut, stateMachine]);\n\n  const hoverInTimeout = useRef<number | null>(null);\n  const hoverOutTimeout = useRef<number | null>(null);\n\n  const hoverGesture = useMemo(\n    () =>\n      Gesture.Hover()\n        .manualActivation(true) // Prevents Hover blocking Gesture.Native() on web\n        .cancelsTouchesInView(false)\n        .onBegin((event) => {\n          if (hoverOutTimeout.current) {\n            clearTimeout(hoverOutTimeout.current);\n          }\n          if (delayHoverIn) {\n            hoverInTimeout.current = setTimeout(\n              () => onHoverIn?.(gestureToPressableEvent(event)),\n              delayHoverIn\n            );\n            return;\n          }\n          onHoverIn?.(gestureToPressableEvent(event));\n        })\n        .onFinalize((event) => {\n          if (hoverInTimeout.current) {\n            clearTimeout(hoverInTimeout.current);\n          }\n          if (delayHoverOut) {\n            hoverOutTimeout.current = setTimeout(\n              () => onHoverOut?.(gestureToPressableEvent(event)),\n              delayHoverOut\n            );\n            return;\n          }\n          onHoverOut?.(gestureToPressableEvent(event));\n        }),\n    [delayHoverIn, delayHoverOut, onHoverIn, onHoverOut]\n  );\n\n  const pressAndTouchGesture = useMemo(\n    () =>\n      Gesture.LongPress()\n        .minDuration(INT32_MAX) // Stops long press from blocking Gesture.Native()\n        .maxDistance(INT32_MAX) // Stops long press from cancelling on touch move\n        .cancelsTouchesInView(false)\n        .onTouchesDown((event) => {\n          const pressableEvent = gestureTouchToPressableEvent(event);\n          stateMachine.handleEvent(\n            StateMachineEvent.LONG_PRESS_TOUCHES_DOWN,\n            pressableEvent\n          );\n        })\n        .onTouchesUp(() => {\n          if (Platform.OS === 'android') {\n            // Prevents potential soft-locks\n            stateMachine.reset();\n            handleFinalize();\n          }\n        })\n        .onTouchesCancelled((event) => {\n          const pressableEvent = gestureTouchToPressableEvent(event);\n          stateMachine.reset();\n          handlePressOut(pressableEvent, false);\n        })\n        .onFinalize(() => {\n          if (Platform.OS === 'web') {\n            stateMachine.handleEvent(StateMachineEvent.FINALIZE);\n            handleFinalize();\n          }\n        }),\n    [stateMachine, handleFinalize, handlePressOut]\n  );\n\n  // RNButton is placed inside ButtonGesture to enable Android's ripple and to capture non-propagating events\n  const buttonGesture = useMemo(\n    () =>\n      Gesture.Native()\n        .onTouchesCancelled((event) => {\n          if (Platform.OS !== 'macos' && Platform.OS !== 'web') {\n            // On MacOS cancel occurs in middle of gesture\n            // On Web cancel occurs on mouse move, which is unwanted\n            const pressableEvent = gestureTouchToPressableEvent(event);\n            stateMachine.reset();\n            handlePressOut(pressableEvent, false);\n          }\n        })\n        .onBegin(() => {\n          stateMachine.handleEvent(StateMachineEvent.NATIVE_BEGIN);\n        })\n        .onStart(() => {\n          if (Platform.OS !== 'android') {\n            // Gesture.Native().onStart() is broken with Android + hitSlop\n            stateMachine.handleEvent(StateMachineEvent.NATIVE_START);\n          }\n        })\n        .onFinalize(() => {\n          if (Platform.OS !== 'web') {\n            // On Web we use LongPress().onFinalize() instead of Native().onFinalize(),\n            // as Native cancels on mouse move, and LongPress does not.\n            stateMachine.handleEvent(StateMachineEvent.FINALIZE);\n            handleFinalize();\n          }\n        }),\n    [stateMachine, handlePressOut, handleFinalize]\n  );\n\n  const isPressableEnabled = disabled !== true;\n\n  const gestures = [buttonGesture, pressAndTouchGesture, hoverGesture];\n\n  for (const gesture of gestures) {\n    gesture.enabled(isPressableEnabled);\n    gesture.runOnJS(true);\n    gesture.hitSlop(appliedHitSlop);\n    gesture.shouldCancelWhenOutside(Platform.OS !== 'web');\n\n    Object.entries(relationProps).forEach(([relationName, relation]) => {\n      applyRelationProp(\n        gesture,\n        relationName as RelationPropName,\n        relation as RelationPropType\n      );\n    });\n  }\n\n  const gesture = Gesture.Simultaneous(...gestures);\n\n  // `cursor: 'pointer'` on `RNButton` crashes iOS\n  const pointerStyle: StyleProp<ViewStyle> =\n    Platform.OS === 'web' ? { cursor: 'pointer' } : {};\n\n  const styleProp =\n    typeof style === 'function' ? style({ pressed: pressedState }) : style;\n\n  const childrenProp =\n    typeof children === 'function'\n      ? children({ pressed: pressedState })\n      : children;\n\n  const rippleColor = useMemo(() => {\n    if (IS_FABRIC === null) {\n      IS_FABRIC = isFabric();\n    }\n\n    const defaultRippleColor = android_ripple ? undefined : 'transparent';\n    const unprocessedRippleColor = android_ripple?.color ?? defaultRippleColor;\n    return IS_FABRIC\n      ? unprocessedRippleColor\n      : processColor(unprocessedRippleColor);\n  }, [android_ripple]);\n\n  const setDimensions = useCallback(\n    (event: LayoutChangeEvent) => {\n      onLayout?.(event);\n      dimensions.current = event.nativeEvent.layout;\n    },\n    [onLayout]\n  );\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <NativeButton\n        {...remainingProps}\n        onLayout={setDimensions}\n        accessible={accessible !== false}\n        hitSlop={appliedHitSlop}\n        enabled={isPressableEnabled}\n        touchSoundDisabled={android_disableSound ?? undefined}\n        rippleColor={rippleColor}\n        rippleRadius={android_ripple?.radius ?? undefined}\n        style={[pointerStyle, styleProp]}\n        testOnly_onPress={IS_TEST_ENV ? onPress : undefined}\n        testOnly_onPressIn={IS_TEST_ENV ? onPressIn : undefined}\n        testOnly_onPressOut={IS_TEST_ENV ? onPressOut : undefined}\n        testOnly_onLongPress={IS_TEST_ENV ? onLongPress : undefined}>\n        {childrenProp}\n        {__DEV__ ? (\n          <PressabilityDebugView color=\"red\" hitSlop={normalizedHitSlop} />\n        ) : null}\n      </NativeButton>\n    </GestureDetector>\n  );\n};\n\nexport default Pressable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}