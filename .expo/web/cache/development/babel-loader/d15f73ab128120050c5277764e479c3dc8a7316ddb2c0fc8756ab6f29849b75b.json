{"ast":null,"code":"\"use strict\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar Vector = function () {\n  function Vector(length) {\n    _classCallCheck(this, Vector);\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array(length);\n  }\n  return _createClass(Vector, [{\n    key: \"get\",\n    value: function get(index) {\n      return this.elements[this.offset + index];\n    }\n  }, {\n    key: \"set\",\n    value: function set(index, value) {\n      this.elements[this.offset + index] = value;\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(other) {\n      var result = 0;\n      for (var i = 0; i < this.length; i++) {\n        result += this.get(i) * other.get(i);\n      }\n      return result;\n    }\n  }, {\n    key: \"norm\",\n    value: function norm() {\n      return Math.sqrt(this.dot(this));\n    }\n  }], [{\n    key: \"fromVOL\",\n    value: function fromVOL(values, offset, length) {\n      var result = new Vector(0);\n      result.offset = offset;\n      result.length = length;\n      result.elements = values;\n      return result;\n    }\n  }]);\n}();\nvar Matrix = function () {\n  function Matrix(rows, columns) {\n    _classCallCheck(this, Matrix);\n    this.columns = columns;\n    this.elements = new Array(rows * columns);\n  }\n  return _createClass(Matrix, [{\n    key: \"get\",\n    value: function get(row, column) {\n      return this.elements[row * this.columns + column];\n    }\n  }, {\n    key: \"set\",\n    value: function set(row, column, value) {\n      this.elements[row * this.columns + column] = value;\n    }\n  }, {\n    key: \"getRow\",\n    value: function getRow(row) {\n      return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n    }\n  }]);\n}();\nvar PolynomialFit = _createClass(function PolynomialFit(degree) {\n  _classCallCheck(this, PolynomialFit);\n  this.coefficients = new Array(degree + 1);\n});\nvar precisionErrorTolerance = 1e-10;\nvar LeastSquareSolver = function () {\n  function LeastSquareSolver(x, y, w) {\n    _classCallCheck(this, LeastSquareSolver);\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n  return _createClass(LeastSquareSolver, [{\n    key: \"solve\",\n    value: function solve(degree) {\n      if (degree > this.x.length) {\n        return null;\n      }\n      var result = new PolynomialFit(degree);\n      var m = this.x.length;\n      var n = degree + 1;\n      var a = new Matrix(n, m);\n      for (var h = 0; h < m; h++) {\n        a.set(0, h, this.w[h]);\n        for (var i = 1; i < n; i++) {\n          a.set(i, h, a.get(i - 1, h) * this.x[h]);\n        }\n      }\n      var q = new Matrix(n, m);\n      var r = new Matrix(n, m);\n      for (var j = 0; j < n; j += 1) {\n        for (var _h = 0; _h < m; _h += 1) {\n          q.set(j, _h, a.get(j, _h));\n        }\n        for (var _i = 0; _i < j; _i += 1) {\n          var dot = q.getRow(j).dot(q.getRow(_i));\n          for (var _h2 = 0; _h2 < m; _h2 += 1) {\n            q.set(j, _h2, q.get(j, _h2) - dot * q.get(_i, _h2));\n          }\n        }\n        var norm = q.getRow(j).norm();\n        if (norm < precisionErrorTolerance) {\n          return null;\n        }\n        var inverseNorm = 1.0 / norm;\n        for (var _h3 = 0; _h3 < m; _h3 += 1) {\n          q.set(j, _h3, q.get(j, _h3) * inverseNorm);\n        }\n        for (var _i2 = 0; _i2 < n; _i2 += 1) {\n          r.set(j, _i2, _i2 < j ? 0.0 : q.getRow(j).dot(a.getRow(_i2)));\n        }\n      }\n      var wy = new Vector(m);\n      for (var _h4 = 0; _h4 < m; _h4 += 1) {\n        wy.set(_h4, this.y[_h4] * this.w[_h4]);\n      }\n      for (var _i3 = n - 1; _i3 >= 0; _i3 -= 1) {\n        result.coefficients[_i3] = q.getRow(_i3).dot(wy);\n        for (var _j = n - 1; _j > _i3; _j -= 1) {\n          result.coefficients[_i3] -= r.get(_i3, _j) * result.coefficients[_j];\n        }\n        result.coefficients[_i3] /= r.get(_i3, _i3);\n      }\n      return result;\n    }\n  }]);\n}();\nexport { LeastSquareSolver as default };","map":{"version":3,"names":["Vector","length","_classCallCheck","offset","elements","Array","_createClass","key","value","get","index","set","dot","other","result","i","norm","Math","sqrt","fromVOL","values","Matrix","rows","columns","row","column","getRow","PolynomialFit","degree","coefficients","precisionErrorTolerance","LeastSquareSolver","x","y","w","solve","m","n","a","h","q","r","j","inverseNorm","wy","default"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\LeastSquareSolver.ts"],"sourcesContent":["// Implementation taken from Flutter's LeastSquareSolver\n// https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\nclass Vector {\n  private offset: number;\n  private length: number;\n  private elements: number[];\n\n  constructor(length: number) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array<number>(length);\n  }\n\n  public static fromVOL(\n    values: number[],\n    offset: number,\n    length: number\n  ): Vector {\n    const result = new Vector(0);\n\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n\n    return result;\n  }\n\n  public get(index: number): number {\n    return this.elements[this.offset + index];\n  }\n\n  public set(index: number, value: number): void {\n    this.elements[this.offset + index] = value;\n  }\n\n  public dot(other: Vector): number {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n\n  public norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\n\nclass Matrix {\n  private columns: number;\n  private elements: number[];\n\n  constructor(rows: number, columns: number) {\n    this.columns = columns;\n    this.elements = new Array<number>(rows * columns);\n  }\n\n  public get(row: number, column: number): number {\n    return this.elements[row * this.columns + column];\n  }\n\n  public set(row: number, column: number, value: number): void {\n    this.elements[row * this.columns + column] = value;\n  }\n\n  public getRow(row: number): Vector {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\n\n// An nth degree polynomial fit to a dataset.\nclass PolynomialFit {\n  // The polynomial coefficients of the fit.\n  //\n  // For each `i`, the element `coefficients[i]` is the coefficient of\n  // the `i`-th power of the variable.\n  public coefficients: number[];\n\n  // Creates a polynomial fit of the given degree.\n  //\n  // There are n + 1 coefficients in a fit of degree n.\n  constructor(degree: number) {\n    this.coefficients = new Array<number>(degree + 1);\n  }\n}\n\nconst precisionErrorTolerance = 1e-10;\n\n// Uses the least-squares algorithm to fit a polynomial to a set of data.\nexport default class LeastSquareSolver {\n  // The x-coordinates of each data point.\n  private x: number[];\n  // The y-coordinates of each data point.\n  private y: number[];\n  // The weight to use for each data point.\n  private w: number[];\n\n  // Creates a least-squares solver.\n  //\n  // The [x], [y], and [w] arguments must not be null.\n  constructor(x: number[], y: number[], w: number[]) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n\n  // Fits a polynomial of the given degree to the data points.\n  //\n  // When there is not enough data to fit a curve null is returned.\n  public solve(degree: number): PolynomialFit | null {\n    if (degree > this.x.length) {\n      // Not enough data to fit a curve.\n      return null;\n    }\n\n    const result = new PolynomialFit(degree);\n\n    // Shorthands for the purpose of notation equivalence to original C++ code.\n    const m = this.x.length;\n    const n = degree + 1;\n\n    // Expand the X vector to a matrix A, pre-multiplied by the weights.\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n\n    // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n    // Orthonormal basis, column-major ordVectorer.\n    const q = new Matrix(n, m);\n    // Upper triangular matrix, row-major order.\n    const r = new Matrix(n, m);\n\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        // Vectors are linearly dependent or zero so no solution.\n        return null;\n      }\n\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n\n    // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n    // We just work from bottom-right to top-left calculating B's coefficients.\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}