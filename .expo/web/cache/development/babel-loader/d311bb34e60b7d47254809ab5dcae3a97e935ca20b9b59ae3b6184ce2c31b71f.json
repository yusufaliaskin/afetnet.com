{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport { handlerIDToTag } from \"./handlersRegistry\";\nimport { toArray } from \"../utils\";\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { ghQueueMicrotask } from \"../ghQueueMicrotask\";\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\nexport function filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var filteredConfig = _objectSpread({}, defaults);\n  for (var key of validProps) {\n    var value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = {\n          top: value,\n          left: value,\n          bottom: value,\n          right: value\n        };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\nexport function transformIntoHandlerTags(handlerIDs) {\n  handlerIDs = toArray(handlerIDs);\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) == null ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\nexport function findNodeHandle(node) {\n  var _findNodeHandleRN;\n  if (Platform.OS === 'web') {\n    return node;\n  }\n  return (_findNodeHandleRN = findNodeHandleRN(node)) != null ? _findNodeHandleRN : null;\n}\nvar flushOperationsScheduled = false;\nexport function scheduleFlushOperations() {\n  if (!flushOperationsScheduled) {\n    flushOperationsScheduled = true;\n    ghQueueMicrotask(function () {\n      RNGestureHandlerModule.flushOperations();\n      flushOperationsScheduled = false;\n    });\n  }\n}","map":{"version":3,"names":["handlerIDToTag","toArray","RNGestureHandlerModule","ghQueueMicrotask","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","arguments","length","filteredConfig","_objectSpread","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Platform","OS","map","_ref","current","filter","handle","handlerID","_handlerID$current","handlerTag","findNodeHandle","node","_findNodeHandleRN","findNodeHandleRN","flushOperationsScheduled","scheduleFlushOperations","flushOperations"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { Platform, findNodeHandle as findNodeHandleRN } from 'react-native';\nimport { handlerIDToTag } from './handlersRegistry';\nimport { toArray } from '../utils';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nexport function filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const filteredConfig = { ...defaults };\n  for (const key of validProps) {\n    let value = props[key];\n    if (isConfigParam(value, key)) {\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop' && typeof value !== 'object') {\n        value = { top: value, left: value, bottom: value, right: value };\n      }\n      filteredConfig[key] = value;\n    }\n  }\n  return filteredConfig;\n}\n\nexport function transformIntoHandlerTags(handlerIDs: any) {\n  handlerIDs = toArray(handlerIDs);\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\nexport function findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') {\n    return node;\n  }\n  return findNodeHandleRN(node) ?? null;\n}\nlet flushOperationsScheduled = false;\n\nexport function scheduleFlushOperations() {\n  if (!flushOperationsScheduled) {\n    flushOperationsScheduled = true;\n    ghQueueMicrotask(() => {\n      RNGestureHandlerModule.flushOperations();\n\n      flushOperationsScheduled = false;\n    });\n  }\n}\n"],"mappings":";;;;;;;AAEA,SAASA,cAAc;AACvB,SAASC,OAAO;AAChB,OAAOC,sBAAsB;AAC7B,SAASC,gBAAgB;AAEzB,SAASC,aAAaA,CAACC,KAAc,EAAEC,IAAY,EAAE;EAGnD,OACED,KAAK,KAAKE,SAAS,KAClBF,KAAK,KAAKG,MAAM,CAACH,KAAK,CAAC,IACtB,EAAE,YAAY,IAAKA,KAAiC,CAAC,CAAC,IACxDC,IAAI,KAAK,sBAAsB,IAC/BA,IAAI,KAAK,gBAAgB;AAE7B;AAEA,OAAO,SAASG,YAAYA,CAC1BC,KAA8B,EAC9BC,UAAoB,EAEpB;EAAA,IADAC,QAAiC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAN,SAAA,GAAAM,SAAA,MAAG,CAAC,CAAC;EAEtC,IAAME,cAAc,GAAAC,aAAA,KAAQJ,QAAA,CAAU;EACtC,KAAK,IAAMK,GAAG,IAAIN,UAAU,EAAE;IAC5B,IAAIO,KAAK,GAAGR,KAAK,CAACO,GAAG,CAAC;IACtB,IAAIb,aAAa,CAACc,KAAK,EAAED,GAAG,CAAC,EAAE;MAC7B,IAAIA,GAAG,KAAK,sBAAsB,IAAIA,GAAG,KAAK,SAAS,EAAE;QACvDC,KAAK,GAAGC,wBAAwB,CAACT,KAAK,CAACO,GAAG,CAAC,CAAC;MAC9C,CAAC,MAAM,IAAIA,GAAG,KAAK,SAAS,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;QACzDA,KAAK,GAAG;UAAEE,GAAG,EAAEF,KAAK;UAAEG,IAAI,EAAEH,KAAK;UAAEI,MAAM,EAAEJ,KAAK;UAAEK,KAAK,EAAEL;QAAM,CAAC;MAClE;MACAH,cAAc,CAACE,GAAG,CAAC,GAAGC,KAAK;IAC7B;EACF;EACA,OAAOH,cAAc;AACvB;AAEA,OAAO,SAASI,wBAAwBA,CAACK,UAAe,EAAE;EACxDA,UAAU,GAAGvB,OAAO,CAACuB,UAAU,CAAC;EAEhC,IAAIC,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IACzB,OAAOF,UAAU,CACdG,GAAG,CAAC,UAAAC,IAAA;MAAA,IAAGC,OAAA,GAAAD,IAAA,CAAAC,OAAA;MAAA,OAAgCA,OAAO;IAAA,EAAC,CAC/CC,MAAM,CAAE,UAAAC,MAAW;MAAA,OAAKA,MAAM;IAAA,EAAC;EACpC;EAEA,OAAOP,UAAU,CACdG,GAAG,CACD,UAAAK,SAAc;IAAA,IAAAC,kBAAA;IAAA,OACbjC,cAAc,CAACgC,SAAS,CAAC,MAAAC,kBAAA,GAAID,SAAS,CAACH,OAAO,qBAAjBI,kBAAA,CAAmBC,UAAU,KAAI,CAAC,CACnE;EAAA,EAAC,CACAJ,MAAM,CAAE,UAAAI,UAAkB;IAAA,OAAKA,UAAU,GAAG,CAAC;EAAA,EAAC;AACnD;AAEA,OAAO,SAASC,cAAcA,CAC5BC,IAA2E,EACJ;EAAA,IAAAC,iBAAA;EACvE,IAAIZ,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IACzB,OAAOU,IAAI;EACb;EACA,QAAAC,iBAAA,GAAOC,gBAAgB,CAACF,IAAI,CAAC,YAAAC,iBAAA,GAAI,IAAI;AACvC;AACA,IAAIE,wBAAwB,GAAG,KAAK;AAEpC,OAAO,SAASC,uBAAuBA,CAAA,EAAG;EACxC,IAAI,CAACD,wBAAwB,EAAE;IAC7BA,wBAAwB,GAAG,IAAI;IAC/BpC,gBAAgB,CAAC,YAAM;MACrBD,sBAAsB,CAACuC,eAAe,CAAC,CAAC;MAExCF,wBAAwB,GAAG,KAAK;IAClC,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}