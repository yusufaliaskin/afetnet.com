{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar Blob = require(\"./Blob\");\nvar _require = require(\"../BatchedBridge/NativeModules\"),\n  BlobModule = _require.BlobModule;\nvar BLOB_URL_PREFIX = null;\nif (BlobModule && typeof BlobModule.getConstants === 'function') {\n  var _BlobModule$getConsta = BlobModule.getConstants();\n  BLOB_URL_PREFIX = _BlobModule$getConsta.BLOB_URL_PREFIX;\n}\nvar blobs = new Map();\nvar blobId = 0;\nvar BlobManager = function () {\n  function BlobManager() {\n    _classCallCheck(this, BlobManager);\n  }\n  return _createClass(BlobManager, null, [{\n    key: \"createFromParts\",\n    value: function createFromParts(parts, options) {\n      var blobIdValue = `${++blobId}`;\n      var items = parts.map(function (part) {\n        if (part instanceof ArrayBuffer || part != null && typeof part === 'object' && typeof part.constructor === 'function' && part.constructor.name === 'ArrayBuffer') {\n          throw new Error('Creating blobs from ArrayBuffer is not supported yet.');\n        }\n        if (part instanceof Blob) {\n          return {\n            data: part.data,\n            type: 'blob'\n          };\n        } else {\n          return {\n            data: String(part),\n            type: 'string'\n          };\n        }\n      });\n      var size = items.reduce(function (acc, item) {\n        if (item.type === 'string') {\n          return acc + item.data.length;\n        } else {\n          return acc + item.data.size;\n        }\n      }, 0);\n      if (BlobModule && BlobModule.createFromParts) {\n        BlobModule.createFromParts(items, blobIdValue);\n      }\n      return blobIdValue;\n    }\n  }, {\n    key: \"createFromOptions\",\n    value: function createFromOptions(options) {\n      return Object.create(Blob.prototype, {\n        data: {\n          value: options\n        }\n      });\n    }\n  }, {\n    key: \"release\",\n    value: function release(blobId) {\n      if (BlobModule && BlobModule.release) {\n        BlobModule.release(blobId);\n      }\n      if (blobs.has(blobId)) {\n        var blob = blobs.get(blobId);\n        if (blob && blob.__collector) {\n          Object.keys(blob.__collector).forEach(function (key) {\n            blob.__collector[key]();\n          });\n        }\n        blobs.delete(blobId);\n      }\n    }\n  }, {\n    key: \"addNetworkingHandler\",\n    value: function addNetworkingHandler() {\n      if (BlobModule && BlobModule.addNetworkingHandler) {\n        BlobModule.addNetworkingHandler();\n      }\n    }\n  }, {\n    key: \"removeNetworkingHandler\",\n    value: function removeNetworkingHandler() {\n      if (BlobModule && BlobModule.removeNetworkingHandler) {\n        BlobModule.removeNetworkingHandler();\n      }\n    }\n  }, {\n    key: \"createObjectURL\",\n    value: function createObjectURL(blob) {\n      if (BLOB_URL_PREFIX) {\n        return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.data.size}`;\n      }\n      throw new Error('Cannot create URL for blob!');\n    }\n  }, {\n    key: \"revokeObjectURL\",\n    value: function revokeObjectURL(url) {}\n  }, {\n    key: \"getSize\",\n    value: function getSize(blobId) {\n      if (BlobModule && BlobModule.getSize) {\n        return BlobModule.getSize(blobId);\n      }\n      return 0;\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function readAsDataURL(blob) {\n      return new Promise(function (resolve, reject) {\n        if (BlobModule && BlobModule.readAsDataURL) {\n          BlobModule.readAsDataURL(blob.data, resolve, reject);\n        } else {\n          reject(new Error('BlobModule.readAsDataURL is not available'));\n        }\n      });\n    }\n  }, {\n    key: \"readAsText\",\n    value: function readAsText(blob, encoding) {\n      return new Promise(function (resolve, reject) {\n        if (BlobModule && BlobModule.readAsText) {\n          BlobModule.readAsText(blob.data, encoding || 'utf8', resolve, reject);\n        } else {\n          reject(new Error('BlobModule.readAsText is not available'));\n        }\n      });\n    }\n  }]);\n}();\nBlobManager.isAvailable = !!(BlobModule && BlobModule.addNetworkingHandler);\nmodule.exports = BlobManager;\nmodule.exports.default = BlobManager;\nif (typeof exports === 'object' && typeof module !== 'undefined') {\n  exports.default = BlobManager;\n}","map":{"version":3,"names":["_classCallCheck","_createClass","Blob","require","_require","BlobModule","BLOB_URL_PREFIX","getConstants","_BlobModule$getConsta","blobs","Map","blobId","BlobManager","key","value","createFromParts","parts","options","blobIdValue","items","map","part","ArrayBuffer","constructor","name","Error","data","type","String","size","reduce","acc","item","length","createFromOptions","Object","create","prototype","release","has","blob","get","__collector","keys","forEach","delete","addNetworkingHandler","removeNetworkingHandler","createObjectURL","offset","revokeObjectURL","url","getSize","readAsDataURL","Promise","resolve","reject","readAsText","encoding","isAvailable","module","exports","default"],"sources":["C:/Users/Yusuf Ali Aşkın/Desktop/proje_afetnet/node_modules/react-native/Libraries/Blob/BlobManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\n\nconst Blob = require('./Blob');\nconst {BlobModule} = require('../BatchedBridge/NativeModules');\n\nlet BLOB_URL_PREFIX = null;\n\nif (BlobModule && typeof BlobModule.getConstants === 'function') {\n  ({BLOB_URL_PREFIX} = BlobModule.getConstants());\n}\n\ntype BlobCollector = {\n  __collector: {\n    [key: string]: () => void,\n  },\n};\n\nconst blobs: Map<string, BlobCollector> = new Map();\nlet blobId = 0;\n\n/**\n * Module to manage blobs. Wrapper around the native blob module.\n */\nclass BlobManager {\n  /**\n   * If the native blob module is available.\n   */\n  static isAvailable: boolean = !!(BlobModule && BlobModule.addNetworkingHandler);\n\n  /**\n   * Create blob from existing array of blobs.\n   */\n  static createFromParts(\n    parts: Array<Blob | string>,\n    options?: BlobOptions,\n  ): string {\n    const blobIdValue = `${++blobId}`;\n    const items = parts.map(part => {\n      if (\n        part instanceof ArrayBuffer ||\n        (part != null && typeof part === 'object' && typeof part.constructor === 'function' && part.constructor.name === 'ArrayBuffer')\n      ) {\n        throw new Error('Creating blobs from ArrayBuffer is not supported yet.');\n      }\n      if (part instanceof Blob) {\n        return {\n          data: part.data,\n          type: 'blob',\n        };\n      } else {\n        return {\n          data: String(part),\n          type: 'string',\n        };\n      }\n    });\n\n    const size = items.reduce((acc, item) => {\n      if (item.type === 'string') {\n        return acc + item.data.length;\n      } else {\n        return acc + item.data.size;\n      }\n    }, 0);\n\n    if (BlobModule && BlobModule.createFromParts) {\n      BlobModule.createFromParts(items, blobIdValue);\n    }\n\n    return blobIdValue;\n  }\n\n  /**\n   * Create blob from options object.\n   */\n  static createFromOptions(options: BlobData): Blob {\n    return Object.create(Blob.prototype, {\n      data: {\n        value: options,\n      },\n    });\n  }\n\n  /**\n   * Release the blob with given id.\n   */\n  static release(blobId: string): void {\n    if (BlobModule && BlobModule.release) {\n      BlobModule.release(blobId);\n    }\n    if (blobs.has(blobId)) {\n      const blob = blobs.get(blobId);\n      if (blob && blob.__collector) {\n        Object.keys(blob.__collector).forEach(key => {\n          blob.__collector[key]();\n        });\n      }\n      blobs.delete(blobId);\n    }\n  }\n\n  /**\n   * Inject the blob content handler to the networking layer.\n   */\n  static addNetworkingHandler(): void {\n    if (BlobModule && BlobModule.addNetworkingHandler) {\n      BlobModule.addNetworkingHandler();\n    }\n  }\n\n  /**\n   * Remove the blob content handler from the networking layer.\n   */\n  static removeNetworkingHandler(): void {\n    if (BlobModule && BlobModule.removeNetworkingHandler) {\n      BlobModule.removeNetworkingHandler();\n    }\n  }\n\n  /**\n   * Create a blob URL.\n   */\n  static createObjectURL(blob: Blob): string {\n    if (BLOB_URL_PREFIX) {\n      return `${BLOB_URL_PREFIX}${blob.data.blobId}?offset=${blob.data.offset}&size=${blob.data.size}`;\n    }\n    throw new Error('Cannot create URL for blob!');\n  }\n\n  /**\n   * Release a blob URL.\n   */\n  static revokeObjectURL(url: string): void {\n    // Do nothing for now\n  }\n\n  /**\n   * Get the size of a blob.\n   */\n  static getSize(blobId: string): number {\n    if (BlobModule && BlobModule.getSize) {\n      return BlobModule.getSize(blobId);\n    }\n    return 0;\n  }\n\n  /**\n   * Send a blob to be read.\n   */\n  static readAsDataURL(blob: Blob): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (BlobModule && BlobModule.readAsDataURL) {\n        BlobModule.readAsDataURL(blob.data, resolve, reject);\n      } else {\n        reject(new Error('BlobModule.readAsDataURL is not available'));\n      }\n    });\n  }\n\n  /**\n   * Send a blob to be read as text.\n   */\n  static readAsText(blob: Blob, encoding?: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      if (BlobModule && BlobModule.readAsText) {\n        BlobModule.readAsText(blob.data, encoding || 'utf8', resolve, reject);\n      } else {\n        reject(new Error('BlobModule.readAsText is not available'));\n      }\n    });\n  }\n}\n\nmodule.exports = BlobManager;\nmodule.exports.default = BlobManager;\n\n// Add ES6 export for compatibility\nif (typeof exports === 'object' && typeof module !== 'undefined') {\n  exports.default = BlobManager;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}