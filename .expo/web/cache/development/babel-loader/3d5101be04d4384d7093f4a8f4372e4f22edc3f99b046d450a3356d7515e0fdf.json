{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nexport var DISASTER_TYPES = {\n  EARTHQUAKE: 'earthquake',\n  FIRE: 'fire',\n  FLOOD: 'flood',\n  STORM: 'storm',\n  LANDSLIDE: 'landslide'\n};\nexport var SEVERITY_LEVELS = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  CRITICAL: 'critical'\n};\nvar TURKISH_CITIES = [{\n  name: 'İstanbul',\n  lat: 41.0082,\n  lng: 28.9784\n}, {\n  name: 'Ankara',\n  lat: 39.9334,\n  lng: 32.8597\n}, {\n  name: 'İzmir',\n  lat: 38.4192,\n  lng: 27.1287\n}, {\n  name: 'Bursa',\n  lat: 40.1826,\n  lng: 29.0665\n}, {\n  name: 'Antalya',\n  lat: 36.8969,\n  lng: 30.7133\n}, {\n  name: 'Adana',\n  lat: 37.0000,\n  lng: 35.3213\n}, {\n  name: 'Konya',\n  lat: 37.8667,\n  lng: 32.4833\n}, {\n  name: 'Gaziantep',\n  lat: 37.0662,\n  lng: 37.3833\n}, {\n  name: 'Şanlıurfa',\n  lat: 37.1591,\n  lng: 38.7969\n}, {\n  name: 'Kocaeli',\n  lat: 40.8533,\n  lng: 29.8815\n}, {\n  name: 'Mersin',\n  lat: 36.8000,\n  lng: 34.6333\n}, {\n  name: 'Diyarbakır',\n  lat: 37.9144,\n  lng: 40.2306\n}, {\n  name: 'Hatay',\n  lat: 36.4018,\n  lng: 36.3498\n}, {\n  name: 'Manisa',\n  lat: 38.6191,\n  lng: 27.4289\n}, {\n  name: 'Kayseri',\n  lat: 38.7312,\n  lng: 35.4787\n}, {\n  name: 'Samsun',\n  lat: 41.2928,\n  lng: 36.3313\n}, {\n  name: 'Balıkesir',\n  lat: 39.6484,\n  lng: 27.8826\n}, {\n  name: 'Kahramanmaraş',\n  lat: 37.5858,\n  lng: 36.9371\n}, {\n  name: 'Van',\n  lat: 38.4891,\n  lng: 43.4089\n}, {\n  name: 'Aydın',\n  lat: 37.8560,\n  lng: 27.8416\n}, {\n  name: 'Denizli',\n  lat: 37.7765,\n  lng: 29.0864\n}, {\n  name: 'Sakarya',\n  lat: 40.6940,\n  lng: 30.4358\n}, {\n  name: 'Tekirdağ',\n  lat: 40.9833,\n  lng: 27.5167\n}, {\n  name: 'Muğla',\n  lat: 37.2153,\n  lng: 28.3636\n}, {\n  name: 'Eskişehir',\n  lat: 39.7767,\n  lng: 30.5206\n}, {\n  name: 'Malatya',\n  lat: 38.3552,\n  lng: 38.3095\n}, {\n  name: 'Erzurum',\n  lat: 39.9334,\n  lng: 41.2769\n}, {\n  name: 'Trabzon',\n  lat: 41.0015,\n  lng: 39.7178\n}, {\n  name: 'Elazığ',\n  lat: 38.6810,\n  lng: 39.2264\n}];\nvar DisasterService = function () {\n  function DisasterService() {\n    _classCallCheck(this, DisasterService);\n    this.activeDisasters = [];\n    this.listeners = [];\n    this.isRunning = false;\n  }\n  return _createClass(DisasterService, [{\n    key: \"getRandomCity\",\n    value: function getRandomCity() {\n      return TURKISH_CITIES[Math.floor(Math.random() * TURKISH_CITIES.length)];\n    }\n  }, {\n    key: \"generateEarthquake\",\n    value: function generateEarthquake() {\n      var city = this.getRandomCity();\n      var magnitude = (Math.random() * 4 + 3).toFixed(1);\n      var depth = Math.floor(Math.random() * 50 + 5);\n      var severity = SEVERITY_LEVELS.LOW;\n      if (magnitude >= 6.0) severity = SEVERITY_LEVELS.CRITICAL;else if (magnitude >= 5.0) severity = SEVERITY_LEVELS.HIGH;else if (magnitude >= 4.0) severity = SEVERITY_LEVELS.MEDIUM;\n      return {\n        id: `earthquake_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        type: DISASTER_TYPES.EARTHQUAKE,\n        severity: severity,\n        title: `${magnitude} Büyüklüğünde Deprem`,\n        location: city.name,\n        coordinates: {\n          lat: city.lat,\n          lng: city.lng\n        },\n        magnitude: parseFloat(magnitude),\n        depth: `${depth} km`,\n        timestamp: new Date(),\n        description: `${city.name} merkezli ${magnitude} büyüklüğünde deprem meydana geldi. Derinlik: ${depth} km`,\n        affectedPopulation: Math.floor(Math.random() * 500000 + 10000),\n        status: 'active'\n      };\n    }\n  }, {\n    key: \"generateFire\",\n    value: function generateFire() {\n      var city = this.getRandomCity();\n      var fireTypes = ['Orman Yangını', 'Fabrika Yangını', 'Konut Yangını', 'Araç Yangını'];\n      var fireType = fireTypes[Math.floor(Math.random() * fireTypes.length)];\n      var area = Math.floor(Math.random() * 1000 + 50);\n      var severity = SEVERITY_LEVELS.LOW;\n      if (area >= 500) severity = SEVERITY_LEVELS.CRITICAL;else if (area >= 200) severity = SEVERITY_LEVELS.HIGH;else if (area >= 100) severity = SEVERITY_LEVELS.MEDIUM;\n      return {\n        id: `fire_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        type: DISASTER_TYPES.FIRE,\n        severity: severity,\n        title: fireType,\n        location: city.name,\n        coordinates: {\n          lat: city.lat,\n          lng: city.lng\n        },\n        area: `${area} hektar`,\n        timestamp: new Date(),\n        description: `${city.name} bölgesinde ${fireType.toLowerCase()} başladı. Etkilenen alan: ${area} hektar`,\n        affectedPopulation: Math.floor(Math.random() * 100000 + 1000),\n        status: 'active'\n      };\n    }\n  }, {\n    key: \"generateFlood\",\n    value: function generateFlood() {\n      var city = this.getRandomCity();\n      var waterLevel = (Math.random() * 3 + 0.5).toFixed(1);\n      var rainfall = Math.floor(Math.random() * 150 + 20);\n      var severity = SEVERITY_LEVELS.LOW;\n      if (waterLevel >= 2.5) severity = SEVERITY_LEVELS.CRITICAL;else if (waterLevel >= 1.5) severity = SEVERITY_LEVELS.HIGH;else if (waterLevel >= 1.0) severity = SEVERITY_LEVELS.MEDIUM;\n      return {\n        id: `flood_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        type: DISASTER_TYPES.FLOOD,\n        severity: severity,\n        title: 'Sel Felaketi',\n        location: city.name,\n        coordinates: {\n          lat: city.lat,\n          lng: city.lng\n        },\n        waterLevel: `${waterLevel} metre`,\n        rainfall: `${rainfall} mm`,\n        timestamp: new Date(),\n        description: `${city.name} bölgesinde şiddetli yağışlar nedeniyle sel oluştu. Su seviyesi: ${waterLevel} metre`,\n        affectedPopulation: Math.floor(Math.random() * 200000 + 5000),\n        status: 'active'\n      };\n    }\n  }, {\n    key: \"generateStorm\",\n    value: function generateStorm() {\n      var city = this.getRandomCity();\n      var windSpeed = Math.floor(Math.random() * 80 + 40);\n      var severity = SEVERITY_LEVELS.LOW;\n      if (windSpeed >= 100) severity = SEVERITY_LEVELS.CRITICAL;else if (windSpeed >= 80) severity = SEVERITY_LEVELS.HIGH;else if (windSpeed >= 60) severity = SEVERITY_LEVELS.MEDIUM;\n      return {\n        id: `storm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        type: DISASTER_TYPES.STORM,\n        severity: severity,\n        title: 'Şiddetli Fırtına',\n        location: city.name,\n        coordinates: {\n          lat: city.lat,\n          lng: city.lng\n        },\n        windSpeed: `${windSpeed} km/h`,\n        timestamp: new Date(),\n        description: `${city.name} bölgesinde ${windSpeed} km/h hızında rüzgar ile şiddetli fırtına etkili oluyor`,\n        affectedPopulation: Math.floor(Math.random() * 150000 + 2000),\n        status: 'active'\n      };\n    }\n  }, {\n    key: \"generateLandslide\",\n    value: function generateLandslide() {\n      var city = this.getRandomCity();\n      var volume = Math.floor(Math.random() * 10000 + 500);\n      var severity = SEVERITY_LEVELS.MEDIUM;\n      if (volume >= 5000) severity = SEVERITY_LEVELS.CRITICAL;else if (volume >= 2000) severity = SEVERITY_LEVELS.HIGH;\n      return {\n        id: `landslide_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        type: DISASTER_TYPES.LANDSLIDE,\n        severity: severity,\n        title: 'Heyelan',\n        location: city.name,\n        coordinates: {\n          lat: city.lat,\n          lng: city.lng\n        },\n        volume: `${volume} m³`,\n        timestamp: new Date(),\n        description: `${city.name} bölgesinde heyelan meydana geldi. Tahmini hacim: ${volume} m³`,\n        affectedPopulation: Math.floor(Math.random() * 50000 + 500),\n        status: 'active'\n      };\n    }\n  }, {\n    key: \"generateRandomDisaster\",\n    value: function generateRandomDisaster() {\n      var _this = this;\n      var disasterGenerators = [function () {\n        return _this.generateEarthquake();\n      }, function () {\n        return _this.generateFire();\n      }, function () {\n        return _this.generateFlood();\n      }, function () {\n        return _this.generateStorm();\n      }, function () {\n        return _this.generateLandslide();\n      }];\n      var randomGenerator = disasterGenerators[Math.floor(Math.random() * disasterGenerators.length)];\n      return randomGenerator();\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(callback) {\n      this.listeners.push(callback);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(callback) {\n      this.listeners = this.listeners.filter(function (listener) {\n        return listener !== callback;\n      });\n    }\n  }, {\n    key: \"notifyListeners\",\n    value: function notifyListeners(disaster) {\n      this.listeners.forEach(function (callback) {\n        try {\n          callback(disaster);\n        } catch (error) {\n          console.error('Disaster listener error:', error);\n        }\n      });\n    }\n  }, {\n    key: \"startSimulation\",\n    value: function startSimulation() {\n      var _this2 = this;\n      if (this.isRunning) return;\n      this.isRunning = true;\n      var _generateDisaster = function generateDisaster() {\n        if (!_this2.isRunning) return;\n        var disaster = _this2.generateRandomDisaster();\n        _this2.activeDisasters.push(disaster);\n        _this2.notifyListeners(disaster);\n        var oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n        _this2.activeDisasters = _this2.activeDisasters.filter(function (d) {\n          return d.timestamp > oneDayAgo;\n        });\n        var nextDisasterTime = Math.random() * (5 * 60 * 1000 - 30 * 1000) + 30 * 1000;\n        setTimeout(_generateDisaster, nextDisasterTime);\n      };\n      setTimeout(_generateDisaster, 2000);\n    }\n  }, {\n    key: \"stopSimulation\",\n    value: function stopSimulation() {\n      this.isRunning = false;\n    }\n  }, {\n    key: \"getActiveDisasters\",\n    value: function getActiveDisasters() {\n      return this.activeDisasters;\n    }\n  }, {\n    key: \"getDisastersByType\",\n    value: function getDisastersByType(type) {\n      return this.activeDisasters.filter(function (disaster) {\n        return disaster.type === type;\n      });\n    }\n  }, {\n    key: \"getDisastersBySeverity\",\n    value: function getDisastersBySeverity(severity) {\n      return this.activeDisasters.filter(function (disaster) {\n        return disaster.severity === severity;\n      });\n    }\n  }, {\n    key: \"getCriticalDisasters\",\n    value: function getCriticalDisasters() {\n      return this.getDisastersBySeverity(SEVERITY_LEVELS.CRITICAL);\n    }\n  }]);\n}();\nvar disasterService = new DisasterService();\nexport default disasterService;","map":{"version":3,"names":["DISASTER_TYPES","EARTHQUAKE","FIRE","FLOOD","STORM","LANDSLIDE","SEVERITY_LEVELS","LOW","MEDIUM","HIGH","CRITICAL","TURKISH_CITIES","name","lat","lng","DisasterService","_classCallCheck","activeDisasters","listeners","isRunning","_createClass","key","value","getRandomCity","Math","floor","random","length","generateEarthquake","city","magnitude","toFixed","depth","severity","id","Date","now","toString","substr","type","title","location","coordinates","parseFloat","timestamp","description","affectedPopulation","status","generateFire","fireTypes","fireType","area","toLowerCase","generateFlood","waterLevel","rainfall","generateStorm","windSpeed","generateLandslide","volume","generateRandomDisaster","_this","disasterGenerators","randomGenerator","addListener","callback","push","removeListener","filter","listener","notifyListeners","disaster","forEach","error","console","startSimulation","_this2","generateDisaster","oneDayAgo","d","nextDisasterTime","setTimeout","stopSimulation","getActiveDisasters","getDisastersByType","getDisastersBySeverity","getCriticalDisasters","disasterService"],"sources":["C:/Users/Yusuf Ali Aşkın/Downloads/Desktop/proje_afetnet/src/services/disasterService.js"],"sourcesContent":["// Afet Veri Servisi - Gerçek zamanlı afet verilerini simüle eder\n\nexport const DISASTER_TYPES = {\n  EARTHQUAKE: 'earthquake',\n  FIRE: 'fire',\n  FLOOD: 'flood',\n  STORM: 'storm',\n  LANDSLIDE: 'landslide'\n};\n\nexport const SEVERITY_LEVELS = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  CRITICAL: 'critical'\n};\n\n// Türkiye'deki şehirler ve koordinatları\nconst TURKISH_CITIES = [\n  { name: 'İstanbul', lat: 41.0082, lng: 28.9784 },\n  { name: 'Ankara', lat: 39.9334, lng: 32.8597 },\n  { name: 'İzmir', lat: 38.4192, lng: 27.1287 },\n  { name: 'Bursa', lat: 40.1826, lng: 29.0665 },\n  { name: 'Antalya', lat: 36.8969, lng: 30.7133 },\n  { name: 'Adana', lat: 37.0000, lng: 35.3213 },\n  { name: 'Konya', lat: 37.8667, lng: 32.4833 },\n  { name: 'Gaziantep', lat: 37.0662, lng: 37.3833 },\n  { name: 'Şanlıurfa', lat: 37.1591, lng: 38.7969 },\n  { name: 'Kocaeli', lat: 40.8533, lng: 29.8815 },\n  { name: 'Mersin', lat: 36.8000, lng: 34.6333 },\n  { name: 'Diyarbakır', lat: 37.9144, lng: 40.2306 },\n  { name: 'Hatay', lat: 36.4018, lng: 36.3498 },\n  { name: 'Manisa', lat: 38.6191, lng: 27.4289 },\n  { name: 'Kayseri', lat: 38.7312, lng: 35.4787 },\n  { name: 'Samsun', lat: 41.2928, lng: 36.3313 },\n  { name: 'Balıkesir', lat: 39.6484, lng: 27.8826 },\n  { name: 'Kahramanmaraş', lat: 37.5858, lng: 36.9371 },\n  { name: 'Van', lat: 38.4891, lng: 43.4089 },\n  { name: 'Aydın', lat: 37.8560, lng: 27.8416 },\n  { name: 'Denizli', lat: 37.7765, lng: 29.0864 },\n  { name: 'Sakarya', lat: 40.6940, lng: 30.4358 },\n  { name: 'Tekirdağ', lat: 40.9833, lng: 27.5167 },\n  { name: 'Muğla', lat: 37.2153, lng: 28.3636 },\n  { name: 'Eskişehir', lat: 39.7767, lng: 30.5206 },\n  { name: 'Malatya', lat: 38.3552, lng: 38.3095 },\n  { name: 'Erzurum', lat: 39.9334, lng: 41.2769 },\n  { name: 'Trabzon', lat: 41.0015, lng: 39.7178 },\n  { name: 'Elazığ', lat: 38.6810, lng: 39.2264 }\n];\n\n// Gerçekçi afet verileri oluşturma\nclass DisasterService {\n  constructor() {\n    this.activeDisasters = [];\n    this.listeners = [];\n    this.isRunning = false;\n  }\n\n  // Rastgele şehir seç\n  getRandomCity() {\n    return TURKISH_CITIES[Math.floor(Math.random() * TURKISH_CITIES.length)];\n  }\n\n  // Deprem verisi oluştur\n  generateEarthquake() {\n    const city = this.getRandomCity();\n    const magnitude = (Math.random() * 4 + 3).toFixed(1); // 3.0 - 7.0 arası\n    const depth = Math.floor(Math.random() * 50 + 5); // 5-55 km arası\n    \n    let severity = SEVERITY_LEVELS.LOW;\n    if (magnitude >= 6.0) severity = SEVERITY_LEVELS.CRITICAL;\n    else if (magnitude >= 5.0) severity = SEVERITY_LEVELS.HIGH;\n    else if (magnitude >= 4.0) severity = SEVERITY_LEVELS.MEDIUM;\n\n    return {\n      id: `earthquake_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: DISASTER_TYPES.EARTHQUAKE,\n      severity,\n      title: `${magnitude} Büyüklüğünde Deprem`,\n      location: city.name,\n      coordinates: { lat: city.lat, lng: city.lng },\n      magnitude: parseFloat(magnitude),\n      depth: `${depth} km`,\n      timestamp: new Date(),\n      description: `${city.name} merkezli ${magnitude} büyüklüğünde deprem meydana geldi. Derinlik: ${depth} km`,\n      affectedPopulation: Math.floor(Math.random() * 500000 + 10000),\n      status: 'active'\n    };\n  }\n\n  // Yangın verisi oluştur\n  generateFire() {\n    const city = this.getRandomCity();\n    const fireTypes = ['Orman Yangını', 'Fabrika Yangını', 'Konut Yangını', 'Araç Yangını'];\n    const fireType = fireTypes[Math.floor(Math.random() * fireTypes.length)];\n    const area = Math.floor(Math.random() * 1000 + 50); // 50-1050 hektar\n    \n    let severity = SEVERITY_LEVELS.LOW;\n    if (area >= 500) severity = SEVERITY_LEVELS.CRITICAL;\n    else if (area >= 200) severity = SEVERITY_LEVELS.HIGH;\n    else if (area >= 100) severity = SEVERITY_LEVELS.MEDIUM;\n\n    return {\n      id: `fire_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: DISASTER_TYPES.FIRE,\n      severity,\n      title: fireType,\n      location: city.name,\n      coordinates: { lat: city.lat, lng: city.lng },\n      area: `${area} hektar`,\n      timestamp: new Date(),\n      description: `${city.name} bölgesinde ${fireType.toLowerCase()} başladı. Etkilenen alan: ${area} hektar`,\n      affectedPopulation: Math.floor(Math.random() * 100000 + 1000),\n      status: 'active'\n    };\n  }\n\n  // Sel verisi oluştur\n  generateFlood() {\n    const city = this.getRandomCity();\n    const waterLevel = (Math.random() * 3 + 0.5).toFixed(1); // 0.5-3.5 metre\n    const rainfall = Math.floor(Math.random() * 150 + 20); // 20-170 mm\n    \n    let severity = SEVERITY_LEVELS.LOW;\n    if (waterLevel >= 2.5) severity = SEVERITY_LEVELS.CRITICAL;\n    else if (waterLevel >= 1.5) severity = SEVERITY_LEVELS.HIGH;\n    else if (waterLevel >= 1.0) severity = SEVERITY_LEVELS.MEDIUM;\n\n    return {\n      id: `flood_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: DISASTER_TYPES.FLOOD,\n      severity,\n      title: 'Sel Felaketi',\n      location: city.name,\n      coordinates: { lat: city.lat, lng: city.lng },\n      waterLevel: `${waterLevel} metre`,\n      rainfall: `${rainfall} mm`,\n      timestamp: new Date(),\n      description: `${city.name} bölgesinde şiddetli yağışlar nedeniyle sel oluştu. Su seviyesi: ${waterLevel} metre`,\n      affectedPopulation: Math.floor(Math.random() * 200000 + 5000),\n      status: 'active'\n    };\n  }\n\n  // Fırtına verisi oluştur\n  generateStorm() {\n    const city = this.getRandomCity();\n    const windSpeed = Math.floor(Math.random() * 80 + 40); // 40-120 km/h\n    \n    let severity = SEVERITY_LEVELS.LOW;\n    if (windSpeed >= 100) severity = SEVERITY_LEVELS.CRITICAL;\n    else if (windSpeed >= 80) severity = SEVERITY_LEVELS.HIGH;\n    else if (windSpeed >= 60) severity = SEVERITY_LEVELS.MEDIUM;\n\n    return {\n      id: `storm_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: DISASTER_TYPES.STORM,\n      severity,\n      title: 'Şiddetli Fırtına',\n      location: city.name,\n      coordinates: { lat: city.lat, lng: city.lng },\n      windSpeed: `${windSpeed} km/h`,\n      timestamp: new Date(),\n      description: `${city.name} bölgesinde ${windSpeed} km/h hızında rüzgar ile şiddetli fırtına etkili oluyor`,\n      affectedPopulation: Math.floor(Math.random() * 150000 + 2000),\n      status: 'active'\n    };\n  }\n\n  // Heyelan verisi oluştur\n  generateLandslide() {\n    const city = this.getRandomCity();\n    const volume = Math.floor(Math.random() * 10000 + 500); // 500-10500 m³\n    \n    let severity = SEVERITY_LEVELS.MEDIUM;\n    if (volume >= 5000) severity = SEVERITY_LEVELS.CRITICAL;\n    else if (volume >= 2000) severity = SEVERITY_LEVELS.HIGH;\n\n    return {\n      id: `landslide_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: DISASTER_TYPES.LANDSLIDE,\n      severity,\n      title: 'Heyelan',\n      location: city.name,\n      coordinates: { lat: city.lat, lng: city.lng },\n      volume: `${volume} m³`,\n      timestamp: new Date(),\n      description: `${city.name} bölgesinde heyelan meydana geldi. Tahmini hacim: ${volume} m³`,\n      affectedPopulation: Math.floor(Math.random() * 50000 + 500),\n      status: 'active'\n    };\n  }\n\n  // Rastgele afet oluştur\n  generateRandomDisaster() {\n    const disasterGenerators = [\n      () => this.generateEarthquake(),\n      () => this.generateFire(),\n      () => this.generateFlood(),\n      () => this.generateStorm(),\n      () => this.generateLandslide()\n    ];\n\n    const randomGenerator = disasterGenerators[Math.floor(Math.random() * disasterGenerators.length)];\n    return randomGenerator();\n  }\n\n  // Afet dinleyicisi ekle\n  addListener(callback) {\n    this.listeners.push(callback);\n  }\n\n  // Afet dinleyicisi kaldır\n  removeListener(callback) {\n    this.listeners = this.listeners.filter(listener => listener !== callback);\n  }\n\n  // Dinleyicileri bilgilendir\n  notifyListeners(disaster) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(disaster);\n      } catch (error) {\n        console.error('Disaster listener error:', error);\n      }\n    });\n  }\n\n  // Gerçek zamanlı afet simülasyonu başlat\n  startSimulation() {\n    if (this.isRunning) return;\n    \n    this.isRunning = true;\n    \n    const generateDisaster = () => {\n      if (!this.isRunning) return;\n      \n      const disaster = this.generateRandomDisaster();\n      this.activeDisasters.push(disaster);\n      this.notifyListeners(disaster);\n      \n      // Eski afetleri temizle (24 saatten eski)\n      const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n      this.activeDisasters = this.activeDisasters.filter(\n        d => d.timestamp > oneDayAgo\n      );\n      \n      // Sonraki afet için rastgele süre (30 saniye - 5 dakika)\n      const nextDisasterTime = Math.random() * (5 * 60 * 1000 - 30 * 1000) + 30 * 1000;\n      setTimeout(generateDisaster, nextDisasterTime);\n    };\n    \n    // İlk afeti hemen oluştur\n    setTimeout(generateDisaster, 2000);\n  }\n\n  // Simülasyonu durdur\n  stopSimulation() {\n    this.isRunning = false;\n  }\n\n  // Aktif afetleri getir\n  getActiveDisasters() {\n    return this.activeDisasters;\n  }\n\n  // Afet türüne göre filtrele\n  getDisastersByType(type) {\n    return this.activeDisasters.filter(disaster => disaster.type === type);\n  }\n\n  // Şiddet seviyesine göre filtrele\n  getDisastersBySeverity(severity) {\n    return this.activeDisasters.filter(disaster => disaster.severity === severity);\n  }\n\n  // Kritik afetleri getir\n  getCriticalDisasters() {\n    return this.getDisastersBySeverity(SEVERITY_LEVELS.CRITICAL);\n  }\n}\n\n// Singleton instance\nconst disasterService = new DisasterService();\nexport default disasterService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}