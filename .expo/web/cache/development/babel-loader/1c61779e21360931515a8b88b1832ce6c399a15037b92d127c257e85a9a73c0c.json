{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from 'axios';\nvar AFAD_API_BASE_URL = 'https://deprem.afad.gov.tr';\nvar AFAD_EVENT_FILTER_URL = 'https://deprem.afad.gov.tr/EventData/GetEventsByFilter';\nvar KANDILLI_API_URL = 'http://www.koeri.boun.edu.tr/scripts/lst0.asp';\nvar KANDILLI_JSON_URL = 'http://www.koeri.boun.edu.tr/scripts/lasteq.asp';\nvar TADAS_AFAD_URL = 'https://tadas.afad.gov.tr/api/earthquakes';\nvar EarthquakeService = function () {\n  function EarthquakeService() {\n    _classCallCheck(this, EarthquakeService);\n    this.apiClient = axios.create({\n      baseURL: AFAD_API_BASE_URL,\n      timeout: 15000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n  }\n  return _createClass(EarthquakeService, [{\n    key: \"formatDate\",\n    value: function formatDate(date) {\n      return date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0') + ' ' + String(date.getHours()).padStart(2, '0') + ':' + String(date.getMinutes()).padStart(2, '0') + ':' + String(date.getSeconds()).padStart(2, '0');\n    }\n  }, {\n    key: \"getEarthquakesByDateRange\",\n    value: (function () {\n      var _getEarthquakesByDateRange = _asyncToGenerator(function* (startDate, endDate) {\n        var minMagnitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        try {\n          var mockData = {\n            features: [{\n              properties: {\n                mag: 3.8,\n                eventid: '12352',\n                location: 'ANKARA MERKEZ (ANKARA)',\n                date: new Date(startDate).toISOString(),\n                latitude: 39.9334,\n                longitude: 32.8597,\n                depth: 10.2\n              }\n            }, {\n              properties: {\n                mag: 2.9,\n                eventid: '12353',\n                location: 'İZMİR MERKEZ (İZMİR)',\n                date: new Date(endDate).toISOString(),\n                latitude: 38.4192,\n                longitude: 27.1287,\n                depth: 7.8\n              }\n            }]\n          };\n          return this.formatEarthquakeData(mockData.features.filter(function (f) {\n            return f.properties.mag >= minMagnitude;\n          }));\n        } catch (error) {\n          console.error('Mock data hatası:', error);\n          throw new Error('Tarih aralığındaki deprem verileri alınamadı');\n        }\n      });\n      function getEarthquakesByDateRange(_x, _x2) {\n        return _getEarthquakesByDateRange.apply(this, arguments);\n      }\n      return getEarthquakesByDateRange;\n    }())\n  }, {\n    key: \"getKandilliEarthquakes\",\n    value: (function () {\n      var _getKandilliEarthquakes = _asyncToGenerator(function* () {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n        try {\n          console.log('Kandilli Rasathanesi API\\'sinden veri çekiliyor...');\n          var response = yield axios.get(KANDILLI_API_URL, {\n            timeout: 10000,\n            headers: {\n              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n            }\n          });\n          if (response.data) {\n            var earthquakes = this.parseKandilliData(response.data, limit);\n            console.log('Kandilli API\\'sinden başarıyla veri alındı:', earthquakes.length, 'deprem');\n            return earthquakes;\n          }\n          throw new Error('Kandilli API\\'den veri alınamadı');\n        } catch (error) {\n          console.error('Kandilli API bağlantı hatası:', error.message);\n          throw error;\n        }\n      });\n      function getKandilliEarthquakes() {\n        return _getKandilliEarthquakes.apply(this, arguments);\n      }\n      return getKandilliEarthquakes;\n    }())\n  }, {\n    key: \"parseKandilliData\",\n    value: function parseKandilliData(htmlData) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n      try {\n        if (!htmlData || typeof htmlData !== 'string') {\n          console.log('Kandilli HTML verisi geçersiz');\n          return [];\n        }\n        var earthquakes = [];\n        var lines = htmlData.split('\\n');\n        var dataStarted = false;\n        for (var i = 0; i < lines.length && earthquakes.length < limit; i++) {\n          var line = lines[i].trim();\n          if (line.includes('Tarih      Saat      Enlem(N)  Boylam(E)')) {\n            dataStarted = true;\n            continue;\n          }\n          if (!dataStarted || line.length < 50) continue;\n          var match = line.match(/(\\d{4}\\.\\d{2}\\.\\d{2})\\s+(\\d{2}:\\d{2}:\\d{2})\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+(.+?)\\s+(\\w+)$/);\n          if (match) {\n            var _match = _slicedToArray(match, 11),\n              date = _match[1],\n              time = _match[2],\n              latitude = _match[3],\n              longitude = _match[4],\n              depth = _match[5],\n              md = _match[6],\n              ml = _match[7],\n              mw = _match[8],\n              location = _match[9],\n              quality = _match[10];\n            var magnitude = 0;\n            if (ml && ml !== '-.-' && parseFloat(ml) > 0) {\n              magnitude = parseFloat(ml);\n            } else if (mw && mw !== '-.-' && parseFloat(mw) > 0) {\n              magnitude = parseFloat(mw);\n            } else if (md && md !== '-.-' && parseFloat(md) > 0) {\n              magnitude = parseFloat(md);\n            }\n            if (magnitude > 0) {\n              var eventTime = new Date(`${date.replace(/\\./g, '-')}T${time}`);\n              earthquakes.push({\n                id: `kandilli_${date}_${time}_${latitude}_${longitude}`,\n                magnitude: magnitude,\n                location: location.trim(),\n                depth: parseFloat(depth) || 0,\n                time: eventTime,\n                coordinates: {\n                  latitude: parseFloat(latitude),\n                  longitude: parseFloat(longitude)\n                },\n                latitude: parseFloat(latitude),\n                longitude: parseFloat(longitude),\n                source: 'Kandilli Rasathanesi',\n                severity: this.calculateSeverity(magnitude),\n                distance: this.formatTimeAgo(eventTime),\n                region: location.trim(),\n                color: this.getSeverityColor(magnitude),\n                isAftershock: magnitude < 4.0,\n                type: magnitude < 4.0 ? 'Artçı Deprem' : 'Ana Deprem',\n                quality: quality,\n                formattedTime: eventTime.toLocaleString('tr-TR', {\n                  year: 'numeric',\n                  month: '2-digit',\n                  day: '2-digit',\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  second: '2-digit'\n                }),\n                formattedDate: eventTime.toLocaleDateString('tr-TR', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })\n              });\n            }\n          }\n        }\n        return earthquakes;\n      } catch (error) {\n        console.error('Kandilli veri parse hatası:', error);\n        return [];\n      }\n    }\n  }, {\n    key: \"getLatestEarthquakes\",\n    value: (function () {\n      var _getLatestEarthquakes = _asyncToGenerator(function* () {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n        var minMagnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        try {\n          var kandilliData = null;\n          try {\n            kandilliData = yield this.getKandilliEarthquakes(limit);\n          } catch (kandilliError) {\n            console.log('Kandilli API hatası:', kandilliError.message);\n          }\n          if (kandilliData && Array.isArray(kandilliData) && kandilliData.length > 0) {\n            var filteredData = kandilliData.filter(function (earthquake) {\n              return earthquake && earthquake.magnitude >= minMagnitude;\n            });\n            if (filteredData && filteredData.length > 0) {\n              console.log('Kandilli Rasathanesi verisi kullanılıyor:', filteredData.length, 'deprem');\n              return filteredData;\n            }\n          }\n          console.log('Kandilli verisi yetersiz, AFAD API\\'sine geçiliyor...');\n          var endDate = new Date();\n          var startDate = new Date(endDate.getTime() - 24 * 60 * 60 * 1000);\n          var result = yield this.getEarthquakesByDateRange(startDate, endDate, 0, limit, minMagnitude);\n          if (result && result.data && Array.isArray(result.data)) {\n            console.log('AFAD API verisi kullanılıyor:', result.data.length, 'deprem');\n            return result.data;\n          }\n          throw new Error('API verisi alınamadı');\n        } catch (error) {\n          console.error('Tüm API\\'ler başarısız:', error.message);\n          throw new Error('Veriler çekilemiyor. Lütfen internet bağlantınızı kontrol edin ve tekrar deneyin.');\n        }\n      });\n      function getLatestEarthquakes() {\n        return _getLatestEarthquakes.apply(this, arguments);\n      }\n      return getLatestEarthquakes;\n    }())\n  }, {\n    key: \"generateRealisticMockData\",\n    value: function generateRealisticMockData(limit, minMagnitude) {\n      var turkishCities = [{\n        name: 'İSTANBUL',\n        lat: 41.0082,\n        lon: 28.9784\n      }, {\n        name: 'ANKARA',\n        lat: 39.9334,\n        lon: 32.8597\n      }, {\n        name: 'İZMİR',\n        lat: 38.4192,\n        lon: 27.1287\n      }, {\n        name: 'BURSA',\n        lat: 40.1826,\n        lon: 29.0665\n      }, {\n        name: 'ANTALYA',\n        lat: 36.8969,\n        lon: 30.7133\n      }, {\n        name: 'ADANA',\n        lat: 37.0000,\n        lon: 35.3213\n      }, {\n        name: 'KONYA',\n        lat: 37.8667,\n        lon: 32.4833\n      }, {\n        name: 'GAZİANTEP',\n        lat: 37.0662,\n        lon: 37.3833\n      }, {\n        name: 'ŞANLIURFA',\n        lat: 37.1591,\n        lon: 38.7969\n      }, {\n        name: 'KAYSERİ',\n        lat: 38.7312,\n        lon: 35.4787\n      }, {\n        name: 'ESKİŞEHİR',\n        lat: 39.7767,\n        lon: 30.5206\n      }, {\n        name: 'DİYARBAKIR',\n        lat: 37.9144,\n        lon: 40.2306\n      }, {\n        name: 'SAMSUN',\n        lat: 41.2928,\n        lon: 36.3313\n      }, {\n        name: 'DENİZLİ',\n        lat: 37.7765,\n        lon: 29.0864\n      }, {\n        name: 'MALATYA',\n        lat: 38.3552,\n        lon: 38.3095\n      }, {\n        name: 'ERZURUM',\n        lat: 39.9334,\n        lon: 41.2769\n      }, {\n        name: 'VAN',\n        lat: 38.4891,\n        lon: 43.4089\n      }, {\n        name: 'ELAZIĞ',\n        lat: 38.6748,\n        lon: 39.2226\n      }, {\n        name: 'BINGÖL',\n        lat: 38.8845,\n        lon: 40.4957\n      }, {\n        name: 'MUŞ',\n        lat: 38.9462,\n        lon: 41.7539\n      }];\n      var mockData = [];\n      var now = new Date();\n      for (var i = 0; i < limit; i++) {\n        var city = turkishCities[Math.floor(Math.random() * turkishCities.length)];\n        var magnitude = Math.max(minMagnitude, Math.random() * 4 + 1.5);\n        var timeOffset = Math.random() * 24 * 60 * 60 * 1000;\n        var eventTime = new Date(now.getTime() - timeOffset);\n        var latVariation = (Math.random() - 0.5) * 0.5;\n        var lonVariation = (Math.random() - 0.5) * 0.5;\n        mockData.push({\n          properties: {\n            mag: parseFloat(magnitude.toFixed(1)),\n            eventid: `mock_${Date.now()}_${i}`,\n            location: `${city.name} MERKEZ (${city.name})`,\n            date: eventTime.toISOString(),\n            latitude: city.lat + latVariation,\n            longitude: city.lon + lonVariation,\n            depth: Math.random() * 20 + 2,\n            type: Math.random() > 0.8 ? 'aftershock' : 'earthquake'\n          }\n        });\n      }\n      return mockData.sort(function (a, b) {\n        return new Date(b.properties.date) - new Date(a.properties.date);\n      });\n    }\n  }, {\n    key: \"getEarthquakesByLocation\",\n    value: (function () {\n      var _getEarthquakesByLocation = _asyncToGenerator(function* (lat, lon) {\n        var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n        var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;\n        try {\n          var mockData = {\n            features: [{\n              properties: {\n                mag: 4.2,\n                eventid: '12350',\n                location: 'İSTANBUL MERKEZ (İSTANBUL)',\n                date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                latitude: lat + (Math.random() - 0.5) * 0.1,\n                longitude: lon + (Math.random() - 0.5) * 0.1,\n                depth: 8.5\n              }\n            }, {\n              properties: {\n                mag: 3.1,\n                eventid: '12351',\n                location: 'BÖLGE YAKIN (ŞEHIR)',\n                date: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                latitude: lat + (Math.random() - 0.5) * 0.2,\n                longitude: lon + (Math.random() - 0.5) * 0.2,\n                depth: 12.3\n              }\n            }]\n          };\n          return this.formatEarthquakeData(mockData.features.slice(0, limit));\n        } catch (error) {\n          console.error('Mock data hatası:', error);\n          throw new Error('Bölgesel deprem verileri alınamadı');\n        }\n      });\n      function getEarthquakesByLocation(_x3, _x4) {\n        return _getEarthquakesByLocation.apply(this, arguments);\n      }\n      return getEarthquakesByLocation;\n    }())\n  }, {\n    key: \"formatNewEarthquakeData\",\n    value: function formatNewEarthquakeData(rawData) {\n      var _this = this;\n      return rawData.map(function (event) {\n        var eventTime = new Date(event.EventDate);\n        var magnitude = parseFloat(event.Magnitude) || 0;\n        var isAftershock = event.EventType === 'aftershock' || magnitude < 4.0;\n        return {\n          id: event.EventID || Math.random().toString(36).substr(2, 9),\n          magnitude: magnitude,\n          location: event.LocationName || 'Bilinmeyen Konum',\n          depth: parseFloat(event.Depth) || 0,\n          time: eventTime,\n          coordinates: {\n            latitude: parseFloat(event.Latitude) || 0,\n            longitude: parseFloat(event.Longitude) || 0\n          },\n          latitude: parseFloat(event.Latitude) || 0,\n          longitude: parseFloat(event.Longitude) || 0,\n          source: 'AFAD',\n          severity: _this.calculateSeverity(magnitude),\n          distance: _this.formatTimeAgo(eventTime),\n          region: event.Province || event.District || 'Türkiye',\n          color: _this.getSeverityColor(magnitude),\n          isAftershock: isAftershock,\n          type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n          formattedTime: eventTime.toLocaleString('tr-TR', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }),\n          formattedDate: eventTime.toLocaleDateString('tr-TR', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        };\n      });\n    }\n  }, {\n    key: \"formatEarthquakeData\",\n    value: function formatEarthquakeData(rawData) {\n      var _this2 = this;\n      return rawData.map(function (earthquake) {\n        var properties = earthquake.properties;\n        var magnitude = parseFloat(properties.mag || properties.magnitude) || 0;\n        var eventTime = new Date(properties.date || properties.time || properties.eventtime);\n        var isAftershock = properties.type === 'aftershock';\n        return {\n          id: properties.eventid || properties.id || Math.random().toString(36).substr(2, 9),\n          magnitude: magnitude,\n          location: properties.location || properties.place || 'Bilinmeyen Konum',\n          depth: parseFloat(properties.depth) || 0,\n          time: eventTime,\n          coordinates: {\n            latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n            longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0)\n          },\n          latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n          longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0),\n          source: 'AFAD',\n          severity: _this2.calculateSeverity(magnitude),\n          distance: _this2.formatTimeAgo(eventTime),\n          region: properties.region || 'Türkiye',\n          color: _this2.getSeverityColor(magnitude),\n          isAftershock: isAftershock,\n          type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n          formattedTime: eventTime.toLocaleString('tr-TR', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }),\n          formattedDate: eventTime.toLocaleDateString('tr-TR', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        };\n      });\n    }\n  }, {\n    key: \"calculateSeverity\",\n    value: function calculateSeverity(magnitude) {\n      if (magnitude >= 7.0) return 'Çok Yüksek';\n      if (magnitude >= 6.0) return 'Yüksek';\n      if (magnitude >= 5.0) return 'Orta';\n      if (magnitude >= 4.0) return 'Düşük';\n      return 'Çok Düşük';\n    }\n  }, {\n    key: \"calculateDistance\",\n    value: function calculateDistance(lat1, lon1, lat2, lon2) {\n      var R = 6371;\n      var dLat = this.toRadians(lat2 - lat1);\n      var dLon = this.toRadians(lon2 - lon1);\n      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c;\n    }\n  }, {\n    key: \"toRadians\",\n    value: function toRadians(degrees) {\n      return degrees * (Math.PI / 180);\n    }\n  }, {\n    key: \"formatTimeAgo\",\n    value: function formatTimeAgo(date) {\n      var now = new Date();\n      var diffMs = now - date;\n      var diffMins = Math.floor(diffMs / 60000);\n      var diffHours = Math.floor(diffMins / 60);\n      var diffDays = Math.floor(diffHours / 24);\n      if (diffMins < 1) return 'Şimdi';\n      if (diffMins < 60) return `${diffMins} dk önce`;\n      if (diffHours < 24) return `${diffHours} sa önce`;\n      return `${diffDays} gün önce`;\n    }\n  }, {\n    key: \"getSeverityColor\",\n    value: function getSeverityColor(magnitude) {\n      if (magnitude >= 7.0) return '#FF3B30';\n      if (magnitude >= 6.0) return '#FF9500';\n      if (magnitude >= 5.0) return '#FFCC00';\n      if (magnitude >= 4.0) return '#34C759';\n      return '#007AFF';\n    }\n  }]);\n}();\nvar earthquakeService = new EarthquakeService();\nexport default earthquakeService;","map":{"version":3,"names":["axios","AFAD_API_BASE_URL","AFAD_EVENT_FILTER_URL","KANDILLI_API_URL","KANDILLI_JSON_URL","TADAS_AFAD_URL","EarthquakeService","_classCallCheck","apiClient","create","baseURL","timeout","headers","_createClass","key","value","formatDate","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","_getEarthquakesByDateRange","_asyncToGenerator","startDate","endDate","minMagnitude","arguments","length","undefined","mockData","features","properties","mag","eventid","location","Date","toISOString","latitude","longitude","depth","formatEarthquakeData","filter","f","error","console","Error","getEarthquakesByDateRange","_x","_x2","apply","_getKandilliEarthquakes","limit","log","response","get","data","earthquakes","parseKandilliData","message","getKandilliEarthquakes","htmlData","lines","split","dataStarted","i","line","trim","includes","match","_match","_slicedToArray","time","md","ml","mw","quality","magnitude","parseFloat","eventTime","replace","push","id","coordinates","source","severity","calculateSeverity","distance","formatTimeAgo","region","color","getSeverityColor","isAftershock","type","formattedTime","toLocaleString","year","month","day","hour","minute","second","formattedDate","toLocaleDateString","_getLatestEarthquakes","kandilliData","kandilliError","Array","isArray","filteredData","earthquake","getTime","result","getLatestEarthquakes","generateRealisticMockData","turkishCities","name","lat","lon","now","city","Math","floor","random","max","timeOffset","latVariation","lonVariation","toFixed","sort","a","b","_getEarthquakesByLocation","radius","slice","getEarthquakesByLocation","_x3","_x4","formatNewEarthquakeData","rawData","_this","map","event","EventDate","Magnitude","EventType","EventID","toString","substr","LocationName","Depth","Latitude","Longitude","Province","District","_this2","eventtime","place","geometry","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","toRadians","dLon","sin","cos","c","atan2","sqrt","degrees","PI","diffMs","diffMins","diffHours","diffDays","earthquakeService"],"sources":["C:/Users/Yusuf Ali Aşkın/Downloads/Desktop/proje_afetnet/src/services/earthquakeService.js"],"sourcesContent":["import axios from 'axios';\n\nconst AFAD_API_BASE_URL = 'https://deprem.afad.gov.tr';\nconst AFAD_EVENT_FILTER_URL = 'https://deprem.afad.gov.tr/EventData/GetEventsByFilter';\nconst KANDILLI_API_URL = 'http://www.koeri.boun.edu.tr/scripts/lst0.asp';\nconst KANDILLI_JSON_URL = 'http://www.koeri.boun.edu.tr/scripts/lasteq.asp';\nconst TADAS_AFAD_URL = 'https://tadas.afad.gov.tr/api/earthquakes';\n\nclass EarthquakeService {\n  constructor() {\n    this.apiClient = axios.create({\n      baseURL: AFAD_API_BASE_URL,\n      timeout: 15000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * AFAD API için tarih formatı: YYYY-MM-DD HH:mm:ss\n   */\n  formatDate(date) {\n    return date.getFullYear() + '-' + \n           String(date.getMonth() + 1).padStart(2, '0') + '-' + \n           String(date.getDate()).padStart(2, '0') + ' ' + \n           String(date.getHours()).padStart(2, '0') + ':' + \n           String(date.getMinutes()).padStart(2, '0') + ':' + \n           String(date.getSeconds()).padStart(2, '0');\n  }\n\n  /**\n   * Belirli tarih aralığındaki deprem verilerini getirir\n   * @param {Date} startDate - Başlangıç tarihi\n   * @param {Date} endDate - Bitiş tarihi\n   * @param {number} skip - Atlanacak kayıt sayısı (pagination için)\n   * @param {number} take - Alınacak kayıt sayısı\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByDateRange(startDate, endDate, skip = 0, take = 100, minMagnitude = 0) {\n    try {\n      const eventFilter = {\n        EventSearchFilterList: [\n          { FilterType: 8, Value: startDate.toISOString() },\n          { FilterType: 9, Value: endDate.toISOString() }\n        ],\n        Skip: skip,\n        Take: take,\n        SortDescriptor: { field: 'eventDate', dir: 'desc' }\n      };\n\n      const response = await axios.post(AFAD_EVENT_FILTER_URL, eventFilter, {\n        timeout: 15000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n      });\n\n      if (response.data && response.data.Data && Array.isArray(response.data.Data)) {\n        console.log('AFAD API\\'sinden başarıyla veri alındı:', response.data.Data.length, 'deprem');\n        \n        // Minimum büyüklük filtresi uygula\n        const filteredData = response.data.Data.filter(event => \n          parseFloat(event.Magnitude) >= minMagnitude\n        );\n        \n        return {\n          data: this.formatNewEarthquakeData(filteredData),\n          totalCount: response.data.TotalCount || filteredData.length,\n          hasMore: (skip + take) < (response.data.TotalCount || 0)\n        };\n      }\n      \n      throw new Error('API\\'den veri alınamadı');\n    } catch (error) {\n      console.error('AFAD API bağlantı hatası:', error.message);\n      throw new Error('Veriler çekilemiyor. Lütfen internet bağlantınızı kontrol edin ve tekrar deneyin.');\n    }\n  }\n\n  /**\n   * Kandilli Rasathanesi'nden deprem verilerini çeker\n   * @param {number} limit - Getirilecek deprem sayısı\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getKandilliEarthquakes(limit = 50) {\n    try {\n      console.log('Kandilli Rasathanesi API\\'sinden veri çekiliyor...');\n      \n      // Kandilli API'sinden HTML formatında veri çek\n      const response = await axios.get(KANDILLI_API_URL, {\n        timeout: 10000,\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n      });\n\n      if (response.data) {\n        const earthquakes = this.parseKandilliData(response.data, limit);\n        console.log('Kandilli API\\'sinden başarıyla veri alındı:', earthquakes.length, 'deprem');\n        return earthquakes;\n      }\n      \n      throw new Error('Kandilli API\\'den veri alınamadı');\n    } catch (error) {\n      console.error('Kandilli API bağlantı hatası:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Kandilli HTML verisini parse eder\n   * @param {string} htmlData - HTML formatındaki veri\n   * @param {number} limit - Maksimum deprem sayısı\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  parseKandilliData(htmlData, limit = 50) {\n    try {\n      if (!htmlData || typeof htmlData !== 'string') {\n        console.log('Kandilli HTML verisi geçersiz');\n        return [];\n      }\n      \n      const earthquakes = [];\n      const lines = htmlData.split('\\n');\n      let dataStarted = false;\n      \n      for (let i = 0; i < lines.length && earthquakes.length < limit; i++) {\n        const line = lines[i].trim();\n        \n        // Veri başlangıcını bul\n        if (line.includes('Tarih      Saat      Enlem(N)  Boylam(E)')) {\n          dataStarted = true;\n          continue;\n        }\n        \n        if (!dataStarted || line.length < 50) continue;\n        \n        // Veri satırını parse et\n        const match = line.match(/(\\d{4}\\.\\d{2}\\.\\d{2})\\s+(\\d{2}:\\d{2}:\\d{2})\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+(.+?)\\s+(\\w+)$/);\n        \n        if (match) {\n          const [, date, time, latitude, longitude, depth, md, ml, mw, location, quality] = match;\n          \n          // Büyüklük değerini belirle (ML > MW > MD önceliği)\n          let magnitude = 0;\n          if (ml && ml !== '-.-' && parseFloat(ml) > 0) {\n            magnitude = parseFloat(ml);\n          } else if (mw && mw !== '-.-' && parseFloat(mw) > 0) {\n            magnitude = parseFloat(mw);\n          } else if (md && md !== '-.-' && parseFloat(md) > 0) {\n            magnitude = parseFloat(md);\n          }\n          \n          if (magnitude > 0) {\n            const eventTime = new Date(`${date.replace(/\\./g, '-')}T${time}`);\n            \n            earthquakes.push({\n              id: `kandilli_${date}_${time}_${latitude}_${longitude}`,\n              magnitude: magnitude,\n              location: location.trim(),\n              depth: parseFloat(depth) || 0,\n              time: eventTime,\n              coordinates: {\n                latitude: parseFloat(latitude),\n                longitude: parseFloat(longitude)\n              },\n              latitude: parseFloat(latitude),\n              longitude: parseFloat(longitude),\n              source: 'Kandilli Rasathanesi',\n              severity: this.calculateSeverity(magnitude),\n              distance: this.formatTimeAgo(eventTime),\n              region: location.trim(),\n              color: this.getSeverityColor(magnitude),\n              isAftershock: magnitude < 4.0,\n              type: magnitude < 4.0 ? 'Artçı Deprem' : 'Ana Deprem',\n              quality: quality,\n              formattedTime: eventTime.toLocaleString('tr-TR', {\n                year: 'numeric',\n                month: '2-digit',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n              }),\n              formattedDate: eventTime.toLocaleDateString('tr-TR', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n              })\n            });\n          }\n        }\n      }\n      \n      return earthquakes;\n    } catch (error) {\n      console.error('Kandilli veri parse hatası:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Son deprem verilerini getirir (Kandilli öncelikli, AFAD fallback)\n   * @param {number} limit - Getirilecek deprem sayısı (varsayılan: 50)\n   * @param {number} minMagnitude - Minimum büyüklük (varsayılan: 0)\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getLatestEarthquakes(limit = 50, minMagnitude = 0) {\n    try {\n      // Önce Kandilli Rasathanesi'nden dene\n      let kandilliData = null;\n      try {\n        kandilliData = await this.getKandilliEarthquakes(limit);\n      } catch (kandilliError) {\n        console.log('Kandilli API hatası:', kandilliError.message);\n      }\n      \n      if (kandilliData && Array.isArray(kandilliData) && kandilliData.length > 0) {\n        // Minimum büyüklük filtresi uygula\n        const filteredData = kandilliData.filter(earthquake => \n          earthquake && earthquake.magnitude >= minMagnitude\n        );\n        \n        if (filteredData && filteredData.length > 0) {\n          console.log('Kandilli Rasathanesi verisi kullanılıyor:', filteredData.length, 'deprem');\n          return filteredData;\n        }\n      }\n      \n      console.log('Kandilli verisi yetersiz, AFAD API\\'sine geçiliyor...');\n      \n      // Kandilli başarısız olursa AFAD API'sini kullan\n      const endDate = new Date();\n      const startDate = new Date(endDate.getTime() - (24 * 60 * 60 * 1000)); // 1 gün öncesi\n      \n      const result = await this.getEarthquakesByDateRange(startDate, endDate, 0, limit, minMagnitude);\n      if (result && result.data && Array.isArray(result.data)) {\n        console.log('AFAD API verisi kullanılıyor:', result.data.length, 'deprem');\n        return result.data;\n      }\n      \n      throw new Error('API verisi alınamadı');\n      \n    } catch (error) {\n      console.error('Tüm API\\'ler başarısız:', error.message);\n      \n      // Gerçek API hatası durumunda hata fırlat\n      throw new Error('Veriler çekilemiyor. Lütfen internet bağlantınızı kontrol edin ve tekrar deneyin.');\n    }\n  }\n\n  /**\n   * Gerçekçi mock deprem verileri üretir\n   * @param {number} limit - Üretilecek deprem sayısı\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Array} Mock deprem verileri\n   */\n  generateRealisticMockData(limit, minMagnitude) {\n    const turkishCities = [\n      { name: 'İSTANBUL', lat: 41.0082, lon: 28.9784 },\n      { name: 'ANKARA', lat: 39.9334, lon: 32.8597 },\n      { name: 'İZMİR', lat: 38.4192, lon: 27.1287 },\n      { name: 'BURSA', lat: 40.1826, lon: 29.0665 },\n      { name: 'ANTALYA', lat: 36.8969, lon: 30.7133 },\n      { name: 'ADANA', lat: 37.0000, lon: 35.3213 },\n      { name: 'KONYA', lat: 37.8667, lon: 32.4833 },\n      { name: 'GAZİANTEP', lat: 37.0662, lon: 37.3833 },\n      { name: 'ŞANLIURFA', lat: 37.1591, lon: 38.7969 },\n      { name: 'KAYSERİ', lat: 38.7312, lon: 35.4787 },\n      { name: 'ESKİŞEHİR', lat: 39.7767, lon: 30.5206 },\n      { name: 'DİYARBAKIR', lat: 37.9144, lon: 40.2306 },\n      { name: 'SAMSUN', lat: 41.2928, lon: 36.3313 },\n      { name: 'DENİZLİ', lat: 37.7765, lon: 29.0864 },\n      { name: 'MALATYA', lat: 38.3552, lon: 38.3095 },\n      { name: 'ERZURUM', lat: 39.9334, lon: 41.2769 },\n      { name: 'VAN', lat: 38.4891, lon: 43.4089 },\n      { name: 'ELAZIĞ', lat: 38.6748, lon: 39.2226 },\n      { name: 'BINGÖL', lat: 38.8845, lon: 40.4957 },\n      { name: 'MUŞ', lat: 38.9462, lon: 41.7539 }\n    ];\n\n    const mockData = [];\n    const now = new Date();\n\n    for (let i = 0; i < limit; i++) {\n      const city = turkishCities[Math.floor(Math.random() * turkishCities.length)];\n      const magnitude = Math.max(minMagnitude, (Math.random() * 4 + 1.5)); // 1.5-5.5 arası\n      const timeOffset = Math.random() * 24 * 60 * 60 * 1000; // Son 24 saat içinde\n      const eventTime = new Date(now.getTime() - timeOffset);\n      \n      // Koordinatlara küçük varyasyon ekle\n      const latVariation = (Math.random() - 0.5) * 0.5;\n      const lonVariation = (Math.random() - 0.5) * 0.5;\n\n      mockData.push({\n        properties: {\n          mag: parseFloat(magnitude.toFixed(1)),\n          eventid: `mock_${Date.now()}_${i}`,\n          location: `${city.name} MERKEZ (${city.name})`,\n          date: eventTime.toISOString(),\n          latitude: city.lat + latVariation,\n          longitude: city.lon + lonVariation,\n          depth: Math.random() * 20 + 2, // 2-22 km arası derinlik\n          type: Math.random() > 0.8 ? 'aftershock' : 'earthquake' // %20 artçı deprem\n        }\n      });\n    }\n\n    return mockData.sort((a, b) => new Date(b.properties.date) - new Date(a.properties.date));\n  }\n\n  /**\n   * Belirli bir bölgedeki depremleri getirir\n   * @param {number} lat - Enlem\n   * @param {number} lon - Boylam\n   * @param {number} radius - Yarıçap (km)\n   * @param {number} limit - Getirilecek deprem sayısı\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByLocation(lat, lon, radius = 100, limit = 20) {\n    try {\n      // Geçici mock data - API bağlantı sorunu nedeniyle\n      const mockData = {\n        features: [\n          {\n            properties: {\n              mag: 4.2,\n              eventid: '12350',\n              location: 'İSTANBUL MERKEZ (İSTANBUL)',\n              date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n              latitude: lat + (Math.random() - 0.5) * 0.1,\n              longitude: lon + (Math.random() - 0.5) * 0.1,\n              depth: 8.5\n            }\n          },\n          {\n            properties: {\n              mag: 3.1,\n              eventid: '12351',\n              location: 'BÖLGE YAKIN (ŞEHIR)',\n              date: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n              latitude: lat + (Math.random() - 0.5) * 0.2,\n              longitude: lon + (Math.random() - 0.5) * 0.2,\n              depth: 12.3\n            }\n          }\n        ]\n      };\n\n      return this.formatEarthquakeData(mockData.features.slice(0, limit));\n    } catch (error) {\n      console.error('Mock data hatası:', error);\n      throw new Error('Bölgesel deprem verileri alınamadı');\n    }\n  }\n\n  /**\n   * Belirli bir tarih aralığındaki depremleri getirir\n   * @param {string} startDate - Başlangıç tarihi (YYYY-MM-DD)\n   * @param {string} endDate - Bitiş tarihi (YYYY-MM-DD)\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByDateRange(startDate, endDate, minMagnitude = 0) {\n    try {\n      // Geçici mock data - API bağlantı sorunu nedeniyle\n      const mockData = {\n        features: [\n          {\n            properties: {\n              mag: 3.8,\n              eventid: '12352',\n              location: 'ANKARA MERKEZ (ANKARA)',\n              date: new Date(startDate).toISOString(),\n              latitude: 39.9334,\n              longitude: 32.8597,\n              depth: 10.2\n            }\n          },\n          {\n            properties: {\n              mag: 2.9,\n              eventid: '12353',\n              location: 'İZMİR MERKEZ (İZMİR)',\n              date: new Date(endDate).toISOString(),\n              latitude: 38.4192,\n              longitude: 27.1287,\n              depth: 7.8\n            }\n          }\n        ]\n      };\n\n      return this.formatEarthquakeData(mockData.features.filter(f => f.properties.mag >= minMagnitude));\n    } catch (error) {\n      console.error('Mock data hatası:', error);\n      throw new Error('Tarih aralığındaki deprem verileri alınamadı');\n    }\n  }\n\n  /**\n   * Yeni AFAD API formatındaki deprem verilerini formatlar\n   * @param {Array} rawData - Ham deprem verileri\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  formatNewEarthquakeData(rawData) {\n    return rawData.map(event => {\n      const eventTime = new Date(event.EventDate);\n      const magnitude = parseFloat(event.Magnitude) || 0;\n      const isAftershock = event.EventType === 'aftershock' || magnitude < 4.0;\n      \n      return {\n        id: event.EventID || Math.random().toString(36).substr(2, 9),\n        magnitude: magnitude,\n        location: event.LocationName || 'Bilinmeyen Konum',\n        depth: parseFloat(event.Depth) || 0,\n        time: eventTime,\n        coordinates: {\n          latitude: parseFloat(event.Latitude) || 0,\n          longitude: parseFloat(event.Longitude) || 0\n        },\n        latitude: parseFloat(event.Latitude) || 0,\n        longitude: parseFloat(event.Longitude) || 0,\n        source: 'AFAD',\n        severity: this.calculateSeverity(magnitude),\n        distance: this.formatTimeAgo(eventTime),\n        region: event.Province || event.District || 'Türkiye',\n        color: this.getSeverityColor(magnitude),\n        isAftershock: isAftershock,\n        type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n        formattedTime: eventTime.toLocaleString('tr-TR', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        }),\n        formattedDate: eventTime.toLocaleDateString('tr-TR', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      };\n    });\n  }\n\n  /**\n   * Eski API formatındaki deprem verilerini formatlar (fallback için)\n   * @param {Array} rawData - Ham deprem verileri\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  formatEarthquakeData(rawData) {\n    return rawData.map(earthquake => {\n      const properties = earthquake.properties;\n      \n      const magnitude = parseFloat(properties.mag || properties.magnitude) || 0;\n      const eventTime = new Date(properties.date || properties.time || properties.eventtime);\n      const isAftershock = properties.type === 'aftershock';\n      \n      return {\n        id: properties.eventid || properties.id || Math.random().toString(36).substr(2, 9),\n        magnitude: magnitude,\n        location: properties.location || properties.place || 'Bilinmeyen Konum',\n        depth: parseFloat(properties.depth) || 0,\n        time: eventTime,\n        coordinates: {\n          latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n          longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0)\n        },\n        latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n        longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0),\n        source: 'AFAD',\n        severity: this.calculateSeverity(magnitude),\n        distance: this.formatTimeAgo(eventTime),\n        region: properties.region || 'Türkiye',\n        color: this.getSeverityColor(magnitude),\n        isAftershock: isAftershock,\n        type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n        formattedTime: eventTime.toLocaleString('tr-TR', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        }),\n        formattedDate: eventTime.toLocaleDateString('tr-TR', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      };\n    });\n  }\n\n  /**\n   * Deprem büyüklüğüne göre şiddet seviyesi hesaplar\n   * @param {number} magnitude - Deprem büyüklüğü\n   * @returns {string} Şiddet seviyesi\n   */\n  calculateSeverity(magnitude) {\n    if (magnitude >= 7.0) return 'Çok Yüksek';\n    if (magnitude >= 6.0) return 'Yüksek';\n    if (magnitude >= 5.0) return 'Orta';\n    if (magnitude >= 4.0) return 'Düşük';\n    return 'Çok Düşük';\n  }\n\n  /**\n   * İki koordinat arasındaki mesafeyi hesaplar (km)\n   * @param {number} lat1 - İlk nokta enlemi\n   * @param {number} lon1 - İlk nokta boylamı\n   * @param {number} lat2 - İkinci nokta enlemi\n   * @param {number} lon2 - İkinci nokta boylamı\n   * @returns {number} Mesafe (km)\n   */\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Dünya'nın yarıçapı (km)\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * Dereceyi radyana çevirir\n   * @param {number} degrees - Derece değeri\n   * @returns {number} Radian değeri\n   */\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  /**\n   * Zamanı \"X dakika/saat/gün önce\" formatında döndürür\n   * @param {Date} date - Deprem zamanı\n   * @returns {string} Formatlanmış zaman\n   */\n  formatTimeAgo(date) {\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMins < 1) return 'Şimdi';\n    if (diffMins < 60) return `${diffMins} dk önce`;\n    if (diffHours < 24) return `${diffHours} sa önce`;\n    return `${diffDays} gün önce`;\n  }\n\n  /**\n   * Deprem büyüklüğüne göre renk döndürür\n   * @param {number} magnitude - Deprem büyüklüğü\n   * @returns {string} Renk kodu\n   */\n  getSeverityColor(magnitude) {\n    if (magnitude >= 7.0) return '#FF3B30'; // Kırmızı - Çok Yüksek\n    if (magnitude >= 6.0) return '#FF9500'; // Turuncu - Yüksek\n    if (magnitude >= 5.0) return '#FFCC00'; // Sarı - Orta\n    if (magnitude >= 4.0) return '#34C759'; // Yeşil - Düşük\n    return '#007AFF'; // Mavi - Çok Düşük\n  }\n}\n\n// Singleton instance\nconst earthquakeService = new EarthquakeService();\nexport default earthquakeService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}