{"ast":null,"code":"\"use strict\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from \"../handlers/PanGestureHandler\";\nimport { TapGestureHandler } from \"../handlers/TapGestureHandler\";\nimport { State } from \"../State\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nvar DrawerLayout = function (_Component) {\n  function DrawerLayout(_props) {\n    var _this;\n    _classCallCheck(this, DrawerLayout);\n    _this = _callSuper(this, DrawerLayout, [_props]);\n    _this.accessibilityIsModalView = React.createRef();\n    _this.pointerEventsView = React.createRef();\n    _this.panGestureHandler = React.createRef();\n    _this.drawerShown = false;\n    _this.updateAnimatedEvent = function (props, state) {\n      var drawerPosition = props.drawerPosition,\n        drawerWidth = props.drawerWidth,\n        drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n        touchXValue = state.touchX,\n        drawerTranslation = state.drawerTranslation,\n        containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n      _this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          _this.props.onDrawerSlide == null ? void 0 : _this.props.onDrawerSlide(position);\n        };\n      }\n      _this.onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    };\n    _this.handleContainerLayout = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    _this.emitStateChanged = function (newState, drawerWillShow) {\n      _this.props.onDrawerStateChanged == null ? void 0 : _this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n    _this.openingHandlerStateChange = function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n        _this.setState({\n          drawerState: DRAGGING\n        });\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        if (_this.props.hideStatusBar) {\n          StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    _this.onTapHandlerStateChange = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      if (_this.drawerShown && nativeEvent.oldState === State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    };\n    _this.handleRelease = function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props = _this.props,\n        drawerWidth = _this$props.drawerWidth,\n        drawerPosition = _this$props.drawerPosition,\n        drawerType = _this$props.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n        velocityX = nativeEvent.velocityX,\n        touchX = nativeEvent.x;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    _this.updateShowing = function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) == null ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) == null ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props2 = _this.props,\n        drawerPosition = _this$props2.drawerPosition,\n        minSwipeDistance = _this$props2.minSwipeDistance,\n        edgeWidth = _this$props2.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      (_this$panGestureHandl = _this.panGestureHandler.current) == null ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    _this.animateDrawer = function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      _this.updateShowing(willShow);\n      _this.emitStateChanged(SETTLING, willShow);\n      _this.setState({\n        drawerState: SETTLING\n      });\n      if (_this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n      Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed != null ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n          _this.setState({\n            drawerOpened: willShow\n          });\n          if (_this.state.drawerState !== DRAGGING) {\n            _this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            _this.props.onDrawerOpen == null ? void 0 : _this.props.onDrawerOpen();\n          } else {\n            _this.props.onDrawerClose == null ? void 0 : _this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n    _this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n      _this.forceUpdate();\n    };\n    _this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n      _this.forceUpdate();\n    };\n    _this.renderOverlay = function () {\n      invariant(_this.openValue, 'should be set');\n      var overlayOpacity;\n      if (_this.state.drawerState !== IDLE) {\n        overlayOpacity = _this.openValue;\n      } else {\n        overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n      }\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return _jsx(TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange,\n        children: _jsx(Animated.View, {\n          pointerEvents: _this.drawerShown ? 'auto' : 'none',\n          ref: _this.pointerEventsView,\n          style: [styles.overlay, dynamicOverlayStyles]\n        })\n      });\n    };\n    _this.renderDrawer = function () {\n      var _this$props3 = _this.props,\n        drawerBackgroundColor = _this$props3.drawerBackgroundColor,\n        drawerWidth = _this$props3.drawerWidth,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        drawerContainerStyle = _this$props3.drawerContainerStyle,\n        contentContainerStyle = _this$props3.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (_this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return _jsxs(Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout,\n        children: [_jsxs(Animated.View, {\n          style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n          importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes',\n          children: [typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()]\n        }), _jsx(Animated.View, {\n          pointerEvents: \"box-none\",\n          ref: _this.accessibilityIsModalView,\n          accessibilityViewIsModal: _this.drawerShown,\n          style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n          children: _jsx(View, {\n            style: dynamicDrawerStyles,\n            children: _this.props.renderNavigationView(_this.openValue)\n          })\n        })]\n      });\n    };\n    _this.setPanGestureRef = function (ref) {\n      _this.panGestureHandler.current = ref;\n      _this.props.onGestureRef == null ? void 0 : _this.props.onGestureRef(ref);\n    };\n    var _dragX = new Animated.Value(0);\n    var _touchX = new Animated.Value(0);\n    var _drawerTranslation = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    return _this;\n  }\n  _inherits(DrawerLayout, _Component);\n  return _createClass(DrawerLayout, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerLockMode = _this$props4.drawerLockMode,\n        edgeWidth = _this$props4.edgeWidth,\n        minSwipeDistance = _this$props4.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return _jsx(PanGestureHandler, {\n        userSelect: this.props.userSelect,\n        activeCursor: this.props.activeCursor,\n        mouseButton: this.props.mouseButton,\n        enableContextMenu: this.props.enableContextMenu,\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n        children: this.renderDrawer()\n      });\n    }\n  }]);\n}(Component);\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nexport { DrawerLayout as default };\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","jsx","_jsx","jsxs","_jsxs","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","_Component","props","_this","_classCallCheck","_callSuper","accessibilityIsModalView","createRef","pointerEventsView","panGestureHandler","drawerShown","updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","handleContainerLayout","_ref","setState","layout","width","emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","openingHandlerStateChange","_ref2","oldState","ACTIVE","handleRelease","drawerState","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","onTapHandlerStateChange","_ref3","drawerLockMode","closeDrawer","_ref4","_this$props","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","updateShowing","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","current","setNativeProps","accessibilityViewIsModal","pointerEvents","_this$props2","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","spring","bounciness","start","_ref5","finished","drawerOpened","onDrawerOpen","onDrawerClose","openDrawer","options","arguments","length","forceUpdate","renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","onHandlerStateChange","children","ref","style","styles","overlay","renderDrawer","_this$props3","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","containerOnBack","containerInFront","importantForAccessibility","drawerContainer","renderNavigationView","setPanGestureRef","onGestureRef","_inherits","_createClass","key","value","shouldComponentUpdate","render","_this$props4","userSelect","activeCursor","mouseButton","enableContextMenu","failOffsetY","enableTrackpadTwoFingerGesture","enabled","defaultProps","positions","Left","Right","default","create","_objectSpread","absoluteFillObject","zIndex","flex","overflow"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\components\\DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n  ActiveCursor,\n  MouseButton,\n} from '../handlers/gestureHandlerCommon';\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport type {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerPosition = 'left' | 'right';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerType = 'front' | 'back' | 'slide';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // Implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n\n  /**\n   * @default 'auto'\n   * Defines which cursor property should be used when gesture activates.\n   * Values: see CSS cursor values\n   */\n  activeCursor?: ActiveCursor;\n\n  /**\n   * @default 'MouseButton.LEFT'\n   * Allows to choose which mouse button should underlying pan handler react to.\n   */\n  mouseButton?: MouseButton;\n\n  /**\n   * @default 'false if MouseButton.RIGHT is specified'\n   * Allows to enable/disable context menu.\n   */\n  enableContextMenu?: boolean;\n}\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\n\n/**\n * @deprecated use Reanimated version of DrawerLayout instead\n */\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView =\n    React.createRef<React.ComponentRef<typeof View>>();\n  private pointerEventsView =\n    React.createRef<React.ComponentRef<typeof View>>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // It's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // We rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        activeCursor={this.props.activeCursor}\n        mouseButton={this.props.mouseButton}\n        enableContextMenu={this.props.enableContextMenu}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}