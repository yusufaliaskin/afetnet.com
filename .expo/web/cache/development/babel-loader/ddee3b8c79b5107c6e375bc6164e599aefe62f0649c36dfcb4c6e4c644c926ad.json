{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { ContinousBaseGesture } from \"./gesture\";\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force\n    };\n  }\n  return _objectSpread(_objectSpread({}, current), changePayload);\n}\nexport var ForceTouchGesture = function (_ContinousBaseGesture) {\n  function ForceTouchGesture() {\n    var _this;\n    _classCallCheck(this, ForceTouchGesture);\n    _this = _callSuper(this, ForceTouchGesture);\n    _this.config = {};\n    _this.handlerName = 'ForceTouchGestureHandler';\n    return _this;\n  }\n  _inherits(ForceTouchGesture, _ContinousBaseGesture);\n  return _createClass(ForceTouchGesture, [{\n    key: \"minForce\",\n    value: function minForce(force) {\n      this.config.minForce = force;\n      return this;\n    }\n  }, {\n    key: \"maxForce\",\n    value: function maxForce(force) {\n      this.config.maxForce = force;\n      return this;\n    }\n  }, {\n    key: \"feedbackOnActivation\",\n    value: function feedbackOnActivation(value) {\n      this.config.feedbackOnActivation = value;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return _superPropGet(ForceTouchGesture, \"onChange\", this, 3)([callback]);\n    }\n  }]);\n}(ContinousBaseGesture);","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","forceChange","force","_objectSpread","ForceTouchGesture","_ContinousBaseGesture","_this","_classCallCheck","_callSuper","config","handlerName","_inherits","_createClass","key","value","minForce","maxForce","feedbackOnActivation","onChange","callback","handlers","_superPropGet"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\forceTouchGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { ForceTouchGestureConfig } from '../ForceTouchGestureHandler';\nimport type { ForceTouchGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\n/**\n * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n */\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\n/**\n * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n */\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  /**\n   * A minimal pressure that is required before gesture can activate.\n   * Should be a value from range [0.0, 1.0]. Default is 0.2.\n   * @param force\n   */\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  /**\n   * A maximal pressure that could be applied for gesture.\n   * If the pressure is greater, gesture fails. Should be a value from range [0.0, 1.0].\n   * @param force\n   */\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  /**\n   * Value defining if haptic feedback has to be performed on activation.\n   * @param value\n   */\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\n/**\n * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n */\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"],"mappings":";;;;;;;;;;;;;;AAAA,SAA4BA,oBAAoB;AAYhD,SAASC,qBAAqBA,CAC5BC,OAAiE,EACjEC,QAAmE,EACnE;EACA,SAAS;;EACT,IAAIC,aAAkD;EACtD,IAAID,QAAQ,KAAKE,SAAS,EAAE;IAC1BD,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK;IACvB,CAAC;EACH,CAAC,MAAM;IACLH,aAAa,GAAG;MACdE,WAAW,EAAEJ,OAAO,CAACK,KAAK,GAAGJ,QAAQ,CAACI;IACxC,CAAC;EACH;EAEA,OAAAC,aAAA,CAAAA,aAAA,KAAYN,OAAO,GAAKE,aAAA;AAC1B;AAKA,WAAaK,iBAAiB,aAAAC,qBAAA;EAM5B,SAAAD,kBAAA,EAAc;IAAA,IAAAE,KAAA;IAAAC,eAAA,OAAAH,iBAAA;IACZE,KAAA,GAAAE,UAAA,OAAAJ,iBAAA;IAAOE,KAAA,CAHFG,MAAM,GAAgD,CAAC,CAAC;IAK7DH,KAAA,CAAKI,WAAW,GAAG,0BAA0B;IAAA,OAAAJ,KAAA;EAC/C;EAAAK,SAAA,CAAAP,iBAAA,EAAAC,qBAAA;EAAA,OAAAO,YAAA,CAAAR,iBAAA;IAAAS,GAAA;IAAAC,KAAA,EAOA,SAAAC,QAAQA,CAACb,KAAa,EAAE;MACtB,IAAI,CAACO,MAAM,CAACM,QAAQ,GAAGb,KAAK;MAC5B,OAAO,IAAI;IACb;EAAA;IAAAW,GAAA;IAAAC,KAAA,EAOA,SAAAE,QAAQA,CAACd,KAAa,EAAE;MACtB,IAAI,CAACO,MAAM,CAACO,QAAQ,GAAGd,KAAK;MAC5B,OAAO,IAAI;IACb;EAAA;IAAAW,GAAA;IAAAC,KAAA,EAMA,SAAAG,oBAAoBA,CAACH,KAAc,EAAE;MACnC,IAAI,CAACL,MAAM,CAACQ,oBAAoB,GAAGH,KAAK;MACxC,OAAO,IAAI;IACb;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAEA,SAAAI,QAAQA,CACNC,QAOS,EACT;MAEA,IAAI,CAACC,QAAQ,CAACxB,qBAAqB,GAAGA,qBAAqB;MAC3D,OAAAyB,aAAA,CAAAjB,iBAAA,wBAAsBe,QAAQ;IAChC;EAAA;AAAA,EAtDqCxB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}