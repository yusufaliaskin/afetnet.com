{"ast":null,"code":"\"use strict\";\n\nimport { registerHandler } from \"../../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../../RNGestureHandlerModule\";\nimport { filterConfig, scheduleFlushOperations } from \"../../utils\";\nimport { ActionType } from \"../../../ActionType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { ghQueueMicrotask } from \"../../../ghQueueMicrotask\";\nimport { extractGestureRelations, checkGestureCallbacksForWorklets, ALLOWED_PROPS } from \"./utils\";\nimport { MountRegistry } from \"../../../mountRegistry\";\nexport function attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesturesToAttach = _ref.gesturesToAttach,\n    viewTag = _ref.viewTag,\n    webEventHandlersRef = _ref.webEventHandlersRef;\n  gestureConfig.initialize();\n  ghQueueMicrotask(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n  for (var handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n  ghQueueMicrotask(function () {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (var _handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, extractGestureRelations(_handler)));\n    }\n    scheduleFlushOperations();\n  });\n  for (var gesture of gesturesToAttach) {\n    var actionType = gesture.shouldUseReanimated ? ActionType.REANIMATED_WORKLET : ActionType.JS_FUNCTION_NEW_API;\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(gesture.handlerTag, viewTag, actionType);\n    }\n    MountRegistry.gestureWillMount(gesture);\n  }\n  preparedGesture.attachedGestures = gesturesToAttach;\n  if (preparedGesture.animatedHandlers) {\n    var isAnimatedGesture = function isAnimatedGesture(g) {\n      return g.shouldUseReanimated;\n    };\n    preparedGesture.animatedHandlers.value = gesturesToAttach.filter(isAnimatedGesture).map(function (g) {\n      return g.handlers;\n    });\n  }\n}","map":{"version":3,"names":["registerHandler","RNGestureHandlerModule","filterConfig","scheduleFlushOperations","ActionType","Platform","ghQueueMicrotask","extractGestureRelations","checkGestureCallbacksForWorklets","ALLOWED_PROPS","MountRegistry","attachHandlers","_ref","preparedGesture","gestureConfig","gesturesToAttach","viewTag","webEventHandlersRef","initialize","isMounted","prepare","handler","createGestureHandler","handlerName","handlerTag","config","testId","updateGestureHandler","gesture","actionType","shouldUseReanimated","REANIMATED_WORKLET","JS_FUNCTION_NEW_API","OS","attachGestureHandler","JS_FUNCTION_OLD_API","gestureWillMount","attachedGestures","animatedHandlers","isAnimatedGesture","g","value","filter","map","handlers"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\GestureDetector\\attachHandlers.ts"],"sourcesContent":["import React from 'react';\nimport { GestureType, HandlerCallbacks } from '../gesture';\nimport { registerHandler } from '../../handlersRegistry';\nimport RNGestureHandlerModule from '../../../RNGestureHandlerModule';\nimport { filterConfig, scheduleFlushOperations } from '../../utils';\nimport { ComposedGesture } from '../gestureComposition';\nimport { ActionType } from '../../../ActionType';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../../RNGestureHandlerModule.web';\nimport { ghQueueMicrotask } from '../../../ghQueueMicrotask';\nimport { AttachedGestureState, WebEventHandler } from './types';\nimport {\n  extractGestureRelations,\n  checkGestureCallbacksForWorklets,\n  ALLOWED_PROPS,\n} from './utils';\nimport { MountRegistry } from '../../../mountRegistry';\n\ninterface AttachHandlersConfig {\n  preparedGesture: AttachedGestureState;\n  gestureConfig: ComposedGesture | GestureType;\n  gesturesToAttach: GestureType[];\n  viewTag: number;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nexport function attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesturesToAttach,\n  viewTag,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  gestureConfig.initialize();\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    gestureConfig.prepare();\n  });\n\n  for (const handler of gesturesToAttach) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n  }\n\n  // Use queueMicrotask to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  ghQueueMicrotask(() => {\n    if (!preparedGesture.isMounted) {\n      return;\n    }\n    for (const handler of gesturesToAttach) {\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(\n          handler.config,\n          ALLOWED_PROPS,\n          extractGestureRelations(handler)\n        )\n      );\n    }\n\n    scheduleFlushOperations();\n  });\n\n  for (const gesture of gesturesToAttach) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    if (Platform.OS === 'web') {\n      (\n        RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler\n      )(\n        gesture.handlerTag,\n        viewTag,\n        ActionType.JS_FUNCTION_OLD_API, // Ignored on web\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        actionType\n      );\n    }\n\n    MountRegistry.gestureWillMount(gesture);\n  }\n\n  preparedGesture.attachedGestures = gesturesToAttach;\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = gesturesToAttach\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n"],"mappings":";;AAEA,SAASA,eAAe;AACxB,OAAOC,sBAAsB;AAC7B,SAASC,YAAY,EAAEC,uBAAuB;AAE9C,SAASC,UAAU;AAA6B,OAAAC,QAAA;AAGhD,SAASC,gBAAgB;AAEzB,SACEC,uBAAuB,EACvBC,gCAAgC,EAChCC,aAAa;AAEf,SAASC,aAAa;AAUtB,OAAO,SAASC,cAAcA,CAAAC,IAAA,EAML;EAAA,IALvBC,eAAe,GAAAD,IAAA,CAAfC,eAAe;IACfC,aAAa,GAAAF,IAAA,CAAbE,aAAa;IACbC,gBAAgB,GAAAH,IAAA,CAAhBG,gBAAgB;IAChBC,OAAO,GAAAJ,IAAA,CAAPI,OAAO;IACPC,mBAAA,GAAAL,IAAA,CAAAK,mBAAA;EAEAH,aAAa,CAACI,UAAU,CAAC,CAAC;EAI1BZ,gBAAgB,CAAC,YAAM;IACrB,IAAI,CAACO,eAAe,CAACM,SAAS,EAAE;MAC9B;IACF;IACAL,aAAa,CAACM,OAAO,CAAC,CAAC;EACzB,CAAC,CAAC;EAEF,KAAK,IAAMC,OAAO,IAAIN,gBAAgB,EAAE;IACtCP,gCAAgC,CAACa,OAAO,CAAC;IACzCpB,sBAAsB,CAACqB,oBAAoB,CACzCD,OAAO,CAACE,WAAW,EACnBF,OAAO,CAACG,UAAU,EAClBtB,YAAY,CAACmB,OAAO,CAACI,MAAM,EAAEhB,aAAa,CAC5C,CAAC;IAEDT,eAAe,CAACqB,OAAO,CAACG,UAAU,EAAEH,OAAO,EAAEA,OAAO,CAACI,MAAM,CAACC,MAAM,CAAC;EACrE;EAIApB,gBAAgB,CAAC,YAAM;IACrB,IAAI,CAACO,eAAe,CAACM,SAAS,EAAE;MAC9B;IACF;IACA,KAAK,IAAME,QAAO,IAAIN,gBAAgB,EAAE;MACtCd,sBAAsB,CAAC0B,oBAAoB,CACzCN,QAAO,CAACG,UAAU,EAClBtB,YAAY,CACVmB,QAAO,CAACI,MAAM,EACdhB,aAAa,EACbF,uBAAuB,CAACc,QAAO,CACjC,CACF,CAAC;IACH;IAEAlB,uBAAuB,CAAC,CAAC;EAC3B,CAAC,CAAC;EAEF,KAAK,IAAMyB,OAAO,IAAIb,gBAAgB,EAAE;IACtC,IAAMc,UAAU,GAAGD,OAAO,CAACE,mBAAmB,GAC1C1B,UAAU,CAAC2B,kBAAkB,GAC7B3B,UAAU,CAAC4B,mBAAmB;IAElC,IAAI3B,QAAQ,CAAC4B,EAAE,KAAK,KAAK,EAAE;MAEvBhC,sBAAsB,CAACiC,oBAAoB,CAE3CN,OAAO,CAACJ,UAAU,EAClBR,OAAO,EACPZ,UAAU,CAAC+B,mBAAmB,EAC9BlB,mBACF,CAAC;IACH,CAAC,MAAM;MACLhB,sBAAsB,CAACiC,oBAAoB,CACzCN,OAAO,CAACJ,UAAU,EAClBR,OAAO,EACPa,UACF,CAAC;IACH;IAEAnB,aAAa,CAAC0B,gBAAgB,CAACR,OAAO,CAAC;EACzC;EAEAf,eAAe,CAACwB,gBAAgB,GAAGtB,gBAAgB;EAEnD,IAAIF,eAAe,CAACyB,gBAAgB,EAAE;IACpC,IAAMC,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIC,CAAc;MAAA,OAAKA,CAAC,CAACV,mBAAmB;IAAA;IAEnEjB,eAAe,CAACyB,gBAAgB,CAACG,KAAK,GAAG1B,gBAAgB,CACtD2B,MAAM,CAACH,iBAAiB,CAAC,CACzBI,GAAG,CAAE,UAAAH,CAAC;MAAA,OAAKA,CAAC,CAACI,QAAQ;IAAA,EAErB;EACL;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}