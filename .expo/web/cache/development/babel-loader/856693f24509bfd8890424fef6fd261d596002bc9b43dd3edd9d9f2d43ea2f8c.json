{"ast":null,"code":"\"use strict\";\n\nvar _Reanimated;\nimport { tagMessage } from \"../../utils\";\nvar Reanimated;\ntry {\n  Reanimated = require('react-native-reanimated');\n} catch (e) {\n  Reanimated = undefined;\n}\nif (!((_Reanimated = Reanimated) != null && _Reanimated.useSharedValue)) {\n  Reanimated = undefined;\n}\nif (Reanimated !== undefined && !Reanimated.setGestureState) {\n  Reanimated.setGestureState = function () {\n    'worklet';\n\n    console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));\n  };\n}\nexport { Reanimated };","map":{"version":3,"names":["tagMessage","Reanimated","require","e","undefined","_Reanimated","useSharedValue","setGestureState","console","warn"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\reanimatedWrapper.ts"],"sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { tagMessage } from '../../utils';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated:\n  | {\n      default: {\n        // Slightly modified definition copied from 'react-native-reanimated'\n        createAnimatedComponent<P extends object>(\n          component: ComponentClass<P>,\n          options?: unknown\n        ): ComponentClass<P>;\n      };\n      useEvent: (\n        callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n        events: string[],\n        rebuild: boolean\n      ) => unknown;\n      useSharedValue: <T>(value: T) => SharedValue<T>;\n      setGestureState: (handlerTag: number, newState: number) => void;\n    }\n  | undefined;\n\ntry {\n  Reanimated = require('react-native-reanimated');\n} catch (e) {\n  // When 'react-native-reanimated' is not available we want to quietly continue\n  // @ts-ignore TS demands the variable to be initialized\n  Reanimated = undefined;\n}\n\nif (!Reanimated?.useSharedValue) {\n  // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n  // reset the module to undefined so we can fallback to the default implementation\n  Reanimated = undefined;\n}\n\nif (Reanimated !== undefined && !Reanimated.setGestureState) {\n  // The loaded module is Reanimated but it doesn't have the setGestureState defined\n  Reanimated.setGestureState = () => {\n    'worklet';\n    console.warn(\n      tagMessage(\n        'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n      )\n    );\n  };\n}\n\nexport { Reanimated };\n"],"mappings":";;;AAKA,SAASA,UAAU;AAMnB,IAAIC,UAiBS;AAEb,IAAI;EACFA,UAAU,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACjD,CAAC,CAAC,OAAOC,CAAC,EAAE;EAGVF,UAAU,GAAGG,SAAS;AACxB;AAEA,IAAI,GAAAC,WAAA,GAACJ,UAAU,aAAVI,WAAA,CAAYC,cAAc,GAAE;EAG/BL,UAAU,GAAGG,SAAS;AACxB;AAEA,IAAIH,UAAU,KAAKG,SAAS,IAAI,CAACH,UAAU,CAACM,eAAe,EAAE;EAE3DN,UAAU,CAACM,eAAe,GAAG,YAAM;IACjC,SAAS;;IACTC,OAAO,CAACC,IAAI,CACVT,UAAU,CACR,gGACF,CACF,CAAC;EACH,CAAC;AACH;AAEA,SAASC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}