{"ast":null,"code":"\"use strict\";\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport VelocityTracker from \"./VelocityTracker\";\nvar MAX_POINTERS = 20;\nvar PointerTracker = function () {\n  function PointerTracker() {\n    _classCallCheck(this, PointerTracker);\n    this.velocityTracker = new VelocityTracker();\n    this._trackedPointers = new Map();\n    this.touchEventsIds = new Map();\n    this.cachedAbsoluteAverages = {\n      x: 0,\n      y: 0\n    };\n    this.cachedRelativeAverages = {\n      x: 0,\n      y: 0\n    };\n    this.lastMovedPointerId = NaN;\n    for (var i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  return _createClass(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      var newElement = {\n        abosoluteCoords: {\n          x: event.x,\n          y: event.y\n        },\n        relativeCoords: {\n          x: event.offsetX,\n          y: event.offsetY\n        },\n        timestamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n      this.mapTouchEventId(event.pointerId);\n      this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n      this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n      this.removeMappedTouchId(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var pointerData = this.trackedPointers.get(event.pointerId);\n      if (!pointerData) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      this.velocityTracker.add(event);\n      var _this$velocityTracker = _slicedToArray(this.velocityTracker.velocity, 2),\n        velocityX = _this$velocityTracker[0],\n        velocityY = _this$velocityTracker[1];\n      pointerData.velocityX = velocityX;\n      pointerData.velocityY = velocityY;\n      pointerData.abosoluteCoords = {\n        x: event.x,\n        y: event.y\n      };\n      pointerData.relativeCoords = {\n        x: event.offsetX,\n        y: event.offsetY\n      };\n      this.trackedPointers.set(event.pointerId, pointerData);\n      this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n      this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n    }\n  }, {\n    key: \"mapTouchEventId\",\n    value: function mapTouchEventId(id) {\n      for (var _ref of this.touchEventsIds) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        var mappedId = _ref2[0];\n        var touchId = _ref2[1];\n        if (isNaN(touchId)) {\n          this.touchEventsIds.set(mappedId, id);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"removeMappedTouchId\",\n    value: function removeMappedTouchId(id) {\n      var mappedId = this.getMappedTouchEventId(id);\n      if (!isNaN(mappedId)) {\n        this.touchEventsIds.set(mappedId, NaN);\n      }\n    }\n  }, {\n    key: \"getMappedTouchEventId\",\n    value: function getMappedTouchEventId(touchEventId) {\n      for (var _ref3 of this.touchEventsIds.entries()) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n        var key = _ref4[0];\n        var value = _ref4[1];\n        if (value === touchEventId) {\n          return key;\n        }\n      }\n      return NaN;\n    }\n  }, {\n    key: \"getVelocity\",\n    value: function getVelocity(pointerId) {\n      var pointerData = this.trackedPointers.get(pointerId);\n      return pointerData ? {\n        x: pointerData.velocityX,\n        y: pointerData.velocityY\n      } : null;\n    }\n  }, {\n    key: \"getLastAbsoluteCoords\",\n    value: function getLastAbsoluteCoords(pointerId) {\n      var _this$trackedPointers;\n      return (_this$trackedPointers = this.trackedPointers.get(pointerId != null ? pointerId : this.lastMovedPointerId)) == null ? void 0 : _this$trackedPointers.abosoluteCoords;\n    }\n  }, {\n    key: \"getLastRelativeCoords\",\n    value: function getLastRelativeCoords(pointerId) {\n      var _this$trackedPointers2;\n      return (_this$trackedPointers2 = this.trackedPointers.get(pointerId != null ? pointerId : this.lastMovedPointerId)) == null ? void 0 : _this$trackedPointers2.relativeCoords;\n    }\n  }, {\n    key: \"getAbsoluteCoordsAverage\",\n    value: function getAbsoluteCoordsAverage() {\n      var coordsSum = this.getAbsoluteCoordsSum();\n      var avgX = coordsSum.x / this.trackedPointers.size;\n      var avgY = coordsSum.y / this.trackedPointers.size;\n      var averages = {\n        x: isNaN(avgX) ? this.cachedAbsoluteAverages.x : avgX,\n        y: isNaN(avgY) ? this.cachedAbsoluteAverages.y : avgY\n      };\n      return averages;\n    }\n  }, {\n    key: \"getRelativeCoordsAverage\",\n    value: function getRelativeCoordsAverage() {\n      var coordsSum = this.getRelativeCoordsSum();\n      var avgX = coordsSum.x / this.trackedPointers.size;\n      var avgY = coordsSum.y / this.trackedPointers.size;\n      var averages = {\n        x: isNaN(avgX) ? this.cachedRelativeAverages.x : avgX,\n        y: isNaN(avgY) ? this.cachedRelativeAverages.y : avgY\n      };\n      return averages;\n    }\n  }, {\n    key: \"getAbsoluteCoordsSum\",\n    value: function getAbsoluteCoordsSum(ignoredPointer) {\n      var sum = {\n        x: 0,\n        y: 0\n      };\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sum.x += value.abosoluteCoords.x;\n          sum.y += value.abosoluteCoords.y;\n        }\n      });\n      return sum;\n    }\n  }, {\n    key: \"getRelativeCoordsSum\",\n    value: function getRelativeCoordsSum(ignoredPointer) {\n      var sum = {\n        x: 0,\n        y: 0\n      };\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sum.x += value.relativeCoords.x;\n          sum.y += value.relativeCoords.y;\n        }\n      });\n      return sum;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.velocityTracker.reset();\n      this.trackedPointers.clear();\n      this.lastMovedPointerId = NaN;\n      for (var i = 0; i < MAX_POINTERS; ++i) {\n        this.touchEventsIds.set(i, NaN);\n      }\n    }\n  }, {\n    key: \"trackedPointersCount\",\n    get: function get() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"trackedPointersIDs\",\n    get: function get() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"trackedPointers\",\n    get: function get() {\n      return this._trackedPointers;\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n}();\nexport { PointerTracker as default };","map":{"version":3,"names":["VelocityTracker","MAX_POINTERS","PointerTracker","_classCallCheck","velocityTracker","_trackedPointers","Map","touchEventsIds","cachedAbsoluteAverages","x","y","cachedRelativeAverages","lastMovedPointerId","NaN","i","set","_createClass","key","value","addToTracker","event","trackedPointers","has","pointerId","newElement","abosoluteCoords","relativeCoords","offsetX","offsetY","timestamp","time","velocityX","velocityY","mapTouchEventId","getAbsoluteCoordsAverage","getRelativeCoordsAverage","removeFromTracker","delete","removeMappedTouchId","track","pointerData","get","add","_this$velocityTracker","_slicedToArray","velocity","id","_ref","_ref2","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","_ref3","entries","_ref4","getVelocity","getLastAbsoluteCoords","_this$trackedPointers","getLastRelativeCoords","_this$trackedPointers2","coordsSum","getAbsoluteCoordsSum","avgX","size","avgY","averages","getRelativeCoordsSum","ignoredPointer","sum","forEach","resetTracker","reset","clear","keys","_value","push","shareCommonPointers","stPointers","ndPointers","some","includes","default"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\PointerTracker.ts"],"sourcesContent":["import { AdaptedEvent, Point } from '../interfaces';\nimport VelocityTracker from './VelocityTracker';\n\nexport interface TrackerElement {\n  abosoluteCoords: Point;\n  relativeCoords: Point;\n  timestamp: number;\n  velocityX: number;\n  velocityY: number;\n}\n\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private velocityTracker = new VelocityTracker();\n  private readonly _trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAbsoluteAverages: Point = { x: 0, y: 0 };\n  private cachedRelativeAverages: Point = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      abosoluteCoords: { x: event.x, y: event.y },\n      relativeCoords: { x: event.offsetX, y: event.offsetY },\n      timestamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const pointerData = this.trackedPointers.get(event.pointerId);\n\n    if (!pointerData) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.velocity;\n\n    pointerData.velocityX = velocityX;\n    pointerData.velocityY = velocityY;\n\n    pointerData.abosoluteCoords = { x: event.x, y: event.y };\n    pointerData.relativeCoords = { x: event.offsetX, y: event.offsetY };\n\n    this.trackedPointers.set(event.pointerId, pointerData);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  // Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocity(pointerId: number) {\n    const pointerData = this.trackedPointers.get(pointerId);\n\n    return pointerData\n      ? {\n          x: pointerData.velocityX,\n          y: pointerData.velocityY,\n        }\n      : null;\n  }\n\n  public getLastAbsoluteCoords(pointerId?: number) {\n    return this.trackedPointers.get(pointerId ?? this.lastMovedPointerId)\n      ?.abosoluteCoords;\n  }\n\n  public getLastRelativeCoords(pointerId?: number) {\n    return this.trackedPointers.get(pointerId ?? this.lastMovedPointerId)\n      ?.relativeCoords;\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n\n  public getAbsoluteCoordsAverage() {\n    const coordsSum = this.getAbsoluteCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedAbsoluteAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedAbsoluteAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getRelativeCoordsAverage() {\n    const coordsSum = this.getRelativeCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedRelativeAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedRelativeAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getAbsoluteCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.abosoluteCoords.x;\n        sum.y += value.abosoluteCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public getRelativeCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.relativeCoords.x;\n        sum.y += value.relativeCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public resetTracker(): void {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n\n  public get trackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n\n  public get trackedPointersIDs() {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public get trackedPointers() {\n    return this._trackedPointers;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}