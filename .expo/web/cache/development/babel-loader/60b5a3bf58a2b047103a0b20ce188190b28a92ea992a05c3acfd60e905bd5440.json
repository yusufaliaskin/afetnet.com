{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Ionicons } from '@expo/vector-icons';\nimport { StatusBar } from 'expo-status-bar';\nimport { ThemeProvider } from \"./src/contexts/ThemeContext\";\nimport { LanguageProvider } from \"./src/contexts/LanguageContext\";\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport RasathaneScreen from \"./src/screens/RasathaneScreen\";\nimport MapScreen from \"./src/screens/MapScreen\";\nimport ProfileScreen from \"./src/screens/ProfileScreen\";\nimport SettingsScreen from \"./src/screens/SettingsScreen\";\nimport EmergencyScreen from \"./src/screens/EmergencyScreen\";\nimport SplashScreen from \"./src/screens/SplashScreen\";\nimport { useTheme } from \"./src/contexts/ThemeContext\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Tab = createBottomTabNavigator();\nvar Stack = createStackNavigator();\nfunction TabNavigator() {\n  var _useTheme = useTheme(),\n    theme = _useTheme.theme;\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n            color = _ref2.color,\n            size = _ref2.size;\n          var iconName;\n          if (route.name === 'Ana Sayfa') {\n            iconName = focused ? 'home' : 'home-outline';\n          } else if (route.name === 'Rasathane') {\n            iconName = focused ? 'radio' : 'radio-outline';\n          } else if (route.name === 'Harita') {\n            iconName = focused ? 'map' : 'map-outline';\n          } else if (route.name === 'Profil') {\n            iconName = focused ? 'person' : 'person-outline';\n          } else if (route.name === 'Ayarlar') {\n            iconName = focused ? 'settings' : 'settings-outline';\n          }\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        },\n        tabBarActiveTintColor: '#FF6B35',\n        tabBarInactiveTintColor: theme.colors.secondaryText,\n        tabBarStyle: {\n          backgroundColor: theme.colors.cardBackground,\n          borderTopWidth: 1,\n          borderTopColor: theme.colors.border,\n          height: 60,\n          paddingBottom: 8,\n          paddingTop: 8\n        },\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '500'\n        },\n        headerShown: false\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Ana Sayfa\",\n      component: HomeScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Rasathane\",\n      component: RasathaneScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Harita\",\n      component: MapScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Profil\",\n      component: ProfileScreen\n    }), _jsx(Tab.Screen, {\n      name: \"Ayarlar\",\n      component: SettingsScreen\n    })]\n  });\n}\nfunction AppNavigator() {\n  var _useTheme2 = useTheme(),\n    isDarkMode = _useTheme2.isDarkMode;\n  return _jsxs(NavigationContainer, {\n    children: [_jsx(StatusBar, {\n      style: isDarkMode ? \"light\" : \"dark\"\n    }), _jsxs(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: [_jsx(Stack.Screen, {\n        name: \"Main\",\n        component: TabNavigator\n      }), _jsx(Stack.Screen, {\n        name: \"Emergency\",\n        component: EmergencyScreen\n      })]\n    })]\n  });\n}\nexport default function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    showSplash = _useState2[0],\n    setShowSplash = _useState2[1];\n  var handleSplashFinish = function handleSplashFinish() {\n    setShowSplash(false);\n  };\n  return _jsx(ThemeProvider, {\n    children: _jsx(LanguageProvider, {\n      children: showSplash ? _jsx(SplashScreen, {\n        onFinish: handleSplashFinish\n      }) : _jsx(AppNavigator, {})\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","NavigationContainer","createBottomTabNavigator","createStackNavigator","Ionicons","StatusBar","ThemeProvider","LanguageProvider","HomeScreen","RasathaneScreen","MapScreen","ProfileScreen","SettingsScreen","EmergencyScreen","SplashScreen","useTheme","jsx","_jsx","jsxs","_jsxs","Tab","Stack","TabNavigator","_useTheme","theme","Navigator","screenOptions","_ref","route","tabBarIcon","_ref2","focused","color","size","iconName","name","tabBarActiveTintColor","tabBarInactiveTintColor","colors","secondaryText","tabBarStyle","backgroundColor","cardBackground","borderTopWidth","borderTopColor","border","height","paddingBottom","paddingTop","tabBarLabelStyle","fontSize","fontWeight","headerShown","children","Screen","component","AppNavigator","_useTheme2","isDarkMode","style","App","_useState","_useState2","_slicedToArray","showSplash","setShowSplash","handleSplashFinish","onFinish"],"sources":["C:/Users/Yusuf Ali Aşkın/Downloads/Desktop/proje_afetnet/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Ionicons } from '@expo/vector-icons';\nimport { StatusBar } from 'expo-status-bar';\n\nimport { ThemeProvider } from './src/contexts/ThemeContext';\nimport { LanguageProvider } from './src/contexts/LanguageContext';\nimport HomeScreen from './src/screens/HomeScreen';\nimport RasathaneScreen from './src/screens/RasathaneScreen';\nimport MapScreen from './src/screens/MapScreen';\nimport ProfileScreen from './src/screens/ProfileScreen';\nimport SettingsScreen from './src/screens/SettingsScreen';\nimport EmergencyScreen from './src/screens/EmergencyScreen';\nimport SplashScreen from './src/screens/SplashScreen';\n\nimport { useTheme } from './src/contexts/ThemeContext';\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator();\n\nfunction TabNavigator() {\n  const { theme } = useTheme();\n\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName;\n\n          if (route.name === 'Ana Sayfa') {\n            iconName = focused ? 'home' : 'home-outline';\n          } else if (route.name === 'Rasathane') {\n            iconName = focused ? 'radio' : 'radio-outline';\n          } else if (route.name === 'Harita') {\n            iconName = focused ? 'map' : 'map-outline';\n          } else if (route.name === 'Profil') {\n            iconName = focused ? 'person' : 'person-outline';\n          } else if (route.name === 'Ayarlar') {\n            iconName = focused ? 'settings' : 'settings-outline';\n          }\n\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n        tabBarActiveTintColor: '#FF6B35',\n        tabBarInactiveTintColor: theme.colors.secondaryText,\n        tabBarStyle: {\n          backgroundColor: theme.colors.cardBackground,\n          borderTopWidth: 1,\n          borderTopColor: theme.colors.border,\n          height: 60,\n          paddingBottom: 8,\n          paddingTop: 8,\n        },\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '500',\n        },\n        headerShown: false,\n      })}\n    >\n      <Tab.Screen name=\"Ana Sayfa\" component={HomeScreen} />\n      <Tab.Screen name=\"Rasathane\" component={RasathaneScreen} />\n      <Tab.Screen name=\"Harita\" component={MapScreen} />\n      <Tab.Screen name=\"Profil\" component={ProfileScreen} />\n      <Tab.Screen name=\"Ayarlar\" component={SettingsScreen} />\n    </Tab.Navigator>\n  );\n}\n\nfunction AppNavigator() {\n  const { isDarkMode } = useTheme();\n\n  return (\n    <NavigationContainer>\n      <StatusBar style={isDarkMode ? \"light\" : \"dark\"} />\n      <Stack.Navigator\n        screenOptions={{\n          headerShown: false,\n        }}\n      >\n        <Stack.Screen name=\"Main\" component={TabNavigator} />\n        <Stack.Screen name=\"Emergency\" component={EmergencyScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nexport default function App() {\n  const [showSplash, setShowSplash] = useState(true);\n\n  const handleSplashFinish = () => {\n    setShowSplash(false);\n  };\n\n  return (\n    <ThemeProvider>\n      <LanguageProvider>\n        {showSplash ? (\n          <SplashScreen onFinish={handleSplashFinish} />\n        ) : (\n          <AppNavigator />\n        )}\n      </LanguageProvider>\n    </ThemeProvider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}