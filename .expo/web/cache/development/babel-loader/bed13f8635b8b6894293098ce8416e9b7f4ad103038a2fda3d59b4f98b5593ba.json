{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport React from 'react';\nimport { tagMessage } from \"../utils\";\nimport PlatformConstants from \"../PlatformConstants\";\nimport createHandler from \"./createHandler\";\nimport { baseGestureHandlerProps } from \"./gestureHandlerCommon\";\nexport var forceTouchGestureHandlerProps = ['minForce', 'maxForce', 'feedbackOnActivation'];\nvar ForceTouchFallback = function (_React$Component) {\n  function ForceTouchFallback() {\n    _classCallCheck(this, ForceTouchFallback);\n    return _callSuper(this, ForceTouchFallback, arguments);\n  }\n  _inherits(ForceTouchFallback, _React$Component);\n  return _createClass(ForceTouchFallback, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.warn(tagMessage('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n}(React.Component);\nForceTouchFallback.forceTouchAvailable = false;\nexport var forceTouchHandlerName = 'ForceTouchGestureHandler';\nexport var ForceTouchGestureHandler = PlatformConstants != null && PlatformConstants.forceTouchAvailable ? createHandler({\n  name: forceTouchHandlerName,\n  allowedProps: [].concat(_toConsumableArray(baseGestureHandlerProps), forceTouchGestureHandlerProps),\n  config: {}\n}) : ForceTouchFallback;\nForceTouchGestureHandler.forceTouchAvailable = (PlatformConstants == null ? void 0 : PlatformConstants.forceTouchAvailable) || false;","map":{"version":3,"names":["React","tagMessage","PlatformConstants","createHandler","baseGestureHandlerProps","forceTouchGestureHandlerProps","ForceTouchFallback","_React$Component","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","componentDidMount","console","warn","render","props","children","Component","forceTouchAvailable","forceTouchHandlerName","ForceTouchGestureHandler","name","allowedProps","concat","_toConsumableArray","config"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\ForceTouchGestureHandler.ts"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { tagMessage } from '../utils';\nimport PlatformConstants from '../PlatformConstants';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\nimport type { ForceTouchGestureHandlerEventPayload } from './GestureHandlerEventPayload';\n\nexport const forceTouchGestureHandlerProps = [\n  'minForce',\n  'maxForce',\n  'feedbackOnActivation',\n] as const;\n\n// implicit `children` prop has been removed in @types/react^18.0.0\nclass ForceTouchFallback extends React.Component<PropsWithChildren<unknown>> {\n  static forceTouchAvailable = false;\n  componentDidMount() {\n    console.warn(\n      tagMessage(\n        'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\n      )\n    );\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nexport interface ForceTouchGestureConfig {\n  /**\n   *\n   * A minimal pressure that is required before handler can activate. Should be a\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\n   */\n  minForce?: number;\n\n  /**\n   * A maximal pressure that could be applied for handler. If the pressure is\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\n   */\n  maxForce?: number;\n\n  /**\n   * Boolean value defining if haptic feedback has to be performed on\n   * activation.\n   */\n  feedbackOnActivation?: boolean;\n}\n\n/**\n * @deprecated ForceTouchGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.ForceTouch()` instead.\n */\nexport interface ForceTouchGestureHandlerProps\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\n    ForceTouchGestureConfig {}\n\n/**\n * @deprecated ForceTouchGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.ForceTouch()` instead.\n */\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\n  forceTouchAvailable: boolean;\n};\n\nexport const forceTouchHandlerName = 'ForceTouchGestureHandler';\n\n/**\n * @deprecated ForceTouchGestureHandler will be removed in the future version of Gesture Handler. Use `Gesture.ForceTouch()` instead.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\n  ? createHandler<\n      ForceTouchGestureHandlerProps,\n      ForceTouchGestureHandlerEventPayload\n    >({\n      name: forceTouchHandlerName,\n      allowedProps: [\n        ...baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps,\n      ] as const,\n      config: {},\n    })\n  : ForceTouchFallback;\n\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\n  PlatformConstants?.forceTouchAvailable || false;\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAK,MAA6B,OAAO;AAChD,SAASC,UAAU;AACnB,OAAOC,iBAAiB;AACxB,OAAOC,aAAa;AACpB,SAEEC,uBAAuB;AAIzB,OAAO,IAAMC,6BAA6B,GAAG,CAC3C,UAAU,EACV,UAAU,EACV,sBAAsB,CACd;AAAA,IAGJC,kBAAkB,aAAAC,gBAAA;EAAA,SAAAD,mBAAA;IAAAE,eAAA,OAAAF,kBAAA;IAAA,OAAAG,UAAA,OAAAH,kBAAA,EAAAI,SAAA;EAAA;EAAAC,SAAA,CAAAL,kBAAA,EAAAC,gBAAA;EAAA,OAAAK,YAAA,CAAAN,kBAAA;IAAAO,GAAA;IAAAC,KAAA,EAEtB,SAAAC,iBAAiBA,CAAA,EAAG;MAClBC,OAAO,CAACC,IAAI,CACVhB,UAAU,CACR,8NACF,CACF,CAAC;IACH;EAAA;IAAAY,GAAA;IAAAC,KAAA,EACA,SAAAI,MAAMA,CAAA,EAAG;MACP,OAAO,IAAI,CAACC,KAAK,CAACC,QAAQ;IAC5B;EAAA;AAAA,EAX+BpB,KAAK,CAACqB,SAAS;AAA1Cf,kBAAkB,CACfgB,mBAAmB,GAAG,KAAK;AAgDpC,OAAO,IAAMC,qBAAqB,GAAG,0BAA0B;AAM/D,OAAO,IAAMC,wBAAwB,GAAGtB,iBAAiB,YAAjBA,iBAAiB,CAAEoB,mBAAmB,GAC1EnB,aAAa,CAGX;EACAsB,IAAI,EAAEF,qBAAqB;EAC3BG,YAAY,KAAAC,MAAA,CAAAC,kBAAA,CACPxB,uBAAuB,GACvBC,6BAA6B,CACxB;EACVwB,MAAM,EAAE,CAAC;AACX,CAAC,CAAC,GACFvB,kBAAkB;AAErBkB,wBAAwB,CAA8BF,mBAAmB,GACxE,CAAApB,iBAAiB,oBAAjBA,iBAAiB,CAAEoB,mBAAmB,KAAI,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}