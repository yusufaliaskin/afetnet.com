{"ast":null,"code":"\"use strict\";\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { getNextHandlerTag } from \"../getNextHandlerTag\";\nimport { isRemoteDebuggingEnabled } from \"../../utils\";\nexport var CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10\n};\nexport var Gesture = _createClass(function Gesture() {\n  _classCallCheck(this, Gesture);\n});\nvar nextGestureId = 0;\nexport var BaseGesture = function (_Gesture) {\n  function BaseGesture() {\n    var _this;\n    _classCallCheck(this, BaseGesture);\n    _this = _callSuper(this, BaseGesture);\n    _this.gestureId = -1;\n    _this.handlerTag = -1;\n    _this.handlerName = '';\n    _this.config = {};\n    _this.handlers = {\n      gestureId: -1,\n      handlerTag: -1,\n      isWorklet: []\n    };\n    _this.gestureId = nextGestureId++;\n    _this.handlers.gestureId = _this.gestureId;\n    return _this;\n  }\n  _inherits(BaseGesture, _Gesture);\n  return _createClass(BaseGesture, [{\n    key: \"addDependency\",\n    value: function addDependency(key, gesture) {\n      var value = this.config[key];\n      this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n    }\n  }, {\n    key: \"withRef\",\n    value: function withRef(ref) {\n      this.config.ref = ref;\n      return this;\n    }\n  }, {\n    key: \"isWorklet\",\n    value: function isWorklet(callback) {\n      return callback.__workletHash !== undefined;\n    }\n  }, {\n    key: \"onBegin\",\n    value: function onBegin(callback) {\n      this.handlers.onBegin = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(callback) {\n      this.handlers.onStart = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(callback) {\n      this.handlers.onEnd = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onFinalize\",\n    value: function onFinalize(callback) {\n      this.handlers.onFinalize = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesDown\",\n    value: function onTouchesDown(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesDown = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesMove\",\n    value: function onTouchesMove(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesMove = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesUp\",\n    value: function onTouchesUp(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesUp = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onTouchesCancelled\",\n    value: function onTouchesCancelled(callback) {\n      this.config.needsPointerData = true;\n      this.handlers.onTouchesCancelled = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"enabled\",\n    value: function enabled(_enabled) {\n      this.config.enabled = _enabled;\n      return this;\n    }\n  }, {\n    key: \"shouldCancelWhenOutside\",\n    value: function shouldCancelWhenOutside(value) {\n      this.config.shouldCancelWhenOutside = value;\n      return this;\n    }\n  }, {\n    key: \"hitSlop\",\n    value: function hitSlop(_hitSlop) {\n      this.config.hitSlop = _hitSlop;\n      return this;\n    }\n  }, {\n    key: \"activeCursor\",\n    value: function activeCursor(_activeCursor) {\n      this.config.activeCursor = _activeCursor;\n      return this;\n    }\n  }, {\n    key: \"mouseButton\",\n    value: function mouseButton(_mouseButton) {\n      this.config.mouseButton = _mouseButton;\n      return this;\n    }\n  }, {\n    key: \"runOnJS\",\n    value: function runOnJS(_runOnJS) {\n      this.config.runOnJS = _runOnJS;\n      return this;\n    }\n  }, {\n    key: \"simultaneousWithExternalGesture\",\n    value: function simultaneousWithExternalGesture() {\n      for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n        gestures[_key] = arguments[_key];\n      }\n      for (var gesture of gestures) {\n        this.addDependency('simultaneousWith', gesture);\n      }\n      return this;\n    }\n  }, {\n    key: \"requireExternalGestureToFail\",\n    value: function requireExternalGestureToFail() {\n      for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        gestures[_key2] = arguments[_key2];\n      }\n      for (var gesture of gestures) {\n        this.addDependency('requireToFail', gesture);\n      }\n      return this;\n    }\n  }, {\n    key: \"blocksExternalGesture\",\n    value: function blocksExternalGesture() {\n      for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        gestures[_key3] = arguments[_key3];\n      }\n      for (var gesture of gestures) {\n        this.addDependency('blocksHandlers', gesture);\n      }\n      return this;\n    }\n  }, {\n    key: \"withTestId\",\n    value: function withTestId(id) {\n      this.config.testId = id;\n      return this;\n    }\n  }, {\n    key: \"cancelsTouchesInView\",\n    value: function cancelsTouchesInView(value) {\n      this.config.cancelsTouchesInView = value;\n      return this;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.handlerTag = getNextHandlerTag();\n      this.handlers = _objectSpread(_objectSpread({}, this.handlers), {}, {\n        handlerTag: this.handlerTag\n      });\n      if (this.config.ref) {\n        this.config.ref.current = this;\n      }\n    }\n  }, {\n    key: \"toGestureArray\",\n    value: function toGestureArray() {\n      return [this];\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {}\n  }, {\n    key: \"shouldUseReanimated\",\n    get: function get() {\n      return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !isRemoteDebuggingEnabled();\n    }\n  }]);\n}(Gesture);\nexport var ContinousBaseGesture = function (_BaseGesture2) {\n  function ContinousBaseGesture() {\n    _classCallCheck(this, ContinousBaseGesture);\n    return _callSuper(this, ContinousBaseGesture, arguments);\n  }\n  _inherits(ContinousBaseGesture, _BaseGesture2);\n  return _createClass(ContinousBaseGesture, [{\n    key: \"onUpdate\",\n    value: function onUpdate(callback) {\n      this.handlers.onUpdate = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.onChange = callback;\n      this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n      return this;\n    }\n  }, {\n    key: \"manualActivation\",\n    value: function manualActivation(_manualActivation) {\n      this.config.manualActivation = _manualActivation;\n      return this;\n    }\n  }]);\n}(BaseGesture);","map":{"version":3,"names":["getNextHandlerTag","isRemoteDebuggingEnabled","CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","Gesture","_createClass","_classCallCheck","nextGestureId","BaseGesture","_Gesture","_this","_callSuper","gestureId","handlerTag","handlerName","config","handlers","isWorklet","_inherits","key","value","addDependency","gesture","Array","concat","withRef","ref","callback","__workletHash","undefined","onBegin","onStart","onEnd","onFinalize","onTouchesDown","needsPointerData","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","activeCursor","mouseButton","runOnJS","simultaneousWithExternalGesture","_len","arguments","length","gestures","_key","requireExternalGestureToFail","_len2","_key2","blocksExternalGesture","_len3","_key3","withTestId","id","testId","cancelsTouchesInView","initialize","_objectSpread","current","toGestureArray","prepare","get","includes","ContinousBaseGesture","_BaseGesture2","onUpdate","onChange","manualActivation"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\gesture.ts"],"sourcesContent":["import {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n  ActiveCursor,\n  MouseButton,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../getNextHandlerTag';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport type {\n  FlingGestureHandlerEventPayload,\n  ForceTouchGestureHandlerEventPayload,\n  LongPressGestureHandlerEventPayload,\n  PanGestureHandlerEventPayload,\n  PinchGestureHandlerEventPayload,\n  RotationGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n  NativeViewGestureHandlerPayload,\n  HoverGestureHandlerEventPayload,\n} from '../GestureHandlerEventPayload';\nimport { isRemoteDebuggingEnabled } from '../../utils';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>\n  | BaseGesture<HoverGestureHandlerEventPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // Allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  blocksHandlers?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n  runOnJS?: boolean;\n  testId?: string;\n  cancelsTouchesInView?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  gestureId: number;\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = (typeof CALLBACK_TYPE)[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nlet nextGestureId = 0;\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n> extends Gesture {\n  private gestureId = -1;\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    gestureId: -1,\n    handlerTag: -1,\n    isWorklet: [],\n  };\n\n  constructor() {\n    super();\n\n    // Used to check whether the gesture config has been updated when wrapping it\n    // with `useMemo`. Since every config will have a unique id, when the dependencies\n    // don't change, the config won't be recreated and the id will stay the same.\n    // If the id is different, it means that the config has changed and the gesture\n    // needs to be updated.\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail' | 'blocksHandlers',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  /**\n   * Sets a `ref` to the gesture object, allowing for interoperability with the old API.\n   * @param ref\n   */\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  /**\n   * Set the callback that is being called when given gesture handler starts receiving touches.\n   * At the moment of this callback the handler is in `BEGAN` state and we don't know yet if it will recognize the gesture at all.\n   * @param callback\n   */\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the gesture is recognized by the handler and it transitions to the `ACTIVE` state.\n   * @param callback\n   */\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the gesture that was recognized by the handler finishes and handler reaches `END` state.\n   * It will be called only if the handler was previously in the `ACTIVE` state.\n   * @param callback\n   */\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize.\n   * @param callback\n   */\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesDown` callback which is called every time a pointer is placed on the screen.\n   * @param callback\n   */\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesMove` callback which is called every time a pointer is moved on the screen.\n   * @param callback\n   */\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesUp` callback which is called every time a pointer is lifted from the screen.\n   * @param callback\n   */\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesCancelled` callback which is called every time a pointer stops being tracked, for example when the gesture finishes.\n   * @param callback\n   */\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Indicates whether the given handler should be analyzing stream of touch events or not.\n   * @param enabled\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#enabledvalue-boolean\n   */\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  /**\n   * When true the handler will cancel or fail recognition (depending on its current state) whenever the finger leaves the area of the connected view.\n   * @param value\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#shouldcancelwhenoutsidevalue-boolean\n   */\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  /**\n   * This parameter enables control over what part of the connected view area can be used to begin recognizing the gesture.\n   * When a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly.\n   * @param hitSlop\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#hitslopsettings\n   */\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  /**\n   * #### Web only\n   * This parameter allows to specify which `cursor` should be used when gesture activates.\n   * Supports all CSS cursor values (e.g. `\"grab\"`, `\"zoom-in\"`). Default value is set to `\"auto\"`.\n   * @param activeCursor\n   */\n  activeCursor(activeCursor: ActiveCursor) {\n    this.config.activeCursor = activeCursor;\n    return this;\n  }\n\n  /**\n   * #### Web & Android only\n   * Allows users to choose which mouse button should handler respond to.\n   * Arguments can be combined using `|` operator, e.g. `mouseButton(MouseButton.LEFT | MouseButton.RIGHT)`.\n   * Default value is set to `MouseButton.LEFT`.\n   * @param mouseButton\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#mousebuttonvalue-mousebutton-web--android-only\n   */\n  mouseButton(mouseButton: MouseButton) {\n    this.config.mouseButton = mouseButton;\n    return this;\n  }\n\n  /**\n   * When `react-native-reanimated` is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called.\n   * This option allows for changing this behavior: when `true`, all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.\n   * Defaults to `false`.\n   * @param runOnJS\n   */\n  runOnJS(runOnJS: boolean) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n\n  /**\n   * Allows gestures across different components to be recognized simultaneously.\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneouswithexternalgesture\n   */\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Allows to delay activation of the handler until all handlers passed as arguments to this method fail (or don't begin at all).\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#requireexternalgesturetofail\n   */\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Works similarily to `requireExternalGestureToFail` but the direction of the relation is reversed - instead of being one-to-many relation, it's many-to-one.\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#blocksexternalgesture\n   */\n  blocksExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('blocksHandlers', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Sets a `testID` property for gesture object, allowing for querying for it in tests.\n   * @param id\n   */\n  withTestId(id: string) {\n    this.config.testId = id;\n    return this;\n  }\n\n  /**\n   * #### iOS only\n   * When `true`, the handler will cancel touches for native UI components (`UIButton`, `UISwitch`, etc) it's attached to when it becomes `ACTIVE`.\n   * Default value is `true`.\n   * @param value\n   */\n  cancelsTouchesInView(value: boolean) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n\n  get shouldUseReanimated(): boolean {\n    // Use Reanimated when runOnJS isn't set explicitly,\n    // all defined callbacks are worklets\n    // and remote debugging is disabled\n    return (\n      this.config.runOnJS !== true &&\n      !this.handlers.isWorklet.includes(false) &&\n      !isRemoteDebuggingEnabled()\n    );\n  }\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>,\n> extends BaseGesture<EventPayloadT> {\n  /**\n   * Set the callback that is being called every time the gesture receives an update while it's active.\n   * @param callback\n   */\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called every time the gesture receives an update while it's active.\n   * This callback will receive information about change in value in relation to the last received event.\n   * @param callback\n   */\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * When `true` the handler will not activate by itself even if its activation criteria are met.\n   * Instead you can manipulate its state using state manager.\n   * @param manualActivation\n   */\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"],"mappings":";;;;;;;;;;;;AASA,SAASA,iBAAiB;AAa1B,SAASC,wBAAwB;AAiEjC,OAAO,IAAMC,aAAa,GAAG;EAC3BC,SAAS,EAAE,CAAC;EACZC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE,CAAC;EACTC,GAAG,EAAE,CAAC;EACNC,QAAQ,EAAE,CAAC;EACXC,YAAY,EAAE,CAAC;EACfC,YAAY,EAAE,CAAC;EACfC,UAAU,EAAE,CAAC;EACbC,iBAAiB,EAAE;AACrB,CAAU;AAMV,WAAsBC,OAAO,GAAAC,YAAA,UAAAD,QAAA;EAAAE,eAAA,OAAAF,OAAA;AAAA;AAoB7B,IAAIG,aAAa,GAAG,CAAC;AACrB,WAAsBC,WAAW,aAAAC,QAAA;EAa/B,SAAAD,YAAA,EAAc;IAAA,IAAAE,KAAA;IAAAJ,eAAA,OAAAE,WAAA;IACZE,KAAA,GAAAC,UAAA,OAAAH,WAAA;IAAOE,KAAA,CAXDE,SAAS,GAAG,CAAC,CAAC;IAAAF,KAAA,CACfG,UAAU,GAAG,CAAC,CAAC;IAAAH,KAAA,CACfI,WAAW,GAAG,EAAE;IAAAJ,KAAA,CAChBK,MAAM,GAAsB,CAAC,CAAC;IAAAL,KAAA,CAC9BM,QAAQ,GAAoC;MACjDJ,SAAS,EAAE,CAAC,CAAC;MACbC,UAAU,EAAE,CAAC,CAAC;MACdI,SAAS,EAAE;IACb,CAAC;IAUCP,KAAA,CAAKE,SAAS,GAAGL,aAAa,EAAE;IAChCG,KAAA,CAAKM,QAAQ,CAACJ,SAAS,GAAGF,KAAA,CAAKE,SAAS;IAAA,OAAAF,KAAA;EAC1C;EAAAQ,SAAA,CAAAV,WAAA,EAAAC,QAAA;EAAA,OAAAJ,YAAA,CAAAG,WAAA;IAAAW,GAAA;IAAAC,KAAA,EAEQ,SAAAC,aAAaA,CACnBF,GAA4D,EAC5DG,OAAoC,EACpC;MACA,IAAMF,KAAK,GAAG,IAAI,CAACL,MAAM,CAACI,GAAG,CAAC;MAC9B,IAAI,CAACJ,MAAM,CAACI,GAAG,CAAC,GAAGC,KAAK,GACpBG,KAAK,CAAa,CAAC,CAACC,MAAM,CAACJ,KAAK,EAAEE,OAAO,CAAC,GAC1C,CAACA,OAAO,CAAC;IACf;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAMA,SAAAK,OAAOA,CAACC,GAAoD,EAAE;MAC5D,IAAI,CAACX,MAAM,CAACW,GAAG,GAAGA,GAAG;MACrB,OAAO,IAAI;IACb;EAAA;IAAAP,GAAA;IAAAC,KAAA,EAGU,SAAAH,SAASA,CAACU,QAAkB,EAAE;MAEtC,OAAOA,QAAQ,CAACC,aAAa,KAAKC,SAAS;IAC7C;EAAA;IAAAV,GAAA;IAAAC,KAAA,EAOA,SAAAU,OAAOA,CAACH,QAAiE,EAAE;MACzE,IAAI,CAACX,QAAQ,CAACc,OAAO,GAAGH,QAAQ;MAChC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACE,KAAK,CAAC,GAAG,IAAI,CAACuB,SAAS,CAACU,QAAQ,CAAC;MACvE,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAMA,SAAAW,OAAOA,CAACJ,QAAiE,EAAE;MACzE,IAAI,CAACX,QAAQ,CAACe,OAAO,GAAGJ,QAAQ;MAChC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACG,KAAK,CAAC,GAAG,IAAI,CAACsB,SAAS,CAACU,QAAQ,CAAC;MACvE,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAOA,SAAAY,KAAKA,CACHL,QAGS,EACT;MACA,IAAI,CAACX,QAAQ,CAACgB,KAAK,GAAGL,QAAQ;MAE9B,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACM,GAAG,CAAC,GAAG,IAAI,CAACmB,SAAS,CAACU,QAAQ,CAAC;MACrE,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAMA,SAAAa,UAAUA,CACRN,QAGS,EACT;MACA,IAAI,CAACX,QAAQ,CAACiB,UAAU,GAAGN,QAAQ;MAEnC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACO,QAAQ,CAAC,GAAG,IAAI,CAACkB,SAAS,CAACU,QAAQ,CAAC;MAC1E,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAMA,SAAAc,aAAaA,CAACP,QAA+B,EAAE;MAC7C,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;MACnC,IAAI,CAACnB,QAAQ,CAACkB,aAAa,GAAGP,QAAQ;MACtC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACQ,YAAY,CAAC,GACjD,IAAI,CAACiB,SAAS,CAACU,QAAQ,CAAC;MAE1B,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAMA,SAAAgB,aAAaA,CAACT,QAA+B,EAAE;MAC7C,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;MACnC,IAAI,CAACnB,QAAQ,CAACoB,aAAa,GAAGT,QAAQ;MACtC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACS,YAAY,CAAC,GACjD,IAAI,CAACgB,SAAS,CAACU,QAAQ,CAAC;MAE1B,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAMA,SAAAiB,WAAWA,CAACV,QAA+B,EAAE;MAC3C,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;MACnC,IAAI,CAACnB,QAAQ,CAACqB,WAAW,GAAGV,QAAQ;MACpC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACU,UAAU,CAAC,GAC/C,IAAI,CAACe,SAAS,CAACU,QAAQ,CAAC;MAE1B,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAMA,SAAAkB,kBAAkBA,CAACX,QAA+B,EAAE;MAClD,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;MACnC,IAAI,CAACnB,QAAQ,CAACsB,kBAAkB,GAAGX,QAAQ;MAC3C,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACW,iBAAiB,CAAC,GACtD,IAAI,CAACc,SAAS,CAACU,QAAQ,CAAC;MAE1B,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAOA,SAAAmB,OAAOA,CAACA,QAAgB,EAAE;MACxB,IAAI,CAACxB,MAAM,CAACwB,OAAO,GAAGA,QAAO;MAC7B,OAAO,IAAI;IACb;EAAA;IAAApB,GAAA;IAAAC,KAAA,EAOA,SAAAoB,uBAAuBA,CAACpB,KAAc,EAAE;MACtC,IAAI,CAACL,MAAM,CAACyB,uBAAuB,GAAGpB,KAAK;MAC3C,OAAO,IAAI;IACb;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAQA,SAAAqB,OAAOA,CAACA,QAAgB,EAAE;MACxB,IAAI,CAAC1B,MAAM,CAAC0B,OAAO,GAAGA,QAAO;MAC7B,OAAO,IAAI;IACb;EAAA;IAAAtB,GAAA;IAAAC,KAAA,EAQA,SAAAsB,YAAYA,CAACA,aAA0B,EAAE;MACvC,IAAI,CAAC3B,MAAM,CAAC2B,YAAY,GAAGA,aAAY;MACvC,OAAO,IAAI;IACb;EAAA;IAAAvB,GAAA;IAAAC,KAAA,EAUA,SAAAuB,WAAWA,CAACA,YAAwB,EAAE;MACpC,IAAI,CAAC5B,MAAM,CAAC4B,WAAW,GAAGA,YAAW;MACrC,OAAO,IAAI;IACb;EAAA;IAAAxB,GAAA;IAAAC,KAAA,EAQA,SAAAwB,OAAOA,CAACA,QAAgB,EAAE;MACxB,IAAI,CAAC7B,MAAM,CAAC6B,OAAO,GAAGA,QAAO;MAC7B,OAAO,IAAI;IACb;EAAA;IAAAzB,GAAA;IAAAC,KAAA,EAOA,SAAAyB,+BAA+BA,CAAA,EAA6C;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAzCC,QAAuC,OAAA1B,KAAA,CAAAuB,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;QAAvCD,QAAuC,CAAAC,IAAA,IAAAH,SAAA,CAAAG,IAAA;MAAA;MACxE,KAAK,IAAM5B,OAAO,IAAI2B,QAAQ,EAAE;QAC9B,IAAI,CAAC5B,aAAa,CAAC,kBAAkB,EAAEC,OAAO,CAAC;MACjD;MACA,OAAO,IAAI;IACb;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAOA,SAAA+B,4BAA4BA,CAAA,EAA6C;MAAA,SAAAC,KAAA,GAAAL,SAAA,CAAAC,MAAA,EAAzCC,QAAuC,OAAA1B,KAAA,CAAA6B,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAvCJ,QAAuC,CAAAI,KAAA,IAAAN,SAAA,CAAAM,KAAA;MAAA;MACrE,KAAK,IAAM/B,OAAO,IAAI2B,QAAQ,EAAE;QAC9B,IAAI,CAAC5B,aAAa,CAAC,eAAe,EAAEC,OAAO,CAAC;MAC9C;MACA,OAAO,IAAI;IACb;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAOA,SAAAkC,qBAAqBA,CAAA,EAA6C;MAAA,SAAAC,KAAA,GAAAR,SAAA,CAAAC,MAAA,EAAzCC,QAAuC,OAAA1B,KAAA,CAAAgC,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAvCP,QAAuC,CAAAO,KAAA,IAAAT,SAAA,CAAAS,KAAA;MAAA;MAC9D,KAAK,IAAMlC,OAAO,IAAI2B,QAAQ,EAAE;QAC9B,IAAI,CAAC5B,aAAa,CAAC,gBAAgB,EAAEC,OAAO,CAAC;MAC/C;MACA,OAAO,IAAI;IACb;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAMA,SAAAqC,UAAUA,CAACC,EAAU,EAAE;MACrB,IAAI,CAAC3C,MAAM,CAAC4C,MAAM,GAAGD,EAAE;MACvB,OAAO,IAAI;IACb;EAAA;IAAAvC,GAAA;IAAAC,KAAA,EAQA,SAAAwC,oBAAoBA,CAACxC,KAAc,EAAE;MACnC,IAAI,CAACL,MAAM,CAAC6C,oBAAoB,GAAGxC,KAAK;MACxC,OAAO,IAAI;IACb;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAEA,SAAAyC,UAAUA,CAAA,EAAG;MACX,IAAI,CAAChD,UAAU,GAAGvB,iBAAiB,CAAC,CAAC;MAErC,IAAI,CAAC0B,QAAQ,GAAA8C,aAAA,CAAAA,aAAA,KAAQ,IAAI,CAAC9C,QAAQ;QAAEH,UAAU,EAAE,IAAI,CAACA;MAAA,EAAY;MAEjE,IAAI,IAAI,CAACE,MAAM,CAACW,GAAG,EAAE;QACnB,IAAI,CAACX,MAAM,CAACW,GAAG,CAACqC,OAAO,GAAG,IAAmB;MAC/C;IACF;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAA4C,cAAcA,CAAA,EAAkB;MAC9B,OAAO,CAAC,IAAI,CAAgB;IAC9B;EAAA;IAAA7C,GAAA;IAAAC,KAAA,EAGA,SAAA6C,OAAOA,CAAA,EAAG,CAAC;EAAA;IAAA9C,GAAA;IAAA+C,GAAA,EAEX,SAAAA,IAAA,EAAmC;MAIjC,OACE,IAAI,CAACnD,MAAM,CAAC6B,OAAO,KAAK,IAAI,IAC5B,CAAC,IAAI,CAAC5B,QAAQ,CAACC,SAAS,CAACkD,QAAQ,CAAC,KAAK,CAAC,IACxC,CAAC5E,wBAAwB,CAAC,CAAC;IAE/B;EAAA;AAAA,EA9SQa,OAAO;AAiTjB,WAAsBgE,oBAAoB,aAAAC,aAAA;EAAA,SAAAD,qBAAA;IAAA9D,eAAA,OAAA8D,oBAAA;IAAA,OAAAzD,UAAA,OAAAyD,oBAAA,EAAArB,SAAA;EAAA;EAAA7B,SAAA,CAAAkD,oBAAA,EAAAC,aAAA;EAAA,OAAAhE,YAAA,CAAA+D,oBAAA;IAAAjD,GAAA;IAAAC,KAAA,EAQxC,SAAAkD,QAAQA,CAAC3C,QAA4D,EAAE;MACrE,IAAI,CAACX,QAAQ,CAACsD,QAAQ,GAAG3C,QAAQ;MACjC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACI,MAAM,CAAC,GAAG,IAAI,CAACqB,SAAS,CAACU,QAAQ,CAAC;MACxE,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAOA,SAAAmD,QAAQA,CACN5C,QAES,EACT;MACA,IAAI,CAACX,QAAQ,CAACuD,QAAQ,GAAG5C,QAAQ;MACjC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACzB,aAAa,CAACK,MAAM,CAAC,GAAG,IAAI,CAACoB,SAAS,CAACU,QAAQ,CAAC;MACxE,OAAO,IAAI;IACb;EAAA;IAAAR,GAAA;IAAAC,KAAA,EAOA,SAAAoD,gBAAgBA,CAACA,iBAAyB,EAAE;MAC1C,IAAI,CAACzD,MAAM,CAACyD,gBAAgB,GAAGA,iBAAgB;MAC/C,OAAO,IAAI;IACb;EAAA;AAAA,EAlCQhE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}