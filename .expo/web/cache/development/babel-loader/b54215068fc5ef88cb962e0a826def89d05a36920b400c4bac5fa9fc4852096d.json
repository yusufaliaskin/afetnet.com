{"ast":null,"code":"\"use strict\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from \"../handlers/PanGestureHandler\";\nimport { TapGestureHandler } from \"../handlers/TapGestureHandler\";\nimport { State } from \"../State\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DRAG_TOSS = 0.05;\nvar Swipeable = function (_Component) {\n  function Swipeable(_props) {\n    var _this;\n    _classCallCheck(this, Swipeable);\n    _this = _callSuper(this, Swipeable, [_props]);\n    _this.updateAnimatedEvent = function (props, state) {\n      var friction = props.friction,\n        overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n        rowTranslation = state.rowTranslation,\n        _state$leftWidth = state.leftWidth,\n        leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n        _state$rowWidth = state.rowWidth,\n        rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n        rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n        overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n        _props$overshootRight = props.overshootRight,\n        overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n        outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    };\n    _this.onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    };\n    _this.onHandlerStateChange = function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n      if (ev.nativeEvent.state === State.ACTIVE) {\n        var _ev$nativeEvent = ev.nativeEvent,\n          velocityX = _ev$nativeEvent.velocityX,\n          dragX = _ev$nativeEvent.translationX;\n        var rowState = _this.state.rowState;\n        var friction = _this.props.friction;\n        var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n        var direction = rowState === -1 ? 'right' : rowState === 1 ? 'left' : translationX > 0 ? 'left' : 'right';\n        if (rowState === 0) {\n          _this.props.onSwipeableOpenStartDrag == null ? void 0 : _this.props.onSwipeableOpenStartDrag(direction);\n        } else {\n          _this.props.onSwipeableCloseStartDrag == null ? void 0 : _this.props.onSwipeableCloseStartDrag(direction);\n        }\n      }\n    };\n    _this.handleRelease = function (ev) {\n      var _ev$nativeEvent2 = ev.nativeEvent,\n        velocityX = _ev$nativeEvent2.velocityX,\n        dragX = _ev$nativeEvent2.translationX;\n      var _this$state = _this.state,\n        _this$state$leftWidth = _this$state.leftWidth,\n        leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n        _this$state$rowWidth = _this$state.rowWidth,\n        rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n        rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props = _this.props,\n        friction = _this$props.friction,\n        _this$props$leftThres = _this$props.leftThreshold,\n        leftThreshold = _this$props$leftThres === void 0 ? leftWidth / 2 : _this$props$leftThres,\n        _this$props$rightThre = _this$props.rightThreshold,\n        rightThreshold = _this$props$rightThre === void 0 ? rightWidth / 2 : _this$props$rightThre;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n    _this.animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n        dragX = _this$state2.dragX,\n        rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          if (toValue > 0) {\n            _this.props.onSwipeableLeftOpen == null ? void 0 : _this.props.onSwipeableLeftOpen();\n            _this.props.onSwipeableOpen == null ? void 0 : _this.props.onSwipeableOpen('left', _this);\n          } else if (toValue < 0) {\n            _this.props.onSwipeableRightOpen == null ? void 0 : _this.props.onSwipeableRightOpen();\n            _this.props.onSwipeableOpen == null ? void 0 : _this.props.onSwipeableOpen('right', _this);\n          } else {\n            var closingDirection = fromValue > 0 ? 'left' : 'right';\n            _this.props.onSwipeableClose == null ? void 0 : _this.props.onSwipeableClose(closingDirection, _this);\n          }\n        }\n      });\n      if (toValue > 0) {\n        _this.props.onSwipeableLeftWillOpen == null ? void 0 : _this.props.onSwipeableLeftWillOpen();\n        _this.props.onSwipeableWillOpen == null ? void 0 : _this.props.onSwipeableWillOpen('left');\n      } else if (toValue < 0) {\n        _this.props.onSwipeableRightWillOpen == null ? void 0 : _this.props.onSwipeableRightWillOpen();\n        _this.props.onSwipeableWillOpen == null ? void 0 : _this.props.onSwipeableWillOpen('right');\n      } else {\n        var closingDirection = fromValue > 0 ? 'left' : 'right';\n        _this.props.onSwipeableWillClose == null ? void 0 : _this.props.onSwipeableWillClose(closingDirection);\n      }\n    };\n    _this.onRowLayout = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    };\n    _this.currentOffset = function () {\n      var _this$state3 = _this.state,\n        _this$state3$leftWidt = _this$state3.leftWidth,\n        leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n        _this$state3$rowWidth = _this$state3.rowWidth,\n        rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n        rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n      return 0;\n    };\n    _this.close = function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    };\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n        leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    };\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n        rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    };\n    _this.reset = function () {\n      var _this$state4 = _this.state,\n        dragX = _this$state4.dragX,\n        rowTranslation = _this$state4.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(0);\n      _this.setState({\n        rowState: 0\n      });\n    };\n    var _dragX = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n  _inherits(Swipeable, _Component);\n  return _createClass(Swipeable, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var rowState = this.state.rowState;\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        renderLeftActions = _this$props2.renderLeftActions,\n        renderRightActions = _this$props2.renderRightActions,\n        _this$props2$dragOffs = _this$props2.dragOffsetFromLeftEdge,\n        dragOffsetFromLeftEdge = _this$props2$dragOffs === void 0 ? 10 : _this$props2$dragOffs,\n        _this$props2$dragOffs2 = _this$props2.dragOffsetFromRightEdge,\n        dragOffsetFromRightEdge = _this$props2$dragOffs2 === void 0 ? 10 : _this$props2$dragOffs2;\n      var left = renderLeftActions && _jsxs(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }],\n        children: [renderLeftActions(this.showLeftAction, this.transX, this), _jsx(View, {\n          onLayout: function onLayout(_ref4) {\n            var nativeEvent = _ref4.nativeEvent;\n            return _this2.setState({\n              leftWidth: nativeEvent.layout.x\n            });\n          }\n        })]\n      });\n      var right = renderRightActions && _jsxs(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }],\n        children: [renderRightActions(this.showRightAction, this.transX, this), _jsx(View, {\n          onLayout: function onLayout(_ref5) {\n            var nativeEvent = _ref5.nativeEvent;\n            return _this2.setState({\n              rightOffset: nativeEvent.layout.x\n            });\n          }\n        })]\n      });\n      return _jsx(PanGestureHandler, _objectSpread(_objectSpread({\n        activeOffsetX: [-dragOffsetFromRightEdge, dragOffsetFromLeftEdge],\n        touchAction: \"pan-y\"\n      }, this.props), {}, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange,\n        children: _jsxs(Animated.View, {\n          onLayout: this.onRowLayout,\n          style: [styles.container, this.props.containerStyle],\n          children: [left, right, _jsx(TapGestureHandler, {\n            enabled: rowState !== 0,\n            touchAction: \"pan-y\",\n            onHandlerStateChange: this.onTapHandlerStateChange,\n            children: _jsx(Animated.View, {\n              pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n              style: [{\n                transform: [{\n                  translateX: this.transX\n                }]\n              }, this.props.childrenContainerStyle],\n              children: children\n            })\n          })]\n        })\n      }));\n    }\n  }]);\n}(Component);\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n};\nexport { Swipeable as default };\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","jsx","_jsx","jsxs","_jsxs","DRAG_TOSS","Swipeable","_Component","props","_this","_classCallCheck","_callSuper","updateAnimatedEvent","state","friction","overshootFriction","dragX","rowTranslation","_state$leftWidth","leftWidth","_state$rowWidth","rowWidth","_state$rightOffset","rightOffset","rightWidth","Math","max","_props$overshootLeft","overshootLeft","_props$overshootRight","overshootRight","transX","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","onTapHandlerStateChange","_ref","nativeEvent","oldState","ACTIVE","close","onHandlerStateChange","ev","handleRelease","_ev$nativeEvent","velocityX","translationX","rowState","direction","onSwipeableOpenStartDrag","onSwipeableCloseStartDrag","_ev$nativeEvent2","_this$state","_this$state$leftWidth","_this$state$rowWidth","_this$state$rightOffs","_this$props","_this$props$leftThres","leftThreshold","_this$props$rightThre","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","_this$state2","setValue","setState","sign","spring","_objectSpread","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","_ref2","finished","onSwipeableLeftOpen","onSwipeableOpen","onSwipeableRightOpen","closingDirection","onSwipeableClose","onSwipeableLeftWillOpen","onSwipeableWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onRowLayout","_ref3","layout","width","_this$state3","_this$state3$leftWidt","_this$state3$rowWidth","_this$state$rightOffs2","openLeft","_this$state$leftWidth2","openRight","_this$state$rowWidth2","_this$state$rightOffs3","reset","_this$state4","undefined","onGestureEvent","event","_inherits","_createClass","key","value","shouldComponentUpdate","render","_this2","_this$props2","children","renderLeftActions","renderRightActions","_this$props2$dragOffs","dragOffsetFromLeftEdge","_this$props2$dragOffs2","dragOffsetFromRightEdge","left","style","styles","leftActions","transform","translateX","onLayout","_ref4","x","right","rightActions","_ref5","activeOffsetX","touchAction","container","containerStyle","enabled","pointerEvents","childrenContainerStyle","defaultProps","default","create","overflow","absoluteFillObject","flexDirection","isRTL"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\components\\Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\n/**\n * @deprecated use Reanimated version of Swipeable instead\n *\n * This component allows for implementing swipeable rows or similar interaction.\n */\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n\n    if (ev.nativeEvent.state === State.ACTIVE) {\n      const { velocityX, translationX: dragX } = ev.nativeEvent;\n      const { rowState } = this.state;\n      const { friction } = this.props;\n\n      const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n      const direction =\n        rowState === -1\n          ? 'right'\n          : rowState === 1\n            ? 'left'\n            : translationX > 0\n              ? 'left'\n              : 'right';\n\n      if (rowState === 0) {\n        this.props.onSwipeableOpenStartDrag?.(direction);\n      } else {\n        this.props.onSwipeableCloseStartDrag?.(direction);\n      }\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // Swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // Swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  reset = () => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({ rowState: 0 });\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // All those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]}\n        touchAction=\"pan-y\"\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            touchAction=\"pan-y\"\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":";;;;;;;;;;;AAIA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,OAAO;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,WAAA;AAejC,SACEC,iBAAiB;AAOnB,SAASC,iBAAiB;AAC1B,SAASC,KAAK;AAAmB,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAEjC,IAAMC,SAAS,GAAG,IAAI;AAAA,IAuMDC,SAAS,aAAAC,UAAA;EAU5B,SAAAD,UAAYE,MAAqB,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,SAAA;IACjCG,KAAA,GAAAE,UAAA,OAAAL,SAAA,GAAME,MAAK;IAACC,KAAA,CA2CNG,mBAAmB,GAAG,UAC5BJ,KAAqB,EACrBK,KAAqB,EAClB;MACH,IAAQC,QAAQ,GAAwBN,KAAK,CAArCM,QAAQ;QAAEC,iBAAA,GAAsBP,KAAK,CAA3BO,iBAAA;MAClB,IAAQC,KAAK,GAAkDH,KAAK,CAA5DG,KAAK;QAAEC,cAAc,GAAkCJ,KAAK,CAArDI,cAAc;QAAAC,gBAAA,GAAkCL,KAAK,CAArCM,SAAS;QAATA,SAAS,GAAAD,gBAAA,cAAG,CAAC,GAAAA,gBAAA;QAAAE,eAAA,GAAmBP,KAAK,CAAtBQ,QAAQ;QAARA,QAAQ,GAAAD,eAAA,cAAG,IAAAA,eAAA;MACzD,IAAAE,kBAAA,GAAmCT,KAAK,CAAhCU,WAAW;QAAXA,WAAW,GAAAD,kBAAA,cAAGD,QAAA,GAAAC,kBAAA;MACtB,IAAME,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,QAAQ,GAAGE,WAAW,CAAC;MAEtD,IAAAI,oBAAA,GACEnB,KAAK,CADCoB,aAAa;QAAbA,aAAa,GAAAD,oBAAA,cAAGR,SAAS,GAAG,CAAC,GAAAQ,oBAAA;QAAAE,qBAAA,GACnCrB,KAAK,CADgCsB,cAAc;QAAdA,cAAc,GAAAD,qBAAA,cAAGL,UAAU,GAAG,IAAAK,qBAAA;MAGrE,IAAME,MAAM,GAAGrC,QAAQ,CAACsC,GAAG,CACzBf,cAAc,EACdD,KAAK,CAACiB,WAAW,CAAC;QAChBC,UAAU,EAAE,CAAC,CAAC,EAAEpB,QAAQ,CAAE;QAC1BqB,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC;MACpB,CAAC,CACH,CAAC,CAACF,WAAW,CAAC;QACZC,UAAU,EAAE,CAAC,CAACV,UAAU,GAAG,CAAC,EAAE,CAACA,UAAU,EAAEL,SAAS,EAAEA,SAAS,GAAG,CAAC,CAAC;QACpEgB,WAAW,EAAE,CACX,CAACX,UAAU,IAAIM,cAAc,GAAG,CAAC,GAAGf,iBAAkB,GAAG,CAAC,CAAC,EAC3D,CAACS,UAAU,EACXL,SAAS,EACTA,SAAS,IAAIS,aAAa,GAAG,CAAC,GAAGb,iBAAkB,GAAG,CAAC,CAAC;MAE5D,CAAC,CAAC;MACFN,KAAA,CAAKsB,MAAM,GAAGA,MAAM;MACpBtB,KAAA,CAAK2B,cAAc,GACjBjB,SAAS,GAAG,CAAC,GACTY,MAAM,CAACE,WAAW,CAAC;QACjBC,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEf,SAAS,CAAC;QAC9BgB,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MACvB,CAAC,CAAC,GACF,IAAIzC,QAAQ,CAAC2C,KAAK,CAAC,CAAC,CAAC;MAC3B5B,KAAA,CAAK6B,mBAAmB,GAAG7B,KAAA,CAAK2B,cAAc,CAACH,WAAW,CAAC;QACzDC,UAAU,EAAE,CAAC,CAAC,EAAEK,MAAM,CAACC,SAAS,CAAC;QACjCL,WAAW,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;QACxBM,WAAW,EAAE;MACf,CAAC,CAAC;MACFhC,KAAA,CAAKiC,eAAe,GAClBlB,UAAU,GAAG,CAAC,GACVO,MAAM,CAACE,WAAW,CAAC;QACjBC,UAAU,EAAE,CAAC,CAACV,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;QAC/BW,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;MACvB,CAAC,CAAC,GACF,IAAIzC,QAAQ,CAAC2C,KAAK,CAAC,CAAC,CAAC;MAC3B5B,KAAA,CAAKkC,oBAAoB,GAAGlC,KAAA,CAAKiC,eAAe,CAACT,WAAW,CAAC;QAC3DC,UAAU,EAAE,CAAC,CAAC,EAAEK,MAAM,CAACC,SAAS,CAAC;QACjCL,WAAW,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;QACxBM,WAAW,EAAE;MACf,CAAC,CAAC;IACJ,CAAC;IAAAhC,KAAA,CAEOmC,uBAAuB,GAAG,UAAAC,IAAA,EAE4B;MAAA,IAD5DC,WAAA,GAAAD,IAAA,CAAAC,WAAA;MAEA,IAAIA,WAAW,CAACC,QAAQ,KAAK/C,KAAK,CAACgD,MAAM,EAAE;QACzCvC,KAAA,CAAKwC,KAAK,CAAC,CAAC;MACd;IACF,CAAC;IAAAxC,KAAA,CAEOyC,oBAAoB,GAC1B,UAAAC,EAA0D,EACvD;MACH,IAAIA,EAAE,CAACL,WAAW,CAACC,QAAQ,KAAK/C,KAAK,CAACgD,MAAM,EAAE;QAC5CvC,KAAA,CAAK2C,aAAa,CAACD,EAAE,CAAC;MACxB;MAEA,IAAIA,EAAE,CAACL,WAAW,CAACjC,KAAK,KAAKb,KAAK,CAACgD,MAAM,EAAE;QACzC,IAAAK,eAAA,GAA2CF,EAAE,CAACL,WAAW;UAAjDQ,SAAS,GAAAD,eAAA,CAATC,SAAS;UAAgBtC,KAAA,GAAAqC,eAAA,CAAdE,YAAY;QAC/B,IAAQC,QAAA,GAAa/C,KAAA,CAAKI,KAAK,CAAvB2C,QAAA;QACR,IAAQ1C,QAAA,GAAaL,KAAA,CAAKD,KAAK,CAAvBM,QAAA;QAER,IAAMyC,YAAY,GAAG,CAACvC,KAAK,GAAGX,SAAS,GAAGiD,SAAS,IAAIxC,QAAS;QAEhE,IAAM2C,SAAS,GACbD,QAAQ,KAAK,CAAC,CAAC,GACX,OAAO,GACPA,QAAQ,KAAK,CAAC,GACZ,MAAM,GACND,YAAY,GAAG,CAAC,GACd,MAAM,GACN,OAAO;QAEjB,IAAIC,QAAQ,KAAK,CAAC,EAAE;UAClB/C,KAAA,CAAKD,KAAK,CAACkD,wBAAwB,oBAAnCjD,KAAA,CAAKD,KAAK,CAACkD,wBAAwB,CAAGD,SAAS,CAAC;QAClD,CAAC,MAAM;UACLhD,KAAA,CAAKD,KAAK,CAACmD,yBAAyB,oBAApClD,KAAA,CAAKD,KAAK,CAACmD,yBAAyB,CAAGF,SAAS,CAAC;QACnD;MACF;IACF,CAAC;IAAAhD,KAAA,CAEO2C,aAAa,GACnB,UAAAD,EAA0D,EACvD;MACH,IAAAS,gBAAA,GAA2CT,EAAE,CAACL,WAAW;QAAjDQ,SAAS,GAAAM,gBAAA,CAATN,SAAS;QAAgBtC,KAAA,GAAA4C,gBAAA,CAAdL,YAAY;MAC/B,IAAAM,WAAA,GAAkDpD,KAAA,CAAKI,KAAK;QAAAiD,qBAAA,GAAAD,WAAA,CAApD1C,SAAS;QAATA,SAAS,GAAA2C,qBAAA,cAAG,CAAC,GAAAA,qBAAA;QAAAC,oBAAA,GAAAF,WAAA,CAAExC,QAAQ;QAARA,QAAQ,GAAA0C,oBAAA,cAAG,CAAC,GAAAA,oBAAA;QAAEP,QAAA,GAAAK,WAAA,CAAAL,QAAA;MACrC,IAAAQ,qBAAA,GAAmCvD,KAAA,CAAKI,KAAK,CAArCU,WAAW;QAAXA,WAAW,GAAAyC,qBAAA,cAAG3C,QAAA,GAAA2C,qBAAA;MACtB,IAAMxC,UAAU,GAAGH,QAAQ,GAAGE,WAAW;MACzC,IAAA0C,WAAA,GAIIxD,KAAA,CAAKD,KAAK;QAHZM,QAAQ,GAAAmD,WAAA,CAARnD,QAAQ;QAAAoD,qBAAA,GAAAD,WAAA,CACRE,aAAa;QAAbA,aAAa,GAAAD,qBAAA,cAAG/C,SAAS,GAAG,CAAC,GAAA+C,qBAAA;QAAAE,qBAAA,GAAAH,WAAA,CAC7BI,cAAc;QAAdA,cAAc,GAAAD,qBAAA,cAAG5C,UAAU,GAAG,IAAA4C,qBAAA;MAGhC,IAAME,YAAY,GAAG7D,KAAA,CAAK8D,aAAa,CAAC,CAAC,GAAGvD,KAAK,GAAGF,QAAS;MAC7D,IAAMyC,YAAY,GAAG,CAACvC,KAAK,GAAGX,SAAS,GAAGiD,SAAS,IAAIxC,QAAS;MAEhE,IAAI0D,OAAO,GAAG,CAAC;MACf,IAAIhB,QAAQ,KAAK,CAAC,EAAE;QAClB,IAAID,YAAY,GAAGY,aAAa,EAAE;UAChCK,OAAO,GAAGrD,SAAS;QACrB,CAAC,MAAM,IAAIoC,YAAY,GAAG,CAACc,cAAc,EAAE;UACzCG,OAAO,GAAG,CAAChD,UAAU;QACvB;MACF,CAAC,MAAM,IAAIgC,QAAQ,KAAK,CAAC,EAAE;QAEzB,IAAID,YAAY,GAAG,CAACY,aAAa,EAAE;UACjCK,OAAO,GAAGrD,SAAS;QACrB;MACF,CAAC,MAAM;QAEL,IAAIoC,YAAY,GAAGc,cAAc,EAAE;UACjCG,OAAO,GAAG,CAAChD,UAAU;QACvB;MACF;MAEAf,KAAA,CAAKgE,UAAU,CAACH,YAAY,EAAEE,OAAO,EAAElB,SAAS,GAAGxC,QAAS,CAAC;IAC/D,CAAC;IAAAL,KAAA,CAEOgE,UAAU,GAAG,UACnBC,SAAiB,EACjBF,OAAe,EACflB,SAKK,EACF;MACH,IAAAqB,YAAA,GAAkClE,KAAA,CAAKI,KAAK;QAApCG,KAAK,GAAA2D,YAAA,CAAL3D,KAAK;QAAEC,cAAA,GAAA0D,YAAA,CAAA1D,cAAA;MACfD,KAAK,CAAC4D,QAAQ,CAAC,CAAC,CAAC;MACjB3D,cAAc,CAAC2D,QAAQ,CAACF,SAAS,CAAC;MAElCjE,KAAA,CAAKoE,QAAQ,CAAC;QAAErB,QAAQ,EAAE/B,IAAI,CAACqD,IAAI,CAACN,OAAO;MAAE,CAAC,CAAC;MAC/C9E,QAAQ,CAACqF,MAAM,CAAC9D,cAAc,EAAA+D,aAAA;QAC5BC,kBAAkB,EAAE,GAAG;QACvBC,yBAAyB,EAAE,GAAG;QAC9BC,QAAQ,EAAE7B,SAAS;QACnB8B,UAAU,EAAE,CAAC;QACbZ,OAAO,EAAPA,OAAO;QACPa,eAAe,EAAE5E,KAAA,CAAKD,KAAK,CAAC8E;MAAoB,GAC7C7E,KAAA,CAAKD,KAAK,CAAC+E,gBAAA,CACf,CAAC,CAACC,KAAK,CAAC,UAAAC,KAAA,EAAkB;QAAA,IAAfC,QAAA,GAAAD,KAAA,CAAAC,QAAA;QACV,IAAIA,QAAQ,EAAE;UACZ,IAAIlB,OAAO,GAAG,CAAC,EAAE;YACf/D,KAAA,CAAKD,KAAK,CAACmF,mBAAmB,oBAA9BlF,KAAA,CAAKD,KAAK,CAACmF,mBAAmB,CAAG,CAAC;YAClClF,KAAA,CAAKD,KAAK,CAACoF,eAAe,oBAA1BnF,KAAA,CAAKD,KAAK,CAACoF,eAAe,CAAG,MAAM,EAAAnF,KAAM,CAAC;UAC5C,CAAC,MAAM,IAAI+D,OAAO,GAAG,CAAC,EAAE;YACtB/D,KAAA,CAAKD,KAAK,CAACqF,oBAAoB,oBAA/BpF,KAAA,CAAKD,KAAK,CAACqF,oBAAoB,CAAG,CAAC;YACnCpF,KAAA,CAAKD,KAAK,CAACoF,eAAe,oBAA1BnF,KAAA,CAAKD,KAAK,CAACoF,eAAe,CAAG,OAAO,EAAAnF,KAAM,CAAC;UAC7C,CAAC,MAAM;YACL,IAAMqF,gBAAgB,GAAGpB,SAAS,GAAG,CAAC,GAAG,MAAM,GAAG,OAAO;YACzDjE,KAAA,CAAKD,KAAK,CAACuF,gBAAgB,oBAA3BtF,KAAA,CAAKD,KAAK,CAACuF,gBAAgB,CAAGD,gBAAgB,EAAArF,KAAM,CAAC;UACvD;QACF;MACF,CAAC,CAAC;MACF,IAAI+D,OAAO,GAAG,CAAC,EAAE;QACf/D,KAAA,CAAKD,KAAK,CAACwF,uBAAuB,oBAAlCvF,KAAA,CAAKD,KAAK,CAACwF,uBAAuB,CAAG,CAAC;QACtCvF,KAAA,CAAKD,KAAK,CAACyF,mBAAmB,oBAA9BxF,KAAA,CAAKD,KAAK,CAACyF,mBAAmB,CAAG,MAAM,CAAC;MAC1C,CAAC,MAAM,IAAIzB,OAAO,GAAG,CAAC,EAAE;QACtB/D,KAAA,CAAKD,KAAK,CAAC0F,wBAAwB,oBAAnCzF,KAAA,CAAKD,KAAK,CAAC0F,wBAAwB,CAAG,CAAC;QACvCzF,KAAA,CAAKD,KAAK,CAACyF,mBAAmB,oBAA9BxF,KAAA,CAAKD,KAAK,CAACyF,mBAAmB,CAAG,OAAO,CAAC;MAC3C,CAAC,MAAM;QACL,IAAMH,gBAAgB,GAAGpB,SAAS,GAAG,CAAC,GAAG,MAAM,GAAG,OAAO;QACzDjE,KAAA,CAAKD,KAAK,CAAC2F,oBAAoB,oBAA/B1F,KAAA,CAAKD,KAAK,CAAC2F,oBAAoB,CAAGL,gBAAgB,CAAC;MACrD;IACF,CAAC;IAAArF,KAAA,CAEO2F,WAAW,GAAG,UAAAC,KAAA,EAAwC;MAAA,IAArCvD,WAAA,GAAAuD,KAAA,CAAAvD,WAAA;MACvBrC,KAAA,CAAKoE,QAAQ,CAAC;QAAExD,QAAQ,EAAEyB,WAAW,CAACwD,MAAM,CAACC;MAAM,CAAC,CAAC;IACvD,CAAC;IAAA9F,KAAA,CAEO8D,aAAa,GAAG,YAAM;MAC5B,IAAAiC,YAAA,GAAkD/F,KAAA,CAAKI,KAAK;QAAA4F,qBAAA,GAAAD,YAAA,CAApDrF,SAAS;QAATA,SAAS,GAAAsF,qBAAA,cAAG,CAAC,GAAAA,qBAAA;QAAAC,qBAAA,GAAAF,YAAA,CAAEnF,QAAQ;QAARA,QAAQ,GAAAqF,qBAAA,cAAG,CAAC,GAAAA,qBAAA;QAAElD,QAAA,GAAAgD,YAAA,CAAAhD,QAAA;MACrC,IAAAmD,sBAAA,GAAmClG,KAAA,CAAKI,KAAK,CAArCU,WAAW;QAAXA,WAAW,GAAAoF,sBAAA,cAAGtF,QAAA,GAAAsF,sBAAA;MACtB,IAAMnF,UAAU,GAAGH,QAAQ,GAAGE,WAAW;MACzC,IAAIiC,QAAQ,KAAK,CAAC,EAAE;QAClB,OAAOrC,SAAS;MAClB,CAAC,MAAM,IAAIqC,QAAQ,KAAK,CAAC,CAAC,EAAE;QAC1B,OAAO,CAAChC,UAAU;MACpB;MACA,OAAO,CAAC;IACV,CAAC;IAAAf,KAAA,CAEDwC,KAAK,GAAG,YAAM;MACZxC,KAAA,CAAKgE,UAAU,CAAChE,KAAA,CAAK8D,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAAA9D,KAAA,CAGDmG,QAAQ,GAAG,YAAM;MACf,IAAAC,sBAAA,GAA0BpG,KAAA,CAAKI,KAAK,CAA5BM,SAAS;QAATA,SAAS,GAAA0F,sBAAA,cAAG,IAAAA,sBAAA;MACpBpG,KAAA,CAAKgE,UAAU,CAAChE,KAAA,CAAK8D,aAAa,CAAC,CAAC,EAAEpD,SAAS,CAAC;IAClD,CAAC;IAAAV,KAAA,CAGDqG,SAAS,GAAG,YAAM;MAChB,IAAAC,qBAAA,GAAyBtG,KAAA,CAAKI,KAAK,CAA3BQ,QAAQ;QAARA,QAAQ,GAAA0F,qBAAA,cAAG,IAAAA,qBAAA;MACnB,IAAAC,sBAAA,GAAmCvG,KAAA,CAAKI,KAAK,CAArCU,WAAW;QAAXA,WAAW,GAAAyF,sBAAA,cAAG3F,QAAA,GAAA2F,sBAAA;MACtB,IAAMxF,UAAU,GAAGH,QAAQ,GAAGE,WAAW;MACzCd,KAAA,CAAKgE,UAAU,CAAChE,KAAA,CAAK8D,aAAa,CAAC,CAAC,EAAE,CAAC/C,UAAU,CAAC;IACpD,CAAC;IAAAf,KAAA,CAGDwG,KAAK,GAAG,YAAM;MACZ,IAAAC,YAAA,GAAkCzG,KAAA,CAAKI,KAAK;QAApCG,KAAK,GAAAkG,YAAA,CAALlG,KAAK;QAAEC,cAAA,GAAAiG,YAAA,CAAAjG,cAAA;MACfD,KAAK,CAAC4D,QAAQ,CAAC,CAAC,CAAC;MACjB3D,cAAc,CAAC2D,QAAQ,CAAC,CAAC,CAAC;MAC1BnE,KAAA,CAAKoE,QAAQ,CAAC;QAAErB,QAAQ,EAAE;MAAE,CAAC,CAAC;IAChC,CAAC;IAtQC,IAAMxC,MAAK,GAAG,IAAItB,QAAQ,CAAC2C,KAAK,CAAC,CAAC,CAAC;IACnC5B,KAAA,CAAKI,KAAK,GAAG;MACXG,KAAK,EAALA,MAAK;MACLC,cAAc,EAAE,IAAIvB,QAAQ,CAAC2C,KAAK,CAAC,CAAC,CAAC;MACrCmB,QAAQ,EAAE,CAAC;MACXrC,SAAS,EAAEgG,SAAS;MACpB5F,WAAW,EAAE4F,SAAS;MACtB9F,QAAQ,EAAE8F;IACZ,CAAC;IACD1G,KAAA,CAAKG,mBAAmB,CAACJ,MAAK,EAAEC,KAAA,CAAKI,KAAK,CAAC;IAE3CJ,KAAA,CAAK2G,cAAc,GAAG1H,QAAQ,CAAC2H,KAAK,CAClC,CAAC;MAAEvE,WAAW,EAAE;QAAES,YAAY,EAAEvC;MAAM;IAAE,CAAC,CAAC,EAC1C;MAAEqE,eAAe,EAAE7E,MAAK,CAAC8E;IAAqB,CAChD,CAAC;IAAA,OAAA7E,KAAA;EACH;EAAA6G,SAAA,CAAAhH,SAAA,EAAAC,UAAA;EAAA,OAAAgH,YAAA,CAAAjH,SAAA;IAAAkH,GAAA;IAAAC,KAAA,EAEA,SAAAC,qBAAqBA,CAAClH,KAAqB,EAAEK,KAAqB,EAAE;MAClE,IACE,IAAI,CAACL,KAAK,CAACM,QAAQ,KAAKN,KAAK,CAACM,QAAQ,IACtC,IAAI,CAACN,KAAK,CAACoB,aAAa,KAAKpB,KAAK,CAACoB,aAAa,IAChD,IAAI,CAACpB,KAAK,CAACsB,cAAc,KAAKtB,KAAK,CAACsB,cAAc,IAClD,IAAI,CAACtB,KAAK,CAACO,iBAAiB,KAAKP,KAAK,CAACO,iBAAiB,IACxD,IAAI,CAACF,KAAK,CAACM,SAAS,KAAKN,KAAK,CAACM,SAAS,IACxC,IAAI,CAACN,KAAK,CAACU,WAAW,KAAKV,KAAK,CAACU,WAAW,IAC5C,IAAI,CAACV,KAAK,CAACQ,QAAQ,KAAKR,KAAK,CAACQ,QAAQ,EACtC;QACA,IAAI,CAACT,mBAAmB,CAACJ,KAAK,EAAEK,KAAK,CAAC;MACxC;MAEA,OAAO,IAAI;IACb;EAAA;IAAA2G,GAAA;IAAAC,KAAA,EAyOA,SAAAE,MAAMA,CAAA,EAAG;MAAA,IAAAC,MAAA;MACP,IAAQpE,QAAA,GAAa,IAAI,CAAC3C,KAAK,CAAvB2C,QAAA;MACR,IAAAqE,YAAA,GAMI,IAAI,CAACrH,KAAK;QALZsH,QAAQ,GAAAD,YAAA,CAARC,QAAQ;QACRC,iBAAiB,GAAAF,YAAA,CAAjBE,iBAAiB;QACjBC,kBAAkB,GAAAH,YAAA,CAAlBG,kBAAkB;QAAAC,qBAAA,GAAAJ,YAAA,CAClBK,sBAAsB;QAAtBA,sBAAsB,GAAAD,qBAAA,cAAG,EAAE,GAAAA,qBAAA;QAAAE,sBAAA,GAAAN,YAAA,CAC3BO,uBAAuB;QAAvBA,uBAAuB,GAAAD,sBAAA,cAAG,KAAAA,sBAAA;MAG5B,IAAME,IAAI,GAAGN,iBAAiB,IAC5B3H,KAAA,CAACV,QAAQ,CAACE,IAAI;QACZ0I,KAAK,EAAE,CACLC,MAAM,CAACC,WAAW,EAIlB;UAAEC,SAAS,EAAE,CAAC;YAAEC,UAAU,EAAE,IAAI,CAACpG;UAAqB,CAAC;QAAE,CAAC,CAC1D;QAAAwF,QAAA,GACDC,iBAAiB,CAAC,IAAI,CAAC3F,cAAc,EAAG,IAAI,CAACL,MAAM,EAAG,IAAI,CAAC,EAC5D7B,IAAA,CAACN,IAAI;UACH+I,QAAQ,EAAE,SAAVA,QAAQA,CAAAC,KAAA;YAAA,IAAK9F,WAAA,GAAA8F,KAAA,CAAA9F,WAAA;YAAA,OACX8E,MAAI,CAAC/C,QAAQ,CAAC;cAAE1D,SAAS,EAAE2B,WAAW,CAACwD,MAAM,CAACuC;YAAE,CAAC;UAAA;QAClD,CACF,CAAC;MAAA,CACW,CAChB;MAED,IAAMC,KAAK,GAAGd,kBAAkB,IAC9B5H,KAAA,CAACV,QAAQ,CAACE,IAAI;QACZ0I,KAAK,EAAE,CACLC,MAAM,CAACQ,YAAY,EACnB;UAAEN,SAAS,EAAE,CAAC;YAAEC,UAAU,EAAE,IAAI,CAAC/F;UAAsB,CAAC;QAAE,CAAC,CAC3D;QAAAmF,QAAA,GACDE,kBAAkB,CAAC,IAAI,CAACtF,eAAe,EAAG,IAAI,CAACX,MAAM,EAAG,IAAI,CAAC,EAC9D7B,IAAA,CAACN,IAAI;UACH+I,QAAQ,EAAE,SAAVA,QAAQA,CAAAK,KAAA;YAAA,IAAKlG,WAAA,GAAAkG,KAAA,CAAAlG,WAAA;YAAA,OACX8E,MAAI,CAAC/C,QAAQ,CAAC;cAAEtD,WAAW,EAAEuB,WAAW,CAACwD,MAAM,CAACuC;YAAE,CAAC;UAAA;QACpD,CACF,CAAC;MAAA,CACW,CAChB;MAED,OACE3I,IAAA,CAACJ,iBAAiB,EAAAkF,aAAA,CAAAA,aAAA;QAChBiE,aAAa,EAAE,CAAC,CAACb,uBAAuB,EAAEF,sBAAsB,CAAE;QAClEgB,WAAW,EAAC;MAAO,GACf,IAAI,CAAC1I,KAAK;QACd4G,cAAc,EAAE,IAAI,CAACA,cAAe;QACpClE,oBAAoB,EAAE,IAAI,CAACA,oBAAqB;QAAA4E,QAAA,EAChD1H,KAAA,CAACV,QAAQ,CAACE,IAAI;UACZ+I,QAAQ,EAAE,IAAI,CAACvC,WAAY;UAC3BkC,KAAK,EAAE,CAACC,MAAM,CAACY,SAAS,EAAE,IAAI,CAAC3I,KAAK,CAAC4I,cAAc,CAAE;UAAAtB,QAAA,GACpDO,IAAI,EACJS,KAAK,EACN5I,IAAA,CAACH,iBAAiB;YAChBsJ,OAAO,EAAE7F,QAAQ,KAAK,CAAE;YACxB0F,WAAW,EAAC,OAAO;YACnBhG,oBAAoB,EAAE,IAAI,CAACN,uBAAwB;YAAAkF,QAAA,EACnD5H,IAAA,CAACR,QAAQ,CAACE,IAAI;cACZ0J,aAAa,EAAE9F,QAAQ,KAAK,CAAC,GAAG,MAAM,GAAG,UAAW;cACpD8E,KAAK,EAAE,CACL;gBACEG,SAAS,EAAE,CAAC;kBAAEC,UAAU,EAAE,IAAI,CAAC3G;gBAAQ,CAAC;cAC1C,CAAC,EACD,IAAI,CAACvB,KAAK,CAAC+I,sBAAsB,CACjC;cAAAzB,QAAA,EACDA;YAAQ,CACI;UAAC,CACC,CAAC;QAAA,CACP;MAAA,EACE,CAAC;IAExB;EAAA;AAAA,EA7VqCrI,SAAS;AAA3Ba,SAAS,CAIrBkJ,YAAY,GAAG;EACpB1I,QAAQ,EAAE,CAAC;EACXC,iBAAiB,EAAE,CAAC;EACpBuE,mBAAmB,EAAE;AACvB,CAAC;AAAA,SARkBhF,SAAS,IAAAmJ,OAAA;AAgW9B,IAAMlB,MAAM,GAAG5I,UAAU,CAAC+J,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,QAAQ,EAAE;EACZ,CAAC;EACDnB,WAAW,EAAAxD,aAAA,CAAAA,aAAA,KACNrF,UAAU,CAACiK,kBAAkB;IAChCC,aAAa,EAAEhK,WAAW,CAACiK,KAAK,GAAG,aAAa,GAAG;EAAA,EACpD;EACDf,YAAY,EAAA/D,aAAA,CAAAA,aAAA,KACPrF,UAAU,CAACiK,kBAAkB;IAChCC,aAAa,EAAEhK,WAAW,CAACiK,KAAK,GAAG,KAAK,GAAG;EAAA;AAE/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}