{"ast":null,"code":"\"use strict\";\n\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from \"../../State\";\nimport { TouchEventType } from \"../../TouchEventType\";\nimport { findHandler, findOldGestureHandler } from \"../handlersRegistry\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar gestureStateManagers = new Map();\nvar lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nexport function onGestureHandlerEvent(event) {\n  var _handler$handlers, _handler$handlers2, _handler$handlers3, _handler$handlers4;\n  var handler = findHandler(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        handler.handlers.onBegin == null ? void 0 : handler.handlers.onBegin(event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        handler.handlers.onStart == null ? void 0 : handler.handlers.onStart(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd == null ? void 0 : handler.handlers.onEnd(event, true);\n        }\n        handler.handlers.onFinalize == null ? void 0 : handler.handlers.onFinalize(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd == null ? void 0 : handler.handlers.onEnd(event, false);\n        }\n        handler.handlers.onFinalize == null ? void 0 : handler.handlers.onFinalize(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(event.handlerTag, GestureStateManager.create(event.handlerTag));\n      }\n      var manager = gestureStateManagers.get(event.handlerTag);\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers = handler.handlers) == null ? void 0 : _handler$handlers.onTouchesDown == null ? void 0 : _handler$handlers.onTouchesDown(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers2 = handler.handlers) == null ? void 0 : _handler$handlers2.onTouchesMove == null ? void 0 : _handler$handlers2.onTouchesMove(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          (_handler$handlers3 = handler.handlers) == null ? void 0 : _handler$handlers3.onTouchesUp == null ? void 0 : _handler$handlers3.onTouchesUp(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers4 = handler.handlers) == null ? void 0 : _handler$handlers4.onTouchesCancelled == null ? void 0 : _handler$handlers4.onTouchesCancelled(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate == null ? void 0 : handler.handlers.onUpdate(event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange == null ? void 0 : handler.handlers.onChange(handler.handlers.changeEventCalculator == null ? void 0 : handler.handlers.changeEventCalculator(event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"names":["State","TouchEventType","findHandler","findOldGestureHandler","GestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","_handler$handlers","_handler$handlers2","_handler$handlers3","_handler$handlers4","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","delete","has","set","create","manager","get","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}