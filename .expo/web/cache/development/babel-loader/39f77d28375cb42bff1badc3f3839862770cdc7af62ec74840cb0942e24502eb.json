{"ast":null,"code":"\"use strict\";\n\nimport React from 'react';\nimport { isNewWebImplementationEnabled } from \"./EnableNewWebImplementation\";\nimport { Gestures, HammerGestures } from \"./web/Gestures\";\nimport InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport { GestureHandlerWebDelegate } from \"./web/tools/GestureHandlerWebDelegate\";\nvar shouldPreventDrop = false;\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass(new GestureHandlerWebDelegate()));\n      InteractionManager.instance.configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof Element || newView instanceof React.Component)) {\n      shouldPreventDrop = true;\n      var handler = isNewWebImplementationEnabled() ? NodeManager.getHandler(handlerTag) : HammerNodeManager.getHandler(handlerTag);\n      var handlerName = handler.constructor.name;\n      throw new Error(`${handlerName} with tag ${handlerTag} received child that is not valid HTML element.`);\n    }\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      InteractionManager.instance.configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (shouldPreventDrop) {\n      return;\n    }\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"names":["React","isNewWebImplementationEnabled","Gestures","HammerGestures","InteractionManager","NodeManager","HammerNodeManager","GestureHandlerWebDelegate","shouldPreventDrop","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","instance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","Element","Component","handler","constructor","name","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\RNGestureHandlerModule.web.ts"],"sourcesContent":["import React from 'react';\n\nimport type { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\nimport { Gestures, HammerGestures } from './web/Gestures';\nimport type { Config } from './web/interfaces';\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport { GestureHandlerWebDelegate } from './web/tools/GestureHandlerWebDelegate';\n\n// init method is called inside attachGestureHandler function. However, this function may\n// fail when received view is not valid HTML element. On the other hand, dropGestureHandler\n// will be called even if attach failed, which will result in crash.\n//\n// We use this flag to check whether or not dropGestureHandler should be called.\nlet shouldPreventDrop = false;\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(\n        handlerTag,\n        new GestureClass(new GestureHandlerWebDelegate())\n      );\n      InteractionManager.instance.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (!(newView instanceof Element || newView instanceof React.Component)) {\n      shouldPreventDrop = true;\n\n      const handler = isNewWebImplementationEnabled()\n        ? NodeManager.getHandler(handlerTag)\n        : HammerNodeManager.getHandler(handlerTag);\n\n      const handlerName = handler.constructor.name;\n\n      throw new Error(\n        `${handlerName} with tag ${handlerTag} received child that is not valid HTML element.`\n      );\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      // @ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      // @ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.instance.configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (shouldPreventDrop) {\n      return;\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}