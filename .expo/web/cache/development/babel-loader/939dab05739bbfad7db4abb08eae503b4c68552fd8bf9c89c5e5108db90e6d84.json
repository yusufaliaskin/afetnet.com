{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport CircularBuffer from \"./CircularBuffer\";\nimport LeastSquareSolver from \"./LeastSquareSolver\";\nvar VelocityTracker = function () {\n  function VelocityTracker() {\n    _classCallCheck(this, VelocityTracker);\n    this.assumePointerMoveStoppedMilliseconds = 40;\n    this.historySize = 20;\n    this.horizonMilliseconds = 300;\n    this.minSampleSize = 3;\n    this.samples = new CircularBuffer(this.historySize);\n  }\n  return _createClass(VelocityTracker, [{\n    key: \"add\",\n    value: function add(event) {\n      this.samples.push(event);\n    }\n  }, {\n    key: \"getVelocityEstimate\",\n    value: function getVelocityEstimate() {\n      var x = [];\n      var y = [];\n      var w = [];\n      var time = [];\n      var sampleCount = 0;\n      var index = this.samples.size - 1;\n      var newestSample = this.samples.get(index);\n      if (!newestSample) {\n        return null;\n      }\n      var previousSample = newestSample;\n      while (sampleCount < this.samples.size) {\n        var sample = this.samples.get(index);\n        var age = newestSample.time - sample.time;\n        var delta = Math.abs(sample.time - previousSample.time);\n        previousSample = sample;\n        if (age > this.horizonMilliseconds || delta > this.assumePointerMoveStoppedMilliseconds) {\n          break;\n        }\n        x.push(sample.x);\n        y.push(sample.y);\n        w.push(1);\n        time.push(-age);\n        sampleCount++;\n        index--;\n      }\n      if (sampleCount >= this.minSampleSize) {\n        var xSolver = new LeastSquareSolver(time, x, w);\n        var xFit = xSolver.solve(2);\n        if (xFit !== null) {\n          var ySolver = new LeastSquareSolver(time, y, w);\n          var yFit = ySolver.solve(2);\n          if (yFit !== null) {\n            var xVelocity = xFit.coefficients[1] * 1000;\n            var yVelocity = yFit.coefficients[1] * 1000;\n            return [xVelocity, yVelocity];\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"velocity\",\n    get: function get() {\n      var estimate = this.getVelocityEstimate();\n      if (estimate !== null) {\n        return estimate;\n      }\n      return [0, 0];\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.samples.clear();\n    }\n  }]);\n}();\nexport { VelocityTracker as default };","map":{"version":3,"names":["CircularBuffer","LeastSquareSolver","VelocityTracker","_classCallCheck","assumePointerMoveStoppedMilliseconds","historySize","horizonMilliseconds","minSampleSize","samples","_createClass","key","value","add","event","push","getVelocityEstimate","x","y","w","time","sampleCount","index","size","newestSample","get","previousSample","sample","age","delta","Math","abs","xSolver","xFit","solve","ySolver","yFit","xVelocity","coefficients","yVelocity","estimate","reset","clear","default"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\VelocityTracker.ts"],"sourcesContent":["import { AdaptedEvent } from '../interfaces';\nimport CircularBuffer from './CircularBuffer';\nimport LeastSquareSolver from './LeastSquareSolver';\n\nexport default class VelocityTracker {\n  private assumePointerMoveStoppedMilliseconds = 40;\n  private historySize = 20;\n  private horizonMilliseconds = 300;\n  private minSampleSize = 3;\n\n  private samples: CircularBuffer<AdaptedEvent>;\n\n  constructor() {\n    this.samples = new CircularBuffer<AdaptedEvent>(this.historySize);\n  }\n\n  public add(event: AdaptedEvent): void {\n    this.samples.push(event);\n  }\n\n  // Returns an estimate of the velocity of the object being tracked by the\n  // tracker given the current information available to the tracker.\n  //\n  // Information is added using [addPosition].\n  //\n  // Returns null if there is no data on which to base an estimate.\n  private getVelocityEstimate(): [number, number] | null {\n    const x = [];\n    const y = [];\n    const w = [];\n    const time = [];\n\n    let sampleCount = 0;\n    let index = this.samples.size - 1;\n    const newestSample = this.samples.get(index);\n    if (!newestSample) {\n      return null;\n    }\n\n    let previousSample = newestSample;\n\n    // Starting with the most recent PointAtTime sample, iterate backwards while\n    // the samples represent continuous motion.\n    while (sampleCount < this.samples.size) {\n      const sample = this.samples.get(index);\n\n      const age = newestSample.time - sample.time;\n      const delta = Math.abs(sample.time - previousSample.time);\n      previousSample = sample;\n\n      if (\n        age > this.horizonMilliseconds ||\n        delta > this.assumePointerMoveStoppedMilliseconds\n      ) {\n        break;\n      }\n\n      x.push(sample.x);\n      y.push(sample.y);\n      w.push(1);\n      time.push(-age);\n\n      sampleCount++;\n      index--;\n    }\n\n    if (sampleCount >= this.minSampleSize) {\n      const xSolver = new LeastSquareSolver(time, x, w);\n      const xFit = xSolver.solve(2);\n\n      if (xFit !== null) {\n        const ySolver = new LeastSquareSolver(time, y, w);\n        const yFit = ySolver.solve(2);\n\n        if (yFit !== null) {\n          const xVelocity = xFit.coefficients[1] * 1000;\n          const yVelocity = yFit.coefficients[1] * 1000;\n\n          return [xVelocity, yVelocity];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  public get velocity(): [number, number] {\n    const estimate = this.getVelocityEstimate();\n    if (estimate !== null) {\n      return estimate;\n    }\n    return [0, 0];\n  }\n\n  public reset(): void {\n    this.samples.clear();\n  }\n}\n"],"mappings":";;;;AACA,OAAOA,cAAc;AACrB,OAAOC,iBAAiB;AAA2B,IAE9BC,eAAe;EAQlC,SAAAA,gBAAA,EAAc;IAAAC,eAAA,OAAAD,eAAA;IAAA,KAPNE,oCAAoC,GAAG,EAAE;IAAA,KACzCC,WAAW,GAAG,EAAE;IAAA,KAChBC,mBAAmB,GAAG,GAAG;IAAA,KACzBC,aAAa,GAAG,CAAC;IAKvB,IAAI,CAACC,OAAO,GAAG,IAAIR,cAAc,CAAe,IAAI,CAACK,WAAW,CAAC;EACnE;EAAA,OAAAI,YAAA,CAAAP,eAAA;IAAAQ,GAAA;IAAAC,KAAA,EAEO,SAAAC,GAAGA,CAACC,KAAmB,EAAQ;MACpC,IAAI,CAACL,OAAO,CAACM,IAAI,CAACD,KAAK,CAAC;IAC1B;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAQQ,SAAAI,mBAAmBA,CAAA,EAA4B;MACrD,IAAMC,CAAC,GAAG,EAAE;MACZ,IAAMC,CAAC,GAAG,EAAE;MACZ,IAAMC,CAAC,GAAG,EAAE;MACZ,IAAMC,IAAI,GAAG,EAAE;MAEf,IAAIC,WAAW,GAAG,CAAC;MACnB,IAAIC,KAAK,GAAG,IAAI,CAACb,OAAO,CAACc,IAAI,GAAG,CAAC;MACjC,IAAMC,YAAY,GAAG,IAAI,CAACf,OAAO,CAACgB,GAAG,CAACH,KAAK,CAAC;MAC5C,IAAI,CAACE,YAAY,EAAE;QACjB,OAAO,IAAI;MACb;MAEA,IAAIE,cAAc,GAAGF,YAAY;MAIjC,OAAOH,WAAW,GAAG,IAAI,CAACZ,OAAO,CAACc,IAAI,EAAE;QACtC,IAAMI,MAAM,GAAG,IAAI,CAAClB,OAAO,CAACgB,GAAG,CAACH,KAAK,CAAC;QAEtC,IAAMM,GAAG,GAAGJ,YAAY,CAACJ,IAAI,GAAGO,MAAM,CAACP,IAAI;QAC3C,IAAMS,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,CAACP,IAAI,GAAGM,cAAc,CAACN,IAAI,CAAC;QACzDM,cAAc,GAAGC,MAAM;QAEvB,IACEC,GAAG,GAAG,IAAI,CAACrB,mBAAmB,IAC9BsB,KAAK,GAAG,IAAI,CAACxB,oCAAoC,EACjD;UACA;QACF;QAEAY,CAAC,CAACF,IAAI,CAACY,MAAM,CAACV,CAAC,CAAC;QAChBC,CAAC,CAACH,IAAI,CAACY,MAAM,CAACT,CAAC,CAAC;QAChBC,CAAC,CAACJ,IAAI,CAAC,CAAC,CAAC;QACTK,IAAI,CAACL,IAAI,CAAC,CAACa,GAAG,CAAC;QAEfP,WAAW,EAAE;QACbC,KAAK,EAAE;MACT;MAEA,IAAID,WAAW,IAAI,IAAI,CAACb,aAAa,EAAE;QACrC,IAAMwB,OAAO,GAAG,IAAI9B,iBAAiB,CAACkB,IAAI,EAAEH,CAAC,EAAEE,CAAC,CAAC;QACjD,IAAMc,IAAI,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC;QAE7B,IAAID,IAAI,KAAK,IAAI,EAAE;UACjB,IAAME,OAAO,GAAG,IAAIjC,iBAAiB,CAACkB,IAAI,EAAEF,CAAC,EAAEC,CAAC,CAAC;UACjD,IAAMiB,IAAI,GAAGD,OAAO,CAACD,KAAK,CAAC,CAAC,CAAC;UAE7B,IAAIE,IAAI,KAAK,IAAI,EAAE;YACjB,IAAMC,SAAS,GAAGJ,IAAI,CAACK,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI;YAC7C,IAAMC,SAAS,GAAGH,IAAI,CAACE,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI;YAE7C,OAAO,CAACD,SAAS,EAAEE,SAAS,CAAC;UAC/B;QACF;MACF;MAEA,OAAO,IAAI;IACb;EAAA;IAAA5B,GAAA;IAAAc,GAAA,EAEA,SAAAA,IAAA,EAAwC;MACtC,IAAMe,QAAQ,GAAG,IAAI,CAACxB,mBAAmB,CAAC,CAAC;MAC3C,IAAIwB,QAAQ,KAAK,IAAI,EAAE;QACrB,OAAOA,QAAQ;MACjB;MACA,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;IACf;EAAA;IAAA7B,GAAA;IAAAC,KAAA,EAEO,SAAA6B,KAAKA,CAAA,EAAS;MACnB,IAAI,CAAChC,OAAO,CAACiC,KAAK,CAAC,CAAC;IACtB;EAAA;AAAA;AAAA,SA5FmBvC,eAAe,IAAAwC,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}