{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _excluded = [\"enabled\", \"colors\", \"progressBackgroundColor\", \"size\"],\n  _excluded2 = [\"tintColor\", \"titleColor\", \"title\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport AndroidSwipeRefreshLayoutNativeComponent, { Commands as AndroidSwipeRefreshLayoutCommands } from \"./AndroidSwipeRefreshLayoutNativeComponent\";\nimport PullToRefreshViewNativeComponent, { Commands as PullToRefreshCommands } from \"./PullToRefreshViewNativeComponent\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Platform = require(\"../../Utilities/Platform\");\nvar React = require('react');\nvar RefreshControl = function (_React$Component) {\n  function RefreshControl() {\n    var _this;\n    _classCallCheck(this, RefreshControl);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, RefreshControl, [].concat(args));\n    _this._lastNativeRefreshing = false;\n    _this._onRefresh = function () {\n      _this._lastNativeRefreshing = true;\n      _this.props.onRefresh && _this.props.onRefresh();\n      _this.forceUpdate();\n    };\n    _this._setNativeRef = function (ref) {\n      _this._nativeRef = ref;\n    };\n    return _this;\n  }\n  _inherits(RefreshControl, _React$Component);\n  return _createClass(RefreshControl, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.refreshing !== prevProps.refreshing) {\n        this._lastNativeRefreshing = this.props.refreshing;\n      } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {\n        if (Platform.OS === 'android') {\n          AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        } else {\n          PullToRefreshCommands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n        }\n        this._lastNativeRefreshing = this.props.refreshing;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (Platform.OS === 'ios') {\n        var _this$props = this.props,\n          enabled = _this$props.enabled,\n          colors = _this$props.colors,\n          progressBackgroundColor = _this$props.progressBackgroundColor,\n          size = _this$props.size,\n          props = _objectWithoutProperties(_this$props, _excluded);\n        return _jsx(PullToRefreshViewNativeComponent, _objectSpread(_objectSpread({}, props), {}, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh\n        }));\n      } else {\n        var _this$props2 = this.props,\n          tintColor = _this$props2.tintColor,\n          titleColor = _this$props2.titleColor,\n          title = _this$props2.title,\n          _props = _objectWithoutProperties(_this$props2, _excluded2);\n        return _jsx(AndroidSwipeRefreshLayoutNativeComponent, _objectSpread(_objectSpread({}, _props), {}, {\n          ref: this._setNativeRef,\n          onRefresh: this._onRefresh\n        }));\n      }\n    }\n  }]);\n}(React.Component);\nmodule.exports = RefreshControl;","map":{"version":3,"names":["AndroidSwipeRefreshLayoutNativeComponent","Commands","AndroidSwipeRefreshLayoutCommands","PullToRefreshViewNativeComponent","PullToRefreshCommands","jsx","_jsx","Platform","require","React","RefreshControl","_React$Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_lastNativeRefreshing","_onRefresh","props","onRefresh","forceUpdate","_setNativeRef","ref","_nativeRef","_inherits","_createClass","key","value","componentDidMount","refreshing","componentDidUpdate","prevProps","OS","setNativeRefreshing","render","_this$props","enabled","colors","progressBackgroundColor","size","_objectWithoutProperties","_excluded","_objectSpread","_this$props2","tintColor","titleColor","title","_excluded2","Component","module","exports"],"sources":["C:/Users/Yusuf Ali Aşkın/Downloads/Desktop/proje_afetnet/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport AndroidSwipeRefreshLayoutNativeComponent, {\n  Commands as AndroidSwipeRefreshLayoutCommands,\n} from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, {\n  Commands as PullToRefreshCommands,\n} from './PullToRefreshViewNativeComponent';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator.\n   */\n  size?: ?('default' | 'large'),\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void | Promise<void>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  _nativeRef: ?React.ElementRef<\n    | typeof PullToRefreshViewNativeComponent\n    | typeof AndroidSwipeRefreshLayoutNativeComponent,\n  >;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._nativeRef\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      const {enabled, colors, progressBackgroundColor, size, ...props} =\n        this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    // $FlowFixMe[unused-promise]\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n\n  _setNativeRef = (\n    ref: ?React.ElementRef<\n      | typeof PullToRefreshViewNativeComponent\n      | typeof AndroidSwipeRefreshLayoutNativeComponent,\n    >,\n  ) => {\n    this._nativeRef = ref;\n  };\n}\n\nmodule.exports = RefreshControl;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}