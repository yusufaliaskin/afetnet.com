{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from 'axios';\nvar AFAD_API_BASE_URL = 'https://deprem.afad.gov.tr';\nvar AFAD_EVENT_FILTER_URL = 'https://deprem.afad.gov.tr/EventData/GetEventsByFilter';\nvar KANDILLI_API_URL = 'http://www.koeri.boun.edu.tr/scripts/lst0.asp';\nvar KANDILLI_JSON_URL = 'http://www.koeri.boun.edu.tr/scripts/lasteq.asp';\nvar TADAS_AFAD_URL = 'https://tadas.afad.gov.tr/api/earthquakes';\nvar KANDILLI_LIVE_API = 'https://api.orhanaydogdu.com.tr/deprem/kandilli/live';\nvar KANDILLI_ARCHIVE_API = 'https://api.orhanaydogdu.com.tr/deprem/kandilli/archive';\nvar EarthquakeService = function () {\n  function EarthquakeService() {\n    _classCallCheck(this, EarthquakeService);\n    this.apiClient = axios.create({\n      baseURL: AFAD_API_BASE_URL,\n      timeout: 15000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n  }\n  return _createClass(EarthquakeService, [{\n    key: \"formatDate\",\n    value: function formatDate(date) {\n      return date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0') + ' ' + String(date.getHours()).padStart(2, '0') + ':' + String(date.getMinutes()).padStart(2, '0') + ':' + String(date.getSeconds()).padStart(2, '0');\n    }\n  }, {\n    key: \"getEarthquakesByDateRange\",\n    value: (function () {\n      var _getEarthquakesByDateRange = _asyncToGenerator(function* (startDate, endDate) {\n        var minMagnitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        try {\n          var mockData = {\n            features: [{\n              properties: {\n                mag: 3.8,\n                eventid: '12352',\n                location: 'ANKARA MERKEZ (ANKARA)',\n                date: new Date(startDate).toISOString(),\n                latitude: 39.9334,\n                longitude: 32.8597,\n                depth: 10.2\n              }\n            }, {\n              properties: {\n                mag: 2.9,\n                eventid: '12353',\n                location: 'İZMİR MERKEZ (İZMİR)',\n                date: new Date(endDate).toISOString(),\n                latitude: 38.4192,\n                longitude: 27.1287,\n                depth: 7.8\n              }\n            }]\n          };\n          return this.formatEarthquakeData(mockData.features.filter(function (f) {\n            return f.properties.mag >= minMagnitude;\n          }));\n        } catch (error) {\n          console.error('Mock data hatası:', error);\n          throw new Error('Tarih aralığındaki deprem verileri alınamadı');\n        }\n      });\n      function getEarthquakesByDateRange(_x, _x2) {\n        return _getEarthquakesByDateRange.apply(this, arguments);\n      }\n      return getEarthquakesByDateRange;\n    }())\n  }, {\n    key: \"getKandilliLiveEarthquakes\",\n    value: (function () {\n      var _getKandilliLiveEarthquakes = _asyncToGenerator(function* () {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n        try {\n          console.log('Kandilli Rasathanesi Live API\\'sinden veri çekiliyor...');\n          var response = yield axios.get(KANDILLI_LIVE_API, {\n            timeout: 10000,\n            headers: {\n              'Accept': 'application/json',\n              'User-Agent': 'AfetNet Mobile App'\n            }\n          });\n          if (response.data && response.data.result && Array.isArray(response.data.result)) {\n            console.log('Kandilli Live API\\'sinden başarıyla veri alındı:', response.data.result.length, 'deprem');\n            var limitedData = response.data.result.slice(0, limit);\n            return this.formatKandilliLiveData(limitedData);\n          }\n          throw new Error('Kandilli Live API\\'den veri alınamadı');\n        } catch (error) {\n          console.error('Kandilli Live API bağlantı hatası:', error.message);\n          return this.getKandilliEarthquakesFallback(limit);\n        }\n      });\n      function getKandilliLiveEarthquakes() {\n        return _getKandilliLiveEarthquakes.apply(this, arguments);\n      }\n      return getKandilliLiveEarthquakes;\n    }())\n  }, {\n    key: \"getKandilliEarthquakesFallback\",\n    value: (function () {\n      var _getKandilliEarthquakesFallback = _asyncToGenerator(function* () {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n        try {\n          console.log('Kandilli Rasathanesi HTML API\\'sinden veri çekiliyor (fallback)...');\n          var response = yield axios.get(KANDILLI_API_URL, {\n            timeout: 10000,\n            headers: {\n              'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n              'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n            }\n          });\n          if (response.data) {\n            var earthquakes = this.parseKandilliData(response.data, limit);\n            console.log('Kandilli API\\'sinden başarıyla veri alındı:', earthquakes.length, 'deprem');\n            return earthquakes;\n          }\n          throw new Error('Kandilli API\\'den veri alınamadı');\n        } catch (error) {\n          console.error('Kandilli API bağlantı hatası:', error.message);\n          throw error;\n        }\n      });\n      function getKandilliEarthquakesFallback() {\n        return _getKandilliEarthquakesFallback.apply(this, arguments);\n      }\n      return getKandilliEarthquakesFallback;\n    }())\n  }, {\n    key: \"parseKandilliData\",\n    value: function parseKandilliData(htmlData) {\n      var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n      try {\n        var earthquakes = [];\n        var lines = htmlData.split('\\n');\n        var dataStarted = false;\n        for (var i = 0; i < lines.length && earthquakes.length < limit; i++) {\n          var line = lines[i].trim();\n          if (line.includes('Tarih      Saat      Enlem(N)  Boylam(E)')) {\n            dataStarted = true;\n            continue;\n          }\n          if (!dataStarted || line.length < 50) continue;\n          var match = line.match(/(\\d{4}\\.\\d{2}\\.\\d{2})\\s+(\\d{2}:\\d{2}:\\d{2})\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+(.+?)\\s+(\\w+)$/);\n          if (match) {\n            var _match = _slicedToArray(match, 11),\n              date = _match[1],\n              time = _match[2],\n              latitude = _match[3],\n              longitude = _match[4],\n              depth = _match[5],\n              md = _match[6],\n              ml = _match[7],\n              mw = _match[8],\n              location = _match[9],\n              quality = _match[10];\n            var magnitude = 0;\n            if (ml && ml !== '-.-' && parseFloat(ml) > 0) {\n              magnitude = parseFloat(ml);\n            } else if (mw && mw !== '-.-' && parseFloat(mw) > 0) {\n              magnitude = parseFloat(mw);\n            } else if (md && md !== '-.-' && parseFloat(md) > 0) {\n              magnitude = parseFloat(md);\n            }\n            if (magnitude > 0) {\n              var eventTime = new Date(`${date.replace(/\\./g, '-')}T${time}`);\n              earthquakes.push({\n                id: `kandilli_${date}_${time}_${latitude}_${longitude}`,\n                magnitude: magnitude,\n                location: location.trim(),\n                depth: parseFloat(depth) || 0,\n                time: eventTime,\n                coordinates: {\n                  latitude: parseFloat(latitude),\n                  longitude: parseFloat(longitude)\n                },\n                latitude: parseFloat(latitude),\n                longitude: parseFloat(longitude),\n                source: 'Kandilli Rasathanesi',\n                severity: this.calculateSeverity(magnitude),\n                distance: this.formatTimeAgo(eventTime),\n                region: location.trim(),\n                color: this.getSeverityColor(magnitude),\n                isAftershock: magnitude < 4.0,\n                type: magnitude < 4.0 ? 'Artçı Deprem' : 'Ana Deprem',\n                quality: quality,\n                formattedTime: eventTime.toLocaleString('tr-TR', {\n                  year: 'numeric',\n                  month: '2-digit',\n                  day: '2-digit',\n                  hour: '2-digit',\n                  minute: '2-digit',\n                  second: '2-digit'\n                }),\n                formattedDate: eventTime.toLocaleDateString('tr-TR', {\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })\n              });\n            }\n          }\n        }\n        return earthquakes;\n      } catch (error) {\n        console.error('Kandilli veri parse hatası:', error);\n        return [];\n      }\n    }\n  }, {\n    key: \"formatKandilliLiveData\",\n    value: function formatKandilliLiveData(rawData) {\n      var _this = this;\n      try {\n        return rawData.map(function (earthquake, index) {\n          var _earthquake$geojson, _earthquake$location_, _earthquake$location_2, _earthquake$location_3, _earthquake$location_4;\n          var eventTime = new Date(earthquake.date_time || earthquake.date);\n          var magnitude = parseFloat(earthquake.mag || earthquake.magnitude || 0);\n          var depth = parseFloat(earthquake.depth || 0);\n          var coordinates = ((_earthquake$geojson = earthquake.geojson) == null ? void 0 : _earthquake$geojson.coordinates) || [0, 0];\n          var longitude = parseFloat(coordinates[0]);\n          var latitude = parseFloat(coordinates[1]);\n          return {\n            id: earthquake.earthquake_id || `kandilli_${index}_${Date.now()}`,\n            magnitude: magnitude,\n            location: earthquake.title || 'Bilinmeyen Konum',\n            time: eventTime,\n            depth: depth,\n            coordinates: {\n              latitude: latitude,\n              longitude: longitude\n            },\n            latitude: latitude,\n            longitude: longitude,\n            source: 'Kandilli Rasathanesi',\n            provider: earthquake.provider || 'kandilli',\n            severity: _this.calculateSeverity(magnitude),\n            distance: _this.formatTimeAgo(eventTime),\n            region: earthquake.title || 'Bilinmeyen Bölge',\n            color: _this.getSeverityColor(magnitude),\n            isAftershock: magnitude < 4.0,\n            type: magnitude < 4.0 ? 'Artçı Deprem' : 'Ana Deprem',\n            quality: 'A',\n            formattedTime: eventTime.toLocaleString('tr-TR', {\n              year: 'numeric',\n              month: '2-digit',\n              day: '2-digit',\n              hour: '2-digit',\n              minute: '2-digit',\n              second: '2-digit'\n            }),\n            formattedDate: eventTime.toLocaleDateString('tr-TR', {\n              year: 'numeric',\n              month: 'long',\n              day: 'numeric'\n            }),\n            locationProperties: earthquake.location_properties,\n            closestCity: (_earthquake$location_ = earthquake.location_properties) == null ? void 0 : (_earthquake$location_2 = _earthquake$location_.closestCity) == null ? void 0 : _earthquake$location_2.name,\n            epiCenter: (_earthquake$location_3 = earthquake.location_properties) == null ? void 0 : (_earthquake$location_4 = _earthquake$location_3.epiCenter) == null ? void 0 : _earthquake$location_4.name,\n            rev: earthquake.rev,\n            created_at: earthquake.created_at\n          };\n        });\n      } catch (error) {\n        console.error('Kandilli Live veri formatı hatası:', error);\n        return [];\n      }\n    }\n  }, {\n    key: \"getLatestEarthquakes\",\n    value: (function () {\n      var _getLatestEarthquakes = _asyncToGenerator(function* () {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n        var minMagnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        try {\n          console.log('Ana kaynak AFAD API deneniyor...');\n          try {\n            var endDate = new Date();\n            var startDate = new Date(endDate.getTime() - 24 * 60 * 60 * 1000);\n            var result = yield this.getEarthquakesByDateRange(startDate, endDate, 0, limit, minMagnitude);\n            if (result && result.data && result.data.length > 0) {\n              console.log('AFAD API verisi kullanılıyor:', result.data.length, 'deprem');\n              return result.data;\n            }\n          } catch (afadError) {\n            console.log('AFAD API başarısız:', afadError.message);\n          }\n          console.log('Yedek kaynak Kandilli Rasathanesi deneniyor...');\n          try {\n            var kandilliData = yield this.getKandilliLiveEarthquakes(limit);\n            if (kandilliData && kandilliData.length > 0) {\n              var filteredData = kandilliData.filter(function (earthquake) {\n                return earthquake.magnitude >= minMagnitude;\n              });\n              if (filteredData.length > 0) {\n                console.log('Kandilli Rasathanesi verisi kullanılıyor:', filteredData.length, 'deprem');\n                return filteredData;\n              }\n            }\n          } catch (kandilliError) {\n            console.log('Kandilli API başarısız:', kandilliError.message);\n          }\n          console.log('İkinci yedek kaynak Kandilli Fallback deneniyor...');\n          try {\n            var fallbackData = yield this.getKandilliEarthquakesFallback(limit);\n            if (fallbackData && fallbackData.length > 0) {\n              var _filteredData = fallbackData.filter(function (earthquake) {\n                return earthquake.magnitude >= minMagnitude;\n              });\n              if (_filteredData.length > 0) {\n                console.log('Kandilli Fallback verisi kullanılıyor:', _filteredData.length, 'deprem');\n                return _filteredData;\n              }\n            }\n          } catch (fallbackError) {\n            console.log('Kandilli Fallback başarısız:', fallbackError.message);\n          }\n          throw new Error('Tüm veri kaynakları başarısız oldu');\n        } catch (error) {\n          console.error('Tüm API\\'ler başarısız:', error.message);\n          throw new Error('Veriler çekilemiyor. Lütfen internet bağlantınızı kontrol edin ve tekrar deneyin.');\n        }\n      });\n      function getLatestEarthquakes() {\n        return _getLatestEarthquakes.apply(this, arguments);\n      }\n      return getLatestEarthquakes;\n    }())\n  }, {\n    key: \"generateRealisticMockData\",\n    value: function generateRealisticMockData(limit, minMagnitude) {\n      var turkishCities = [{\n        name: 'İSTANBUL',\n        lat: 41.0082,\n        lon: 28.9784\n      }, {\n        name: 'ANKARA',\n        lat: 39.9334,\n        lon: 32.8597\n      }, {\n        name: 'İZMİR',\n        lat: 38.4192,\n        lon: 27.1287\n      }, {\n        name: 'BURSA',\n        lat: 40.1826,\n        lon: 29.0665\n      }, {\n        name: 'ANTALYA',\n        lat: 36.8969,\n        lon: 30.7133\n      }, {\n        name: 'ADANA',\n        lat: 37.0000,\n        lon: 35.3213\n      }, {\n        name: 'KONYA',\n        lat: 37.8667,\n        lon: 32.4833\n      }, {\n        name: 'GAZİANTEP',\n        lat: 37.0662,\n        lon: 37.3833\n      }, {\n        name: 'ŞANLIURFA',\n        lat: 37.1591,\n        lon: 38.7969\n      }, {\n        name: 'KAYSERİ',\n        lat: 38.7312,\n        lon: 35.4787\n      }, {\n        name: 'ESKİŞEHİR',\n        lat: 39.7767,\n        lon: 30.5206\n      }, {\n        name: 'DİYARBAKIR',\n        lat: 37.9144,\n        lon: 40.2306\n      }, {\n        name: 'SAMSUN',\n        lat: 41.2928,\n        lon: 36.3313\n      }, {\n        name: 'DENİZLİ',\n        lat: 37.7765,\n        lon: 29.0864\n      }, {\n        name: 'MALATYA',\n        lat: 38.3552,\n        lon: 38.3095\n      }, {\n        name: 'ERZURUM',\n        lat: 39.9334,\n        lon: 41.2769\n      }, {\n        name: 'VAN',\n        lat: 38.4891,\n        lon: 43.4089\n      }, {\n        name: 'ELAZIĞ',\n        lat: 38.6748,\n        lon: 39.2226\n      }, {\n        name: 'BINGÖL',\n        lat: 38.8845,\n        lon: 40.4957\n      }, {\n        name: 'MUŞ',\n        lat: 38.9462,\n        lon: 41.7539\n      }];\n      var mockData = [];\n      var now = new Date();\n      for (var i = 0; i < limit; i++) {\n        var city = turkishCities[Math.floor(Math.random() * turkishCities.length)];\n        var magnitude = Math.max(minMagnitude, Math.random() * 4 + 1.5);\n        var timeOffset = Math.random() * 24 * 60 * 60 * 1000;\n        var eventTime = new Date(now.getTime() - timeOffset);\n        var latVariation = (Math.random() - 0.5) * 0.5;\n        var lonVariation = (Math.random() - 0.5) * 0.5;\n        mockData.push({\n          properties: {\n            mag: parseFloat(magnitude.toFixed(1)),\n            eventid: `mock_${Date.now()}_${i}`,\n            location: `${city.name} MERKEZ (${city.name})`,\n            date: eventTime.toISOString(),\n            latitude: city.lat + latVariation,\n            longitude: city.lon + lonVariation,\n            depth: Math.random() * 20 + 2,\n            type: Math.random() > 0.8 ? 'aftershock' : 'earthquake'\n          }\n        });\n      }\n      return mockData.sort(function (a, b) {\n        return new Date(b.properties.date) - new Date(a.properties.date);\n      });\n    }\n  }, {\n    key: \"getEarthquakesByLocation\",\n    value: (function () {\n      var _getEarthquakesByLocation = _asyncToGenerator(function* (lat, lon) {\n        var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n        var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;\n        try {\n          var mockData = {\n            features: [{\n              properties: {\n                mag: 4.2,\n                eventid: '12350',\n                location: 'İSTANBUL MERKEZ (İSTANBUL)',\n                date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                latitude: lat + (Math.random() - 0.5) * 0.1,\n                longitude: lon + (Math.random() - 0.5) * 0.1,\n                depth: 8.5\n              }\n            }, {\n              properties: {\n                mag: 3.1,\n                eventid: '12351',\n                location: 'BÖLGE YAKIN (ŞEHIR)',\n                date: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                latitude: lat + (Math.random() - 0.5) * 0.2,\n                longitude: lon + (Math.random() - 0.5) * 0.2,\n                depth: 12.3\n              }\n            }]\n          };\n          return this.formatEarthquakeData(mockData.features.slice(0, limit));\n        } catch (error) {\n          console.error('Mock data hatası:', error);\n          throw new Error('Bölgesel deprem verileri alınamadı');\n        }\n      });\n      function getEarthquakesByLocation(_x3, _x4) {\n        return _getEarthquakesByLocation.apply(this, arguments);\n      }\n      return getEarthquakesByLocation;\n    }())\n  }, {\n    key: \"formatNewEarthquakeData\",\n    value: function formatNewEarthquakeData(rawData) {\n      var _this2 = this;\n      return rawData.map(function (event) {\n        var eventTime = new Date(event.EventDate);\n        var magnitude = parseFloat(event.Magnitude) || 0;\n        var isAftershock = event.EventType === 'aftershock' || magnitude < 4.0;\n        return {\n          id: event.EventID || Math.random().toString(36).substr(2, 9),\n          magnitude: magnitude,\n          location: event.LocationName || 'Bilinmeyen Konum',\n          depth: parseFloat(event.Depth) || 0,\n          time: eventTime,\n          coordinates: {\n            latitude: parseFloat(event.Latitude) || 0,\n            longitude: parseFloat(event.Longitude) || 0\n          },\n          latitude: parseFloat(event.Latitude) || 0,\n          longitude: parseFloat(event.Longitude) || 0,\n          source: 'AFAD',\n          severity: _this2.calculateSeverity(magnitude),\n          distance: _this2.formatTimeAgo(eventTime),\n          region: event.Province || event.District || 'Türkiye',\n          color: _this2.getSeverityColor(magnitude),\n          isAftershock: isAftershock,\n          type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n          formattedTime: eventTime.toLocaleString('tr-TR', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }),\n          formattedDate: eventTime.toLocaleDateString('tr-TR', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        };\n      });\n    }\n  }, {\n    key: \"formatEarthquakeData\",\n    value: function formatEarthquakeData(rawData) {\n      var _this3 = this;\n      return rawData.map(function (earthquake) {\n        var properties = earthquake.properties;\n        var magnitude = parseFloat(properties.mag || properties.magnitude) || 0;\n        var eventTime = new Date(properties.date || properties.time || properties.eventtime);\n        var isAftershock = properties.type === 'aftershock';\n        return {\n          id: properties.eventid || properties.id || Math.random().toString(36).substr(2, 9),\n          magnitude: magnitude,\n          location: properties.location || properties.place || 'Bilinmeyen Konum',\n          depth: parseFloat(properties.depth) || 0,\n          time: eventTime,\n          coordinates: {\n            latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n            longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0)\n          },\n          latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n          longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0),\n          source: 'AFAD',\n          severity: _this3.calculateSeverity(magnitude),\n          distance: _this3.formatTimeAgo(eventTime),\n          region: properties.region || 'Türkiye',\n          color: _this3.getSeverityColor(magnitude),\n          isAftershock: isAftershock,\n          type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n          formattedTime: eventTime.toLocaleString('tr-TR', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }),\n          formattedDate: eventTime.toLocaleDateString('tr-TR', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        };\n      });\n    }\n  }, {\n    key: \"calculateSeverity\",\n    value: function calculateSeverity(magnitude) {\n      if (magnitude >= 7.0) return 'Çok Yüksek';\n      if (magnitude >= 6.0) return 'Yüksek';\n      if (magnitude >= 5.0) return 'Orta';\n      if (magnitude >= 4.0) return 'Düşük';\n      return 'Çok Düşük';\n    }\n  }, {\n    key: \"calculateDistance\",\n    value: function calculateDistance(lat1, lon1, lat2, lon2) {\n      var R = 6371;\n      var dLat = this.toRadians(lat2 - lat1);\n      var dLon = this.toRadians(lon2 - lon1);\n      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c;\n    }\n  }, {\n    key: \"toRadians\",\n    value: function toRadians(degrees) {\n      return degrees * (Math.PI / 180);\n    }\n  }, {\n    key: \"formatTimeAgo\",\n    value: function formatTimeAgo(date) {\n      var now = new Date();\n      var diffMs = now - date;\n      var diffMins = Math.floor(diffMs / 60000);\n      var diffHours = Math.floor(diffMins / 60);\n      var diffDays = Math.floor(diffHours / 24);\n      if (diffMins < 1) return 'Şimdi';\n      if (diffMins < 60) return `${diffMins} dk önce`;\n      if (diffHours < 24) return `${diffHours} sa önce`;\n      return `${diffDays} gün önce`;\n    }\n  }, {\n    key: \"getSeverityColor\",\n    value: function getSeverityColor(magnitude) {\n      if (magnitude >= 7.0) return '#FF3B30';\n      if (magnitude >= 6.0) return '#FF9500';\n      if (magnitude >= 5.0) return '#FFCC00';\n      if (magnitude >= 4.0) return '#34C759';\n      return '#007AFF';\n    }\n  }]);\n}();\nvar earthquakeService = new EarthquakeService();\nexport default earthquakeService;","map":{"version":3,"names":["axios","AFAD_API_BASE_URL","AFAD_EVENT_FILTER_URL","KANDILLI_API_URL","KANDILLI_JSON_URL","TADAS_AFAD_URL","KANDILLI_LIVE_API","KANDILLI_ARCHIVE_API","EarthquakeService","_classCallCheck","apiClient","create","baseURL","timeout","headers","_createClass","key","value","formatDate","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","_getEarthquakesByDateRange","_asyncToGenerator","startDate","endDate","minMagnitude","arguments","length","undefined","mockData","features","properties","mag","eventid","location","Date","toISOString","latitude","longitude","depth","formatEarthquakeData","filter","f","error","console","Error","getEarthquakesByDateRange","_x","_x2","apply","_getKandilliLiveEarthquakes","limit","log","response","get","data","result","Array","isArray","limitedData","slice","formatKandilliLiveData","message","getKandilliEarthquakesFallback","getKandilliLiveEarthquakes","_getKandilliEarthquakesFallback","earthquakes","parseKandilliData","htmlData","lines","split","dataStarted","i","line","trim","includes","match","_match","_slicedToArray","time","md","ml","mw","quality","magnitude","parseFloat","eventTime","replace","push","id","coordinates","source","severity","calculateSeverity","distance","formatTimeAgo","region","color","getSeverityColor","isAftershock","type","formattedTime","toLocaleString","year","month","day","hour","minute","second","formattedDate","toLocaleDateString","rawData","_this","map","earthquake","index","_earthquake$geojson","_earthquake$location_","_earthquake$location_2","_earthquake$location_3","_earthquake$location_4","date_time","geojson","earthquake_id","now","title","provider","locationProperties","location_properties","closestCity","name","epiCenter","rev","created_at","_getLatestEarthquakes","getTime","afadError","kandilliData","filteredData","kandilliError","fallbackData","fallbackError","getLatestEarthquakes","generateRealisticMockData","turkishCities","lat","lon","city","Math","floor","random","max","timeOffset","latVariation","lonVariation","toFixed","sort","a","b","_getEarthquakesByLocation","radius","getEarthquakesByLocation","_x3","_x4","formatNewEarthquakeData","_this2","event","EventDate","Magnitude","EventType","EventID","toString","substr","LocationName","Depth","Latitude","Longitude","Province","District","_this3","eventtime","place","geometry","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","toRadians","dLon","sin","cos","c","atan2","sqrt","degrees","PI","diffMs","diffMins","diffHours","diffDays","earthquakeService"],"sources":["C:/Users/Yusuf Ali Aşkın/Desktop/proje_afetnet/src/services/earthquakeService.js"],"sourcesContent":["import axios from 'axios';\n\nconst AFAD_API_BASE_URL = 'https://deprem.afad.gov.tr';\nconst AFAD_EVENT_FILTER_URL = 'https://deprem.afad.gov.tr/EventData/GetEventsByFilter';\nconst KANDILLI_API_URL = 'http://www.koeri.boun.edu.tr/scripts/lst0.asp';\nconst KANDILLI_JSON_URL = 'http://www.koeri.boun.edu.tr/scripts/lasteq.asp';\nconst TADAS_AFAD_URL = 'https://tadas.afad.gov.tr/api/earthquakes';\n\n// Kandilli Rasathanesi API - Ücretsiz ve canlı güncellenen\nconst KANDILLI_LIVE_API = 'https://api.orhanaydogdu.com.tr/deprem/kandilli/live';\nconst KANDILLI_ARCHIVE_API = 'https://api.orhanaydogdu.com.tr/deprem/kandilli/archive';\n\nclass EarthquakeService {\n  constructor() {\n    this.apiClient = axios.create({\n      baseURL: AFAD_API_BASE_URL,\n      timeout: 15000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * AFAD API için tarih formatı: YYYY-MM-DD HH:mm:ss\n   */\n  formatDate(date) {\n    return date.getFullYear() + '-' + \n           String(date.getMonth() + 1).padStart(2, '0') + '-' + \n           String(date.getDate()).padStart(2, '0') + ' ' + \n           String(date.getHours()).padStart(2, '0') + ':' + \n           String(date.getMinutes()).padStart(2, '0') + ':' + \n           String(date.getSeconds()).padStart(2, '0');\n  }\n\n  /**\n   * Belirli tarih aralığındaki deprem verilerini getirir\n   * @param {Date} startDate - Başlangıç tarihi\n   * @param {Date} endDate - Bitiş tarihi\n   * @param {number} skip - Atlanacak kayıt sayısı (pagination için)\n   * @param {number} take - Alınacak kayıt sayısı\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByDateRange(startDate, endDate, skip = 0, take = 100, minMagnitude = 0) {\n    try {\n      const eventFilter = {\n        EventSearchFilterList: [\n          { FilterType: 8, Value: startDate.toISOString() },\n          { FilterType: 9, Value: endDate.toISOString() }\n        ],\n        Skip: skip,\n        Take: take,\n        SortDescriptor: { field: 'eventDate', dir: 'desc' }\n      };\n\n      const response = await axios.post(AFAD_EVENT_FILTER_URL, eventFilter, {\n        timeout: 15000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n      });\n\n      if (response.data && response.data.Data && Array.isArray(response.data.Data)) {\n        console.log('AFAD API\\'sinden başarıyla veri alındı:', response.data.Data.length, 'deprem');\n        \n        // Minimum büyüklük filtresi uygula\n        const filteredData = response.data.Data.filter(event => \n          parseFloat(event.Magnitude) >= minMagnitude\n        );\n        \n        return {\n          data: this.formatNewEarthquakeData(filteredData),\n          totalCount: response.data.TotalCount || filteredData.length,\n          hasMore: (skip + take) < (response.data.TotalCount || 0)\n        };\n      }\n      \n      throw new Error('API\\'den veri alınamadı');\n    } catch (error) {\n      console.error('AFAD API bağlantı hatası:', error.message);\n      throw new Error('Veriler çekilemiyor. Lütfen internet bağlantınızı kontrol edin ve tekrar deneyin.');\n    }\n  }\n\n  /**\n   * Kandilli Rasathanesi Live API'sinden canlı deprem verilerini çeker\n   * @param {number} limit - Getirilecek deprem sayısı\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getKandilliLiveEarthquakes(limit = 50) {\n    try {\n      console.log('Kandilli Rasathanesi Live API\\'sinden veri çekiliyor...');\n      \n      const response = await axios.get(KANDILLI_LIVE_API, {\n        timeout: 10000,\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'AfetNet Mobile App'\n        }\n      });\n\n      if (response.data && response.data.result && Array.isArray(response.data.result)) {\n        console.log('Kandilli Live API\\'sinden başarıyla veri alındı:', response.data.result.length, 'deprem');\n        \n        const limitedData = response.data.result.slice(0, limit);\n        return this.formatKandilliLiveData(limitedData);\n      }\n      \n      throw new Error('Kandilli Live API\\'den veri alınamadı');\n    } catch (error) {\n      console.error('Kandilli Live API bağlantı hatası:', error.message);\n      // Fallback olarak eski Kandilli API'sini dene\n      return this.getKandilliEarthquakesFallback(limit);\n    }\n  }\n\n  /**\n   * Kandilli Rasathanesi'nden deprem verilerini çeker (Fallback method)\n   * @param {number} limit - Getirilecek deprem sayısı\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getKandilliEarthquakesFallback(limit = 50) {\n    try {\n      console.log('Kandilli Rasathanesi HTML API\\'sinden veri çekiliyor (fallback)...');\n      \n      // Kandilli API'sinden HTML formatında veri çek\n      const response = await axios.get(KANDILLI_API_URL, {\n        timeout: 10000,\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'\n        }\n      });\n\n      if (response.data) {\n        const earthquakes = this.parseKandilliData(response.data, limit);\n        console.log('Kandilli API\\'sinden başarıyla veri alındı:', earthquakes.length, 'deprem');\n        return earthquakes;\n      }\n      \n      throw new Error('Kandilli API\\'den veri alınamadı');\n    } catch (error) {\n      console.error('Kandilli API bağlantı hatası:', error.message);\n      throw error;\n    }\n  }\n\n  /**\n   * Kandilli HTML verisini parse eder\n   * @param {string} htmlData - HTML formatındaki veri\n   * @param {number} limit - Maksimum deprem sayısı\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  parseKandilliData(htmlData, limit = 50) {\n    try {\n      const earthquakes = [];\n      const lines = htmlData.split('\\n');\n      let dataStarted = false;\n      \n      for (let i = 0; i < lines.length && earthquakes.length < limit; i++) {\n        const line = lines[i].trim();\n        \n        // Veri başlangıcını bul\n        if (line.includes('Tarih      Saat      Enlem(N)  Boylam(E)')) {\n          dataStarted = true;\n          continue;\n        }\n        \n        if (!dataStarted || line.length < 50) continue;\n        \n        // Veri satırını parse et\n        const match = line.match(/(\\d{4}\\.\\d{2}\\.\\d{2})\\s+(\\d{2}:\\d{2}:\\d{2})\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+([\\d\\.-]+)\\s+(.+?)\\s+(\\w+)$/);\n        \n        if (match) {\n          const [, date, time, latitude, longitude, depth, md, ml, mw, location, quality] = match;\n          \n          // Büyüklük değerini belirle (ML > MW > MD önceliği)\n          let magnitude = 0;\n          if (ml && ml !== '-.-' && parseFloat(ml) > 0) {\n            magnitude = parseFloat(ml);\n          } else if (mw && mw !== '-.-' && parseFloat(mw) > 0) {\n            magnitude = parseFloat(mw);\n          } else if (md && md !== '-.-' && parseFloat(md) > 0) {\n            magnitude = parseFloat(md);\n          }\n          \n          if (magnitude > 0) {\n            const eventTime = new Date(`${date.replace(/\\./g, '-')}T${time}`);\n            \n            earthquakes.push({\n              id: `kandilli_${date}_${time}_${latitude}_${longitude}`,\n              magnitude: magnitude,\n              location: location.trim(),\n              depth: parseFloat(depth) || 0,\n              time: eventTime,\n              coordinates: {\n                latitude: parseFloat(latitude),\n                longitude: parseFloat(longitude)\n              },\n              latitude: parseFloat(latitude),\n              longitude: parseFloat(longitude),\n              source: 'Kandilli Rasathanesi',\n              severity: this.calculateSeverity(magnitude),\n              distance: this.formatTimeAgo(eventTime),\n              region: location.trim(),\n              color: this.getSeverityColor(magnitude),\n              isAftershock: magnitude < 4.0,\n              type: magnitude < 4.0 ? 'Artçı Deprem' : 'Ana Deprem',\n              quality: quality,\n              formattedTime: eventTime.toLocaleString('tr-TR', {\n                year: 'numeric',\n                month: '2-digit',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit'\n              }),\n              formattedDate: eventTime.toLocaleDateString('tr-TR', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric'\n              })\n            });\n          }\n        }\n      }\n      \n      return earthquakes;\n    } catch (error) {\n      console.error('Kandilli veri parse hatası:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Kandilli Live API verilerini formatlar\n   * @param {Array} rawData - Ham API verisi\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  formatKandilliLiveData(rawData) {\n    try {\n      return rawData.map((earthquake, index) => {\n        const eventTime = new Date(earthquake.date_time || earthquake.date);\n        const magnitude = parseFloat(earthquake.mag || earthquake.magnitude || 0);\n        const depth = parseFloat(earthquake.depth || 0);\n        const coordinates = earthquake.geojson?.coordinates || [0, 0];\n        const longitude = parseFloat(coordinates[0]);\n        const latitude = parseFloat(coordinates[1]);\n        \n        return {\n          id: earthquake.earthquake_id || `kandilli_${index}_${Date.now()}`,\n          magnitude: magnitude,\n          location: earthquake.title || 'Bilinmeyen Konum',\n          time: eventTime,\n          depth: depth,\n          coordinates: {\n            latitude: latitude,\n            longitude: longitude\n          },\n          latitude: latitude,\n          longitude: longitude,\n          source: 'Kandilli Rasathanesi',\n          provider: earthquake.provider || 'kandilli',\n          severity: this.calculateSeverity(magnitude),\n          distance: this.formatTimeAgo(eventTime),\n          region: earthquake.title || 'Bilinmeyen Bölge',\n          color: this.getSeverityColor(magnitude),\n          isAftershock: magnitude < 4.0,\n          type: magnitude < 4.0 ? 'Artçı Deprem' : 'Ana Deprem',\n          quality: 'A', // Kandilli verisi genelde kaliteli\n          formattedTime: eventTime.toLocaleString('tr-TR', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }),\n          formattedDate: eventTime.toLocaleDateString('tr-TR', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          }),\n          locationProperties: earthquake.location_properties,\n          closestCity: earthquake.location_properties?.closestCity?.name,\n          epiCenter: earthquake.location_properties?.epiCenter?.name,\n          rev: earthquake.rev,\n          created_at: earthquake.created_at\n        };\n      });\n    } catch (error) {\n      console.error('Kandilli Live veri formatı hatası:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Son deprem verilerini getirir (Kandilli Live API öncelikli)\n   * @param {number} limit - Getirilecek deprem sayısı (varsayılan: 50)\n   * @param {number} minMagnitude - Minimum büyüklük (varsayılan: 0)\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getLatestEarthquakes(limit = 50, minMagnitude = 0) {\n    try {\n      // 1. Öncelik: AFAD API'sini dene\n      console.log('Ana kaynak AFAD API deneniyor...');\n      try {\n        const endDate = new Date();\n        const startDate = new Date(endDate.getTime() - (24 * 60 * 60 * 1000)); // 1 gün öncesi\n        \n        const result = await this.getEarthquakesByDateRange(startDate, endDate, 0, limit, minMagnitude);\n        if (result && result.data && result.data.length > 0) {\n          console.log('AFAD API verisi kullanılıyor:', result.data.length, 'deprem');\n          return result.data;\n        }\n      } catch (afadError) {\n        console.log('AFAD API başarısız:', afadError.message);\n      }\n      \n      // 2. Yedek Kaynak 1: Kandilli Rasathanesi\n      console.log('Yedek kaynak Kandilli Rasathanesi deneniyor...');\n      try {\n        const kandilliData = await this.getKandilliLiveEarthquakes(limit);\n        \n        if (kandilliData && kandilliData.length > 0) {\n          // Minimum büyüklük filtresi uygula\n          const filteredData = kandilliData.filter(earthquake => \n            earthquake.magnitude >= minMagnitude\n          );\n          \n          if (filteredData.length > 0) {\n            console.log('Kandilli Rasathanesi verisi kullanılıyor:', filteredData.length, 'deprem');\n            return filteredData;\n          }\n        }\n      } catch (kandilliError) {\n        console.log('Kandilli API başarısız:', kandilliError.message);\n      }\n      \n      // 3. Yedek Kaynak 2: Kandilli Fallback (HTML parsing)\n      console.log('İkinci yedek kaynak Kandilli Fallback deneniyor...');\n      try {\n        const fallbackData = await this.getKandilliEarthquakesFallback(limit);\n        \n        if (fallbackData && fallbackData.length > 0) {\n          const filteredData = fallbackData.filter(earthquake => \n            earthquake.magnitude >= minMagnitude\n          );\n          \n          if (filteredData.length > 0) {\n            console.log('Kandilli Fallback verisi kullanılıyor:', filteredData.length, 'deprem');\n            return filteredData;\n          }\n        }\n      } catch (fallbackError) {\n        console.log('Kandilli Fallback başarısız:', fallbackError.message);\n      }\n      \n      // Tüm kaynaklar başarısız\n      throw new Error('Tüm veri kaynakları başarısız oldu');\n      \n    } catch (error) {\n      console.error('Tüm API\\'ler başarısız:', error.message);\n      \n      // Gerçek API hatası durumunda hata fırlat\n      throw new Error('Veriler çekilemiyor. Lütfen internet bağlantınızı kontrol edin ve tekrar deneyin.');\n    }\n  }\n\n  /**\n   * Gerçekçi mock deprem verileri üretir\n   * @param {number} limit - Üretilecek deprem sayısı\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Array} Mock deprem verileri\n   */\n  generateRealisticMockData(limit, minMagnitude) {\n    const turkishCities = [\n      { name: 'İSTANBUL', lat: 41.0082, lon: 28.9784 },\n      { name: 'ANKARA', lat: 39.9334, lon: 32.8597 },\n      { name: 'İZMİR', lat: 38.4192, lon: 27.1287 },\n      { name: 'BURSA', lat: 40.1826, lon: 29.0665 },\n      { name: 'ANTALYA', lat: 36.8969, lon: 30.7133 },\n      { name: 'ADANA', lat: 37.0000, lon: 35.3213 },\n      { name: 'KONYA', lat: 37.8667, lon: 32.4833 },\n      { name: 'GAZİANTEP', lat: 37.0662, lon: 37.3833 },\n      { name: 'ŞANLIURFA', lat: 37.1591, lon: 38.7969 },\n      { name: 'KAYSERİ', lat: 38.7312, lon: 35.4787 },\n      { name: 'ESKİŞEHİR', lat: 39.7767, lon: 30.5206 },\n      { name: 'DİYARBAKIR', lat: 37.9144, lon: 40.2306 },\n      { name: 'SAMSUN', lat: 41.2928, lon: 36.3313 },\n      { name: 'DENİZLİ', lat: 37.7765, lon: 29.0864 },\n      { name: 'MALATYA', lat: 38.3552, lon: 38.3095 },\n      { name: 'ERZURUM', lat: 39.9334, lon: 41.2769 },\n      { name: 'VAN', lat: 38.4891, lon: 43.4089 },\n      { name: 'ELAZIĞ', lat: 38.6748, lon: 39.2226 },\n      { name: 'BINGÖL', lat: 38.8845, lon: 40.4957 },\n      { name: 'MUŞ', lat: 38.9462, lon: 41.7539 }\n    ];\n\n    const mockData = [];\n    const now = new Date();\n\n    for (let i = 0; i < limit; i++) {\n      const city = turkishCities[Math.floor(Math.random() * turkishCities.length)];\n      const magnitude = Math.max(minMagnitude, (Math.random() * 4 + 1.5)); // 1.5-5.5 arası\n      const timeOffset = Math.random() * 24 * 60 * 60 * 1000; // Son 24 saat içinde\n      const eventTime = new Date(now.getTime() - timeOffset);\n      \n      // Koordinatlara küçük varyasyon ekle\n      const latVariation = (Math.random() - 0.5) * 0.5;\n      const lonVariation = (Math.random() - 0.5) * 0.5;\n\n      mockData.push({\n        properties: {\n          mag: parseFloat(magnitude.toFixed(1)),\n          eventid: `mock_${Date.now()}_${i}`,\n          location: `${city.name} MERKEZ (${city.name})`,\n          date: eventTime.toISOString(),\n          latitude: city.lat + latVariation,\n          longitude: city.lon + lonVariation,\n          depth: Math.random() * 20 + 2, // 2-22 km arası derinlik\n          type: Math.random() > 0.8 ? 'aftershock' : 'earthquake' // %20 artçı deprem\n        }\n      });\n    }\n\n    return mockData.sort((a, b) => new Date(b.properties.date) - new Date(a.properties.date));\n  }\n\n  /**\n   * Belirli bir bölgedeki depremleri getirir\n   * @param {number} lat - Enlem\n   * @param {number} lon - Boylam\n   * @param {number} radius - Yarıçap (km)\n   * @param {number} limit - Getirilecek deprem sayısı\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByLocation(lat, lon, radius = 100, limit = 20) {\n    try {\n      // Geçici mock data - API bağlantı sorunu nedeniyle\n      const mockData = {\n        features: [\n          {\n            properties: {\n              mag: 4.2,\n              eventid: '12350',\n              location: 'İSTANBUL MERKEZ (İSTANBUL)',\n              date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n              latitude: lat + (Math.random() - 0.5) * 0.1,\n              longitude: lon + (Math.random() - 0.5) * 0.1,\n              depth: 8.5\n            }\n          },\n          {\n            properties: {\n              mag: 3.1,\n              eventid: '12351',\n              location: 'BÖLGE YAKIN (ŞEHIR)',\n              date: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n              latitude: lat + (Math.random() - 0.5) * 0.2,\n              longitude: lon + (Math.random() - 0.5) * 0.2,\n              depth: 12.3\n            }\n          }\n        ]\n      };\n\n      return this.formatEarthquakeData(mockData.features.slice(0, limit));\n    } catch (error) {\n      console.error('Mock data hatası:', error);\n      throw new Error('Bölgesel deprem verileri alınamadı');\n    }\n  }\n\n  /**\n   * Belirli bir tarih aralığındaki depremleri getirir\n   * @param {string} startDate - Başlangıç tarihi (YYYY-MM-DD)\n   * @param {string} endDate - Bitiş tarihi (YYYY-MM-DD)\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByDateRange(startDate, endDate, minMagnitude = 0) {\n    try {\n      // Geçici mock data - API bağlantı sorunu nedeniyle\n      const mockData = {\n        features: [\n          {\n            properties: {\n              mag: 3.8,\n              eventid: '12352',\n              location: 'ANKARA MERKEZ (ANKARA)',\n              date: new Date(startDate).toISOString(),\n              latitude: 39.9334,\n              longitude: 32.8597,\n              depth: 10.2\n            }\n          },\n          {\n            properties: {\n              mag: 2.9,\n              eventid: '12353',\n              location: 'İZMİR MERKEZ (İZMİR)',\n              date: new Date(endDate).toISOString(),\n              latitude: 38.4192,\n              longitude: 27.1287,\n              depth: 7.8\n            }\n          }\n        ]\n      };\n\n      return this.formatEarthquakeData(mockData.features.filter(f => f.properties.mag >= minMagnitude));\n    } catch (error) {\n      console.error('Mock data hatası:', error);\n      throw new Error('Tarih aralığındaki deprem verileri alınamadı');\n    }\n  }\n\n  /**\n   * Yeni AFAD API formatındaki deprem verilerini formatlar\n   * @param {Array} rawData - Ham deprem verileri\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  formatNewEarthquakeData(rawData) {\n    return rawData.map(event => {\n      const eventTime = new Date(event.EventDate);\n      const magnitude = parseFloat(event.Magnitude) || 0;\n      const isAftershock = event.EventType === 'aftershock' || magnitude < 4.0;\n      \n      return {\n        id: event.EventID || Math.random().toString(36).substr(2, 9),\n        magnitude: magnitude,\n        location: event.LocationName || 'Bilinmeyen Konum',\n        depth: parseFloat(event.Depth) || 0,\n        time: eventTime,\n        coordinates: {\n          latitude: parseFloat(event.Latitude) || 0,\n          longitude: parseFloat(event.Longitude) || 0\n        },\n        latitude: parseFloat(event.Latitude) || 0,\n        longitude: parseFloat(event.Longitude) || 0,\n        source: 'AFAD',\n        severity: this.calculateSeverity(magnitude),\n        distance: this.formatTimeAgo(eventTime),\n        region: event.Province || event.District || 'Türkiye',\n        color: this.getSeverityColor(magnitude),\n        isAftershock: isAftershock,\n        type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n        formattedTime: eventTime.toLocaleString('tr-TR', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        }),\n        formattedDate: eventTime.toLocaleDateString('tr-TR', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      };\n    });\n  }\n\n  /**\n   * Eski API formatındaki deprem verilerini formatlar (fallback için)\n   * @param {Array} rawData - Ham deprem verileri\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  formatEarthquakeData(rawData) {\n    return rawData.map(earthquake => {\n      const properties = earthquake.properties;\n      \n      const magnitude = parseFloat(properties.mag || properties.magnitude) || 0;\n      const eventTime = new Date(properties.date || properties.time || properties.eventtime);\n      const isAftershock = properties.type === 'aftershock';\n      \n      return {\n        id: properties.eventid || properties.id || Math.random().toString(36).substr(2, 9),\n        magnitude: magnitude,\n        location: properties.location || properties.place || 'Bilinmeyen Konum',\n        depth: parseFloat(properties.depth) || 0,\n        time: eventTime,\n        coordinates: {\n          latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n          longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0)\n        },\n        latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n        longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0),\n        source: 'AFAD',\n        severity: this.calculateSeverity(magnitude),\n        distance: this.formatTimeAgo(eventTime),\n        region: properties.region || 'Türkiye',\n        color: this.getSeverityColor(magnitude),\n        isAftershock: isAftershock,\n        type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n        formattedTime: eventTime.toLocaleString('tr-TR', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        }),\n        formattedDate: eventTime.toLocaleDateString('tr-TR', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      };\n    });\n  }\n\n  /**\n   * Deprem büyüklüğüne göre şiddet seviyesi hesaplar\n   * @param {number} magnitude - Deprem büyüklüğü\n   * @returns {string} Şiddet seviyesi\n   */\n  calculateSeverity(magnitude) {\n    if (magnitude >= 7.0) return 'Çok Yüksek';\n    if (magnitude >= 6.0) return 'Yüksek';\n    if (magnitude >= 5.0) return 'Orta';\n    if (magnitude >= 4.0) return 'Düşük';\n    return 'Çok Düşük';\n  }\n\n  /**\n   * İki koordinat arasındaki mesafeyi hesaplar (km)\n   * @param {number} lat1 - İlk nokta enlemi\n   * @param {number} lon1 - İlk nokta boylamı\n   * @param {number} lat2 - İkinci nokta enlemi\n   * @param {number} lon2 - İkinci nokta boylamı\n   * @returns {number} Mesafe (km)\n   */\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Dünya'nın yarıçapı (km)\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * Dereceyi radyana çevirir\n   * @param {number} degrees - Derece değeri\n   * @returns {number} Radian değeri\n   */\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  /**\n   * Zamanı \"X dakika/saat/gün önce\" formatında döndürür\n   * @param {Date} date - Deprem zamanı\n   * @returns {string} Formatlanmış zaman\n   */\n  formatTimeAgo(date) {\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMins < 1) return 'Şimdi';\n    if (diffMins < 60) return `${diffMins} dk önce`;\n    if (diffHours < 24) return `${diffHours} sa önce`;\n    return `${diffDays} gün önce`;\n  }\n\n  /**\n   * Deprem büyüklüğüne göre renk döndürür\n   * @param {number} magnitude - Deprem büyüklüğü\n   * @returns {string} Renk kodu\n   */\n  getSeverityColor(magnitude) {\n    if (magnitude >= 7.0) return '#FF3B30'; // Kırmızı - Çok Yüksek\n    if (magnitude >= 6.0) return '#FF9500'; // Turuncu - Yüksek\n    if (magnitude >= 5.0) return '#FFCC00'; // Sarı - Orta\n    if (magnitude >= 4.0) return '#34C759'; // Yeşil - Düşük\n    return '#007AFF'; // Mavi - Çok Düşük\n  }\n}\n\n// Singleton instance\nconst earthquakeService = new EarthquakeService();\nexport default earthquakeService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}