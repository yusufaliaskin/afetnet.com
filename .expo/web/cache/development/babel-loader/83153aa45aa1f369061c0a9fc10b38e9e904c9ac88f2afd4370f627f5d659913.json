{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport BlobRegistry from \"./BlobRegistry\";\nimport { NativeBlobModule } from \"./NativeBlobModule\";\nvar BLOB_URL_PREFIX = null;\nif (NativeBlobModule && typeof NativeBlobModule.getConstants === 'function') {\n  var _NativeBlobModule$get = NativeBlobModule.getConstants();\n  BLOB_URL_PREFIX = _NativeBlobModule$get.BLOB_URL_PREFIX;\n}\nvar Blob = function () {\n  function Blob() {\n    var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n    _classCallCheck(this, Blob);\n    var blobId = BlobRegistry.register(this);\n    this._data = {\n      blobId: blobId,\n      offset: 0,\n      size: 0,\n      name: options ? options.name : '',\n      type: options && options.type ? options.type.toLowerCase() : '',\n      lastModified: options ? options.lastModified || Date.now() : Date.now()\n    };\n    this._data.size = this._calculateSize(parts);\n    this._data.offset = 0;\n    if (NativeBlobModule) {\n      NativeBlobModule.createFromParts(parts, blobId);\n    }\n  }\n  return _createClass(Blob, [{\n    key: \"_calculateSize\",\n    value: function _calculateSize(parts) {\n      return parts.reduce(function (acc, part) {\n        if (typeof part === 'string') {\n          return acc + new TextEncoder().encode(part).length;\n        } else if (part instanceof Blob) {\n          return acc + part.size;\n        }\n        return acc;\n      }, 0);\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(start, end, contentType) {\n      var _this$_data = this._data,\n        offset = _this$_data.offset,\n        size = _this$_data.size;\n      var begin = start == null ? 0 : start;\n      var finish = end == null ? size : end;\n      if (begin < 0) {\n        begin = Math.max(size + begin, 0);\n      }\n      if (finish < 0) {\n        finish = Math.max(size + finish, 0);\n      }\n      begin = Math.min(begin, size);\n      finish = Math.min(finish, size);\n      finish = Math.max(finish, begin);\n      var blob = Object.create(Blob.prototype);\n      blob._data = {\n        blobId: BlobRegistry.register(blob),\n        offset: offset + begin,\n        size: finish - begin,\n        type: contentType || this._data.type || ''\n      };\n      return blob;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._data ? this._data.size : 0;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._data ? this._data.type : '';\n    }\n  }, {\n    key: \"_throwIfClosed\",\n    value: function _throwIfClosed() {\n      if (!this._data) {\n        throw new Error('Blob has been closed and is no longer available');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this._data) {\n        BlobRegistry.unregister(this._data.blobId);\n        if (NativeBlobModule) {\n          NativeBlobModule.release(this._data.blobId);\n        }\n      }\n      this._data = null;\n    }\n  }, {\n    key: \"_blobId\",\n    get: function get() {\n      return this._data ? this._data.blobId : '';\n    }\n  }, {\n    key: \"_offset\",\n    get: function get() {\n      return this._data ? this._data.offset : 0;\n    }\n  }]);\n}();\nmodule.exports = Blob;","map":{"version":3,"names":["_classCallCheck","_createClass","BlobRegistry","NativeBlobModule","BLOB_URL_PREFIX","getConstants","_NativeBlobModule$get","Blob","parts","arguments","length","undefined","options","blobId","register","_data","offset","size","name","type","toLowerCase","lastModified","Date","now","_calculateSize","createFromParts","key","value","reduce","acc","part","TextEncoder","encode","slice","start","end","contentType","_this$_data","begin","finish","Math","max","min","blob","Object","create","prototype","get","_throwIfClosed","Error","close","unregister","release","module","exports"],"sources":["C:/Users/Yusuf Ali Aşkın/Desktop/proje_afetnet/node_modules/react-native/Libraries/Blob/Blob.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\nimport BlobRegistry from './BlobRegistry';\nimport {NativeBlobModule} from './NativeBlobModule';\n\nlet BLOB_URL_PREFIX = null;\n\nif (NativeBlobModule && typeof NativeBlobModule.getConstants === 'function') {\n  ({BLOB_URL_PREFIX} = NativeBlobModule.getConstants());\n}\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n * ```\n * class WebSocketImage extends React.Component {\n *    state = {blob: null};\n *    componentDidMount() {\n *      let ws = this.ws = new WebSocket(...);\n *      ws.binaryType = 'blob';\n *      ws.onmessage = (event) => {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.setState({blob: event.data});\n *      };\n *    }\n *    componentUnmount() {\n *      if (this.state.blob) {\n *        this.state.blob.close();\n *      }\n *      this.ws.close();\n *    }\n *    render() {\n *      if (!this.state.blob) {\n *        return <View />;\n *      }\n *      return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *    }\n * }\n * ```\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  _data: ?BlobData;\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\n    const blobId = BlobRegistry.register(this);\n    this._data = {\n      blobId,\n      offset: 0,\n      size: 0,\n      name: options ? options.name : '',\n      type: options && options.type ? options.type.toLowerCase() : '',\n      lastModified: options ? options.lastModified || Date.now() : Date.now(),\n    };\n\n    this._data.size = this._calculateSize(parts);\n    this._data.offset = 0;\n\n    if (NativeBlobModule) {\n      NativeBlobModule.createFromParts(parts, blobId);\n    }\n  }\n\n  _calculateSize(parts: Array<Blob | string>): number {\n    return parts.reduce((acc, part) => {\n      if (typeof part === 'string') {\n        return acc + new TextEncoder().encode(part).length;\n      } else if (part instanceof Blob) {\n        return acc + part.size;\n      }\n      return acc;\n    }, 0);\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  slice(start?: number, end?: number, contentType?: string): Blob {\n    let {offset, size} = this._data;\n    let begin = start == null ? 0 : start;\n    let finish = end == null ? size : end;\n\n    // Handle negative indices\n    if (begin < 0) {\n      begin = Math.max(size + begin, 0);\n    }\n    if (finish < 0) {\n      finish = Math.max(size + finish, 0);\n    }\n\n    // Clamp to valid range\n    begin = Math.min(begin, size);\n    finish = Math.min(finish, size);\n    finish = Math.max(finish, begin);\n\n    const blob = Object.create(Blob.prototype);\n    blob._data = {\n      blobId: BlobRegistry.register(blob),\n      offset: offset + begin,\n      size: finish - begin,\n      type: contentType || this._data.type || '',\n    };\n    return blob;\n  }\n\n  /**\n   * This method is used to get the number of bytes of data contained\n   * within the Blob object.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/size\n   */\n  get size(): number {\n    return this._data ? this._data.size : 0;\n  }\n\n  /**\n   * This method is used to get the media type of the Blob object.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/type\n   */\n  get type(): string {\n    return this._data ? this._data.type : '';\n  }\n\n  /*\n   * If the blob has been closed, throw an error any time a method\n   * is called.\n   */\n  _throwIfClosed() {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n  }\n\n  /*\n   * Close the blob and release its underlying resources.\n   *\n   * This is a non-standard method that may be called on a Blob instance\n   * to release its underlying resources as soon as possible. This is\n   * important on iOS in particular because the number of Blobs that can be\n   * stored in memory at once is limited. Disposing of a Blob by calling\n   * this method will remove it from that limit.\n   */\n  close() {\n    if (this._data) {\n      BlobRegistry.unregister(this._data.blobId);\n      if (NativeBlobModule) {\n        NativeBlobModule.release(this._data.blobId);\n      }\n    }\n    this._data = null;\n  }\n\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  get _blobId(): string {\n    return this._data ? this._data.blobId : '';\n  }\n\n  /**\n   * Offset of the data contained in the Blob object, in bytes.\n   */\n  get _offset(): number {\n    return this._data ? this._data.offset : 0;\n  }\n}\n\nmodule.exports = Blob;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}