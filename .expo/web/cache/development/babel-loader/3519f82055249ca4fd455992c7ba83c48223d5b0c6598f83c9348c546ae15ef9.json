{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _superPropGet(t, o, e, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(e, t); } : p; }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { ContinousBaseGesture } from \"./gesture\";\nfunction changeEventCalculator(current, previous) {\n  'worklet';\n\n  var changePayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY\n    };\n  }\n  return _objectSpread(_objectSpread({}, current), changePayload);\n}\nexport var PanGesture = function (_ContinousBaseGesture) {\n  function PanGesture() {\n    var _this;\n    _classCallCheck(this, PanGesture);\n    _this = _callSuper(this, PanGesture);\n    _this.config = {};\n    _this.handlerName = 'PanGestureHandler';\n    return _this;\n  }\n  _inherits(PanGesture, _ContinousBaseGesture);\n  return _createClass(PanGesture, [{\n    key: \"activeOffsetY\",\n    value: function activeOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetYStart = offset[0];\n        this.config.activeOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetYStart = offset;\n      } else {\n        this.config.activeOffsetYEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"activeOffsetX\",\n    value: function activeOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.activeOffsetXStart = offset[0];\n        this.config.activeOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.activeOffsetXStart = offset;\n      } else {\n        this.config.activeOffsetXEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"failOffsetY\",\n    value: function failOffsetY(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetYStart = offset[0];\n        this.config.failOffsetYEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetYStart = offset;\n      } else {\n        this.config.failOffsetYEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"failOffsetX\",\n    value: function failOffsetX(offset) {\n      if (Array.isArray(offset)) {\n        this.config.failOffsetXStart = offset[0];\n        this.config.failOffsetXEnd = offset[1];\n      } else if (offset < 0) {\n        this.config.failOffsetXStart = offset;\n      } else {\n        this.config.failOffsetXEnd = offset;\n      }\n      return this;\n    }\n  }, {\n    key: \"minPointers\",\n    value: function minPointers(_minPointers) {\n      this.config.minPointers = _minPointers;\n      return this;\n    }\n  }, {\n    key: \"maxPointers\",\n    value: function maxPointers(_maxPointers) {\n      this.config.maxPointers = _maxPointers;\n      return this;\n    }\n  }, {\n    key: \"minDistance\",\n    value: function minDistance(distance) {\n      this.config.minDist = distance;\n      return this;\n    }\n  }, {\n    key: \"minVelocity\",\n    value: function minVelocity(velocity) {\n      this.config.minVelocity = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityX\",\n    value: function minVelocityX(velocity) {\n      this.config.minVelocityX = velocity;\n      return this;\n    }\n  }, {\n    key: \"minVelocityY\",\n    value: function minVelocityY(velocity) {\n      this.config.minVelocityY = velocity;\n      return this;\n    }\n  }, {\n    key: \"averageTouches\",\n    value: function averageTouches(value) {\n      this.config.avgTouches = value;\n      return this;\n    }\n  }, {\n    key: \"enableTrackpadTwoFingerGesture\",\n    value: function enableTrackpadTwoFingerGesture(value) {\n      this.config.enableTrackpadTwoFingerGesture = value;\n      return this;\n    }\n  }, {\n    key: \"activateAfterLongPress\",\n    value: function activateAfterLongPress(duration) {\n      this.config.activateAfterLongPress = duration;\n      return this;\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(callback) {\n      this.handlers.changeEventCalculator = changeEventCalculator;\n      return _superPropGet(PanGesture, \"onChange\", this, 3)([callback]);\n    }\n  }]);\n}(ContinousBaseGesture);","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","changeX","translationX","changeY","translationY","_objectSpread","PanGesture","_ContinousBaseGesture","_this","_classCallCheck","_callSuper","config","handlerName","_inherits","_createClass","key","value","activeOffsetY","offset","Array","isArray","activeOffsetYStart","activeOffsetYEnd","activeOffsetX","activeOffsetXStart","activeOffsetXEnd","failOffsetY","failOffsetYStart","failOffsetYEnd","failOffsetX","failOffsetXStart","failOffsetXEnd","minPointers","maxPointers","minDistance","distance","minDist","minVelocity","velocity","minVelocityX","minVelocityY","averageTouches","avgTouches","enableTrackpadTwoFingerGesture","activateAfterLongPress","duration","onChange","callback","handlers","_superPropGet"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\panGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport { PanGestureConfig } from '../PanGestureHandler';\nimport type { PanGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\n\nexport type PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  /**\n   * Range along Y axis (in points) where fingers travels without activation of gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#activeoffsetyvalue-number--number\n   */\n  activeOffsetY(\n    offset: number | [activeOffsetYStart: number, activeOffsetYEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * Range along X axis (in points) where fingers travels without activation of gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#activeoffsetxvalue-number--number\n   */\n  activeOffsetX(\n    offset: number | [activeOffsetXStart: number, activeOffsetXEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * When the finger moves outside this range (in points) along Y axis and gesture hasn't yet activated it will fail recognizing the gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#failoffsetyvalue-number--number\n   */\n  failOffsetY(\n    offset: number | [failOffsetYStart: number, failOffsetYEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * When the finger moves outside this range (in points) along X axis and gesture hasn't yet activated it will fail recognizing the gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#failoffsetxvalue-number--number\n   */\n  failOffsetX(\n    offset: number | [failOffsetXStart: number, failOffsetXEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * A number of fingers that is required to be placed before gesture can activate. Should be a higher or equal to 0 integer.\n   * @param minPointers\n   */\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  /**\n   * When the given number of fingers is placed on the screen and gesture hasn't yet activated it will fail recognizing the gesture.\n   * Should be a higher or equal to 0 integer.\n   * @param maxPointers\n   */\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  /**\n   * Minimum distance the finger (or multiple finger) need to travel before the gesture activates.\n   * Expressed in points.\n   * @param distance\n   */\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  /**\n   * Minimum velocity the finger has to reach in order to activate handler.\n   * @param velocity\n   */\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  /**\n   * Minimum velocity along X axis the finger has to reach in order to activate handler.\n   * @param velocity\n   */\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  /**\n   * Minimum velocity along Y axis the finger has to reach in order to activate handler.\n   * @param velocity\n   */\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  /**\n   * #### Android only\n   * Android, by default, will calculate translation values based on the position of the leading pointer (the first one that was placed on the screen).\n   * This modifier allows that behavior to be changed to the one that is default on iOS - the averaged position of all active pointers will be used to calculate the translation values.\n   * @param value\n   */\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  /**\n   * #### iOS only\n   * Enables two-finger gestures on supported devices, for example iPads with trackpads.\n   * @param value\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture/#enabletrackpadtwofingergesturevalue-boolean-ios-only\n   */\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  /**\n   * Duration in milliseconds of the LongPress gesture before Pan is allowed to activate.\n   * @param duration\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture/#activateafterlongpressduration-number\n   */\n  activateAfterLongPress(duration: number) {\n    this.config.activateAfterLongPress = duration;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}