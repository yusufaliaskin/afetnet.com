{"ast":null,"code":"\"use strict\";\n\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { isRNSVGElement } from \"./web/utils\";\nexport default function findNodeHandle(viewRef) {\n  if (viewRef instanceof FlatList) {\n    return viewRef._listRef._scrollRef.firstChild;\n  }\n  if ((viewRef == null ? void 0 : viewRef.viewTag) !== undefined) {\n    return findNodeHandle(viewRef.viewTag);\n  }\n  if (viewRef instanceof Element) {\n    if (viewRef.style.display === 'contents') {\n      return findNodeHandle(viewRef.firstChild);\n    }\n    return viewRef;\n  }\n  if (isRNSVGElement(viewRef)) {\n    return viewRef.elementRef.current;\n  }\n  var element = viewRef == null ? void 0 : viewRef.current;\n  while (element && element.style.display === 'contents') {\n    element = element.firstChild;\n  }\n  return element;\n}","map":{"version":3,"names":["isRNSVGElement","findNodeHandle","viewRef","FlatList","_listRef","_scrollRef","firstChild","viewTag","undefined","Element","style","display","elementRef","current","element"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\findNodeHandle.web.ts"],"sourcesContent":["import { FlatList } from 'react-native';\nimport type { GestureHandlerRef, SVGRef } from './web/interfaces';\nimport { isRNSVGElement } from './web/utils';\n\nexport default function findNodeHandle(\n  viewRef: GestureHandlerRef | SVGRef | HTMLElement | SVGElement\n): HTMLElement | SVGElement | number {\n  // TODO: Remove this once we remove old API.\n  if (viewRef instanceof FlatList) {\n    // @ts-ignore This is the only way to get the scroll ref from FlatList.\n    return viewRef._listRef._scrollRef.firstChild;\n  }\n  // Old API assumes that child handler is HTMLElement.\n  // However, if we nest handlers, we will get ref to another handler.\n  // In that case, we want to recursively call findNodeHandle with new handler viewTag (which can also be ref to another handler).\n  if ((viewRef as GestureHandlerRef)?.viewTag !== undefined) {\n    return findNodeHandle((viewRef as GestureHandlerRef).viewTag);\n  }\n\n  if (viewRef instanceof Element) {\n    if (viewRef.style.display === 'contents') {\n      return findNodeHandle(viewRef.firstChild as HTMLElement);\n    }\n\n    return viewRef;\n  }\n\n  if (isRNSVGElement(viewRef)) {\n    return (viewRef as SVGRef).elementRef.current;\n  }\n\n  // In new API, we receive ref object which `current` field points to  wrapper `div` with `display: contents;`.\n  // We want to return the first descendant (in DFS order) that doesn't have this property.\n  let element = (viewRef as GestureHandlerRef)?.current;\n\n  while (element && element.style.display === 'contents') {\n    element = element.firstChild as HTMLElement;\n  }\n\n  return element;\n}\n"],"mappings":";;;AAEA,SAASA,cAAc;AAEvB,eAAe,SAASC,cAAcA,CACpCC,OAA8D,EAC3B;EAEnC,IAAIA,OAAO,YAAYC,QAAQ,EAAE;IAE/B,OAAOD,OAAO,CAACE,QAAQ,CAACC,UAAU,CAACC,UAAU;EAC/C;EAIA,IAAK,CAAAJ,OAAO,oBAAPA,OAAO,CAAwBK,OAAO,MAAKC,SAAS,EAAE;IACzD,OAAOP,cAAc,CAAEC,OAAO,CAAuBK,OAAO,CAAC;EAC/D;EAEA,IAAIL,OAAO,YAAYO,OAAO,EAAE;IAC9B,IAAIP,OAAO,CAACQ,KAAK,CAACC,OAAO,KAAK,UAAU,EAAE;MACxC,OAAOV,cAAc,CAACC,OAAO,CAACI,UAAyB,CAAC;IAC1D;IAEA,OAAOJ,OAAO;EAChB;EAEA,IAAIF,cAAc,CAACE,OAAO,CAAC,EAAE;IAC3B,OAAQA,OAAO,CAAYU,UAAU,CAACC,OAAO;EAC/C;EAIA,IAAIC,OAAO,GAAIZ,OAAO,oBAAPA,OAAO,CAAwBW,OAAO;EAErD,OAAOC,OAAO,IAAIA,OAAO,CAACJ,KAAK,CAACC,OAAO,KAAK,UAAU,EAAE;IACtDG,OAAO,GAAGA,OAAO,CAACR,UAAyB;EAC7C;EAEA,OAAOQ,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}