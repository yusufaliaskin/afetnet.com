{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport findNodeHandle from \"../../findNodeHandle\";\nimport PointerEventManager from \"./PointerEventManager\";\nimport { State } from \"../../State\";\nimport { isPointerInBounds as _isPointerInBounds } from \"../utils\";\nimport { MouseButton } from \"../../handlers/gestureHandlerCommon\";\nimport KeyboardEventManager from \"./KeyboardEventManager\";\nimport WheelEventManager from \"./WheelEventManager\";\nexport var GestureHandlerWebDelegate = function () {\n  function GestureHandlerWebDelegate() {\n    _classCallCheck(this, GestureHandlerWebDelegate);\n    this.isInitialized = false;\n    this.eventManagers = [];\n    this.defaultViewStyles = {\n      userSelect: '',\n      touchAction: ''\n    };\n  }\n  return _createClass(GestureHandlerWebDelegate, [{\n    key: \"init\",\n    value: function init(viewRef, handler) {\n      var _this = this;\n      if (!viewRef) {\n        throw new Error(`Cannot find HTML Element for handler ${handler.handlerTag}`);\n      }\n      this.isInitialized = true;\n      this.gestureHandler = handler;\n      this.view = findNodeHandle(viewRef);\n      this.defaultViewStyles = {\n        userSelect: this.view.style.userSelect,\n        touchAction: this.view.style.touchAction\n      };\n      var config = handler.config;\n      this.setUserSelect(config.enabled);\n      this.setTouchAction(config.enabled);\n      this.setContextMenu(config.enabled);\n      this.eventManagers.push(new PointerEventManager(this.view));\n      this.eventManagers.push(new KeyboardEventManager(this.view));\n      this.eventManagers.push(new WheelEventManager(this.view));\n      this.eventManagers.forEach(function (manager) {\n        return _this.gestureHandler.attachEventManager(manager);\n      });\n    }\n  }, {\n    key: \"isPointerInBounds\",\n    value: function isPointerInBounds(_ref) {\n      var x = _ref.x,\n        y = _ref.y;\n      return _isPointerInBounds(this.view, {\n        x: x,\n        y: y\n      });\n    }\n  }, {\n    key: \"measureView\",\n    value: function measureView() {\n      var rect = this.view.getBoundingClientRect();\n      return {\n        pageX: rect.left,\n        pageY: rect.top,\n        width: rect.width,\n        height: rect.height\n      };\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.eventManagers.forEach(function (manager) {\n        return manager.resetManager();\n      });\n    }\n  }, {\n    key: \"tryResetCursor\",\n    value: function tryResetCursor() {\n      var config = this.gestureHandler.config;\n      if (config.activeCursor && config.activeCursor !== 'auto' && this.gestureHandler.state === State.ACTIVE) {\n        this.view.style.cursor = 'auto';\n      }\n    }\n  }, {\n    key: \"shouldDisableContextMenu\",\n    value: function shouldDisableContextMenu(config) {\n      return config.enableContextMenu === undefined && this.gestureHandler.isButtonInConfig(MouseButton.RIGHT) || config.enableContextMenu === false;\n    }\n  }, {\n    key: \"addContextMenuListeners\",\n    value: function addContextMenuListeners(config) {\n      if (this.shouldDisableContextMenu(config)) {\n        this.view.addEventListener('contextmenu', this.disableContextMenu);\n      } else if (config.enableContextMenu) {\n        this.view.addEventListener('contextmenu', this.enableContextMenu);\n      }\n    }\n  }, {\n    key: \"removeContextMenuListeners\",\n    value: function removeContextMenuListeners(config) {\n      if (this.shouldDisableContextMenu(config)) {\n        this.view.removeEventListener('contextmenu', this.disableContextMenu);\n      } else if (config.enableContextMenu) {\n        this.view.removeEventListener('contextmenu', this.enableContextMenu);\n      }\n    }\n  }, {\n    key: \"disableContextMenu\",\n    value: function disableContextMenu(e) {\n      e.preventDefault();\n    }\n  }, {\n    key: \"enableContextMenu\",\n    value: function enableContextMenu(e) {\n      e.stopPropagation();\n    }\n  }, {\n    key: \"setUserSelect\",\n    value: function setUserSelect(isHandlerEnabled) {\n      var userSelect = this.gestureHandler.config.userSelect;\n      this.view.style['userSelect'] = isHandlerEnabled ? userSelect != null ? userSelect : 'none' : this.defaultViewStyles.userSelect;\n      this.view.style['webkitUserSelect'] = isHandlerEnabled ? userSelect != null ? userSelect : 'none' : this.defaultViewStyles.userSelect;\n    }\n  }, {\n    key: \"setTouchAction\",\n    value: function setTouchAction(isHandlerEnabled) {\n      var touchAction = this.gestureHandler.config.touchAction;\n      this.view.style['touchAction'] = isHandlerEnabled ? touchAction != null ? touchAction : 'none' : this.defaultViewStyles.touchAction;\n      this.view.style['WebkitTouchCallout'] = isHandlerEnabled ? touchAction != null ? touchAction : 'none' : this.defaultViewStyles.touchAction;\n    }\n  }, {\n    key: \"setContextMenu\",\n    value: function setContextMenu(isHandlerEnabled) {\n      var config = this.gestureHandler.config;\n      if (isHandlerEnabled) {\n        this.addContextMenuListeners(config);\n      } else {\n        this.removeContextMenuListeners(config);\n      }\n    }\n  }, {\n    key: \"onEnabledChange\",\n    value: function onEnabledChange(enabled) {\n      if (!this.isInitialized) {\n        return;\n      }\n      this.setUserSelect(enabled);\n      this.setTouchAction(enabled);\n      this.setContextMenu(enabled);\n      if (enabled) {\n        this.eventManagers.forEach(function (manager) {\n          manager.registerListeners();\n        });\n      } else {\n        this.eventManagers.forEach(function (manager) {\n          manager.unregisterListeners();\n        });\n      }\n    }\n  }, {\n    key: \"onBegin\",\n    value: function onBegin() {}\n  }, {\n    key: \"onActivate\",\n    value: function onActivate() {\n      var config = this.gestureHandler.config;\n      if ((!this.view.style.cursor || this.view.style.cursor === 'auto') && config.activeCursor) {\n        this.view.style.cursor = config.activeCursor;\n      }\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd() {\n      this.tryResetCursor();\n    }\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.tryResetCursor();\n    }\n  }, {\n    key: \"onFail\",\n    value: function onFail() {\n      this.tryResetCursor();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(config) {\n      this.removeContextMenuListeners(config);\n      this.eventManagers.forEach(function (manager) {\n        manager.unregisterListeners();\n      });\n    }\n  }, {\n    key: \"view\",\n    get: function get() {\n      return this._view;\n    },\n    set: function set(value) {\n      this._view = value;\n    }\n  }]);\n}();","map":{"version":3,"names":["findNodeHandle","PointerEventManager","State","isPointerInBounds","MouseButton","KeyboardEventManager","WheelEventManager","GestureHandlerWebDelegate","_classCallCheck","isInitialized","eventManagers","defaultViewStyles","userSelect","touchAction","_createClass","key","value","init","viewRef","handler","_this","Error","handlerTag","gestureHandler","view","style","config","setUserSelect","enabled","setTouchAction","setContextMenu","push","forEach","manager","attachEventManager","_ref","x","y","measureView","rect","getBoundingClientRect","pageX","left","pageY","top","width","height","reset","resetManager","tryResetCursor","activeCursor","state","ACTIVE","cursor","shouldDisableContextMenu","enableContextMenu","undefined","isButtonInConfig","RIGHT","addContextMenuListeners","addEventListener","disableContextMenu","removeContextMenuListeners","removeEventListener","e","preventDefault","stopPropagation","isHandlerEnabled","onEnabledChange","registerListeners","unregisterListeners","onBegin","onActivate","onEnd","onCancel","onFail","destroy","get","_view","set"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\GestureHandlerWebDelegate.ts"],"sourcesContent":["import findNodeHandle from '../../findNodeHandle';\nimport type IGestureHandler from '../handlers/IGestureHandler';\nimport {\n  GestureHandlerDelegate,\n  MeasureResult,\n} from './GestureHandlerDelegate';\nimport PointerEventManager from './PointerEventManager';\nimport { State } from '../../State';\nimport { isPointerInBounds } from '../utils';\nimport EventManager from './EventManager';\nimport { Config } from '../interfaces';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport KeyboardEventManager from './KeyboardEventManager';\nimport WheelEventManager from './WheelEventManager';\n\ninterface DefaultViewStyles {\n  userSelect: string;\n  touchAction: string;\n}\n\nexport class GestureHandlerWebDelegate\n  implements GestureHandlerDelegate<HTMLElement, IGestureHandler>\n{\n  private isInitialized = false;\n  private _view!: HTMLElement;\n\n  private gestureHandler!: IGestureHandler;\n  private eventManagers: EventManager<unknown>[] = [];\n  private defaultViewStyles: DefaultViewStyles = {\n    userSelect: '',\n    touchAction: '',\n  };\n\n  init(viewRef: number, handler: IGestureHandler): void {\n    if (!viewRef) {\n      throw new Error(\n        `Cannot find HTML Element for handler ${handler.handlerTag}`\n      );\n    }\n\n    this.isInitialized = true;\n\n    this.gestureHandler = handler;\n    this.view = findNodeHandle(viewRef) as unknown as HTMLElement;\n\n    this.defaultViewStyles = {\n      userSelect: this.view.style.userSelect,\n      touchAction: this.view.style.touchAction,\n    };\n\n    const config = handler.config;\n\n    this.setUserSelect(config.enabled);\n    this.setTouchAction(config.enabled);\n    this.setContextMenu(config.enabled);\n\n    this.eventManagers.push(new PointerEventManager(this.view));\n    this.eventManagers.push(new KeyboardEventManager(this.view));\n    this.eventManagers.push(new WheelEventManager(this.view));\n\n    this.eventManagers.forEach((manager) =>\n      this.gestureHandler.attachEventManager(manager)\n    );\n  }\n\n  isPointerInBounds({ x, y }: { x: number; y: number }): boolean {\n    return isPointerInBounds(this.view, { x, y });\n  }\n\n  measureView(): MeasureResult {\n    const rect = this.view.getBoundingClientRect();\n\n    return {\n      pageX: rect.left,\n      pageY: rect.top,\n      width: rect.width,\n      height: rect.height,\n    };\n  }\n\n  reset(): void {\n    this.eventManagers.forEach((manager: EventManager<unknown>) =>\n      manager.resetManager()\n    );\n  }\n\n  tryResetCursor() {\n    const config = this.gestureHandler.config;\n\n    if (\n      config.activeCursor &&\n      config.activeCursor !== 'auto' &&\n      this.gestureHandler.state === State.ACTIVE\n    ) {\n      this.view.style.cursor = 'auto';\n    }\n  }\n\n  private shouldDisableContextMenu(config: Config) {\n    return (\n      (config.enableContextMenu === undefined &&\n        this.gestureHandler.isButtonInConfig(MouseButton.RIGHT)) ||\n      config.enableContextMenu === false\n    );\n  }\n\n  private addContextMenuListeners(config: Config): void {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.addEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.addEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n\n  private removeContextMenuListeners(config: Config): void {\n    if (this.shouldDisableContextMenu(config)) {\n      this.view.removeEventListener('contextmenu', this.disableContextMenu);\n    } else if (config.enableContextMenu) {\n      this.view.removeEventListener('contextmenu', this.enableContextMenu);\n    }\n  }\n\n  private disableContextMenu(this: void, e: MouseEvent): void {\n    e.preventDefault();\n  }\n\n  private enableContextMenu(this: void, e: MouseEvent): void {\n    e.stopPropagation();\n  }\n\n  private setUserSelect(isHandlerEnabled: boolean) {\n    const { userSelect } = this.gestureHandler.config;\n\n    this.view.style['userSelect'] = isHandlerEnabled\n      ? (userSelect ?? 'none')\n      : this.defaultViewStyles.userSelect;\n\n    this.view.style['webkitUserSelect'] = isHandlerEnabled\n      ? (userSelect ?? 'none')\n      : this.defaultViewStyles.userSelect;\n  }\n\n  private setTouchAction(isHandlerEnabled: boolean) {\n    const { touchAction } = this.gestureHandler.config;\n\n    this.view.style['touchAction'] = isHandlerEnabled\n      ? (touchAction ?? 'none')\n      : this.defaultViewStyles.touchAction;\n\n    // @ts-ignore This one disables default events on Safari\n    this.view.style['WebkitTouchCallout'] = isHandlerEnabled\n      ? (touchAction ?? 'none')\n      : this.defaultViewStyles.touchAction;\n  }\n\n  private setContextMenu(isHandlerEnabled: boolean) {\n    const config = this.gestureHandler.config;\n\n    if (isHandlerEnabled) {\n      this.addContextMenuListeners(config);\n    } else {\n      this.removeContextMenuListeners(config);\n    }\n  }\n\n  onEnabledChange(enabled: boolean): void {\n    if (!this.isInitialized) {\n      return;\n    }\n\n    this.setUserSelect(enabled);\n    this.setTouchAction(enabled);\n    this.setContextMenu(enabled);\n\n    if (enabled) {\n      this.eventManagers.forEach((manager) => {\n        manager.registerListeners();\n      });\n    } else {\n      this.eventManagers.forEach((manager) => {\n        manager.unregisterListeners();\n      });\n    }\n  }\n\n  onBegin(): void {\n    // no-op for now\n  }\n\n  onActivate(): void {\n    const config = this.gestureHandler.config;\n\n    if (\n      (!this.view.style.cursor || this.view.style.cursor === 'auto') &&\n      config.activeCursor\n    ) {\n      this.view.style.cursor = config.activeCursor;\n    }\n  }\n\n  onEnd(): void {\n    this.tryResetCursor();\n  }\n\n  onCancel(): void {\n    this.tryResetCursor();\n  }\n\n  onFail(): void {\n    this.tryResetCursor();\n  }\n\n  public destroy(config: Config): void {\n    this.removeContextMenuListeners(config);\n\n    this.eventManagers.forEach((manager) => {\n      manager.unregisterListeners();\n    });\n  }\n\n  public get view() {\n    return this._view;\n  }\n  public set view(value: HTMLElement) {\n    this._view = value;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}