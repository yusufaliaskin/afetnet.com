{"ast":null,"code":"\"use strict\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _excluded = [\"enabled\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from \"../State\";\nimport { EventMap } from \"./constants\";\nimport * as NodeManager from \"./NodeManager\";\nimport { ghQueueMicrotask } from \"../ghQueueMicrotask\";\nvar gestureInstances = 0;\nvar GestureHandler = function () {\n  function GestureHandler() {\n    var _this = this;\n    _classCallCheck(this, GestureHandler);\n    this.isGestureRunning = false;\n    this.view = null;\n    this.hasGestureFailed = false;\n    this.hammer = null;\n    this.initialRotation = null;\n    this.config = {};\n    this.previousState = State.UNDETERMINED;\n    this.pendingGestures = {};\n    this.oldState = State.UNDETERMINED;\n    this.lastSentState = null;\n    this.clearSelfAsPending = function () {\n      if (Array.isArray(_this.config.waitFor)) {\n        for (var gesture of _this.config.waitFor) {\n          gesture.removePendingGesture(_this.id);\n        }\n      }\n    };\n    this.destroy = function () {\n      _this.clearSelfAsPending();\n      if (_this.hammer) {\n        _this.hammer.stop(false);\n        _this.hammer.destroy();\n      }\n      _this.hammer = null;\n    };\n    this.isPointInView = function (_ref) {\n      var x = _ref.x,\n        y = _ref.y;\n      var rect = _this.view.getBoundingClientRect();\n      var pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    };\n    this.sendEvent = function (nativeEvent) {\n      var _this$propsRef$curren = _this.propsRef.current,\n        onGestureHandlerEvent = _this$propsRef$curren.onGestureHandlerEvent,\n        onGestureHandlerStateChange = _this$propsRef$curren.onGestureHandlerStateChange;\n      var event = _this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n      if (_this.lastSentState !== event.nativeEvent.state) {\n        _this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    };\n    this.sync = function () {\n      var gesture = _this.hammer.get(_this.name);\n      if (!gesture) return;\n      var enable = function enable(recognizer, inputData) {\n        if (!_this.config.enabled) {\n          _this.isGestureRunning = false;\n          _this.hasGestureFailed = false;\n          return false;\n        }\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return _this.shouldEnableGestureOnSetup;\n        }\n        if (_this.hasGestureFailed) {\n          return false;\n        }\n        if (!_this.isDiscrete) {\n          if (_this.isGestureRunning) {\n            return true;\n          }\n          _this._stillWaiting = _this._getPendingGestures();\n          if (_this._stillWaiting.length) {\n            for (var _gesture2 of _this._stillWaiting) {\n              if (!_gesture2.isDiscrete && _gesture2.isGestureRunning) {\n                _this.hasGestureFailed = true;\n                _this.isGestureRunning = false;\n                return false;\n              }\n            }\n            return false;\n          }\n        }\n        if (!_this.hasCustomActivationCriteria) {\n          return true;\n        }\n        var deltaRotation = _this.initialRotation == null ? 0 : inputData.rotation - _this.initialRotation;\n        var _this$isGestureEnable = _this.isGestureEnabledForEvent(_this.getConfig(), recognizer, _objectSpread(_objectSpread({}, inputData), {}, {\n            deltaRotation: deltaRotation\n          })),\n          success = _this$isGestureEnable.success,\n          failed = _this$isGestureEnable.failed;\n        if (failed) {\n          _this.simulateCancelEvent(inputData);\n          _this.hasGestureFailed = true;\n        }\n        return success;\n      };\n      var params = _this.getHammerConfig();\n      gesture.set(_objectSpread(_objectSpread({}, params), {}, {\n        enable: enable\n      }));\n    };\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n  return _createClass(GestureHandler, [{\n    key: \"id\",\n    get: function get() {\n      return `${this.name}${this.gestureInstance}`;\n    }\n  }, {\n    key: \"isNative\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"isDiscrete\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n  }, {\n    key: \"onWaitingEnded\",\n    value: function onWaitingEnded(_gesture) {}\n  }, {\n    key: \"removePendingGesture\",\n    value: function removePendingGesture(id) {\n      delete this.pendingGestures[id];\n    }\n  }, {\n    key: \"addPendingGesture\",\n    value: function addPendingGesture(gesture) {\n      this.pendingGestures[gesture.id] = gesture;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_config, _recognizer, _event) {\n      return {\n        success: true\n      };\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      throw new Error('Must override GestureHandler.NativeGestureClass');\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(_config) {\n      return true;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref2) {\n      var _ref2$enabled = _ref2.enabled,\n        enabled = _ref2$enabled === void 0 ? true : _ref2$enabled,\n        props = _objectWithoutProperties(_ref2, _excluded);\n      this.clearSelfAsPending();\n      this.config = this.ensureConfig(_objectSpread({\n        enabled: enabled\n      }, props));\n      this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n      if (Array.isArray(this.config.waitFor)) {\n        for (var gesture of this.config.waitFor) {\n          gesture.addPendingGesture(this);\n        }\n      }\n      if (this.hammer) {\n        this.sync();\n      }\n      return this.config;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState(type) {\n      if (type == 0) {\n        return 0;\n      }\n      return EventMap[type];\n    }\n  }, {\n    key: \"transformEventData\",\n    value: function transformEventData(event) {\n      var eventType = event.eventType,\n        numberOfPointers = event.maxPointers;\n      var changedTouch = event.changedPointers[0];\n      var pointerInside = this.isPointInView({\n        x: changedTouch.clientX,\n        y: changedTouch.clientY\n      });\n      var state = this.getState(eventType);\n      if (state !== this.previousState) {\n        this.oldState = this.previousState;\n        this.previousState = state;\n      }\n      return {\n        nativeEvent: _objectSpread(_objectSpread({\n          numberOfPointers: numberOfPointers,\n          state: state,\n          pointerInside: pointerInside\n        }, this.transformNativeEvent(event)), {}, {\n          handlerTag: this.handlerTag,\n          target: this.ref,\n          oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n        }),\n        timeStamp: Date.now()\n      };\n    }\n  }, {\n    key: \"transformNativeEvent\",\n    value: function transformNativeEvent(_event) {\n      return {};\n    }\n  }, {\n    key: \"cancelPendingGestures\",\n    value: function cancelPendingGestures(event) {\n      for (var gesture of Object.values(this.pendingGestures)) {\n        if (gesture && gesture.isGestureRunning) {\n          gesture.hasGestureFailed = true;\n          gesture.cancelEvent(event);\n        }\n      }\n    }\n  }, {\n    key: \"notifyPendingGestures\",\n    value: function notifyPendingGestures() {\n      for (var gesture of Object.values(this.pendingGestures)) {\n        if (gesture) {\n          gesture.onWaitingEnded(this);\n        }\n      }\n    }\n  }, {\n    key: \"onGestureEnded\",\n    value: function onGestureEnded(event) {\n      this.isGestureRunning = false;\n      this.cancelPendingGestures(event);\n    }\n  }, {\n    key: \"forceInvalidate\",\n    value: function forceInvalidate(event) {\n      if (this.isGestureRunning) {\n        this.hasGestureFailed = true;\n        this.cancelEvent(event);\n      }\n    }\n  }, {\n    key: \"cancelEvent\",\n    value: function cancelEvent(event) {\n      this.notifyPendingGestures();\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_CANCEL,\n        isFinal: true\n      }));\n      this.onGestureEnded(event);\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(_ref3) {\n      var isFirst = _ref3.isFirst;\n      if (isFirst) {\n        this.hasGestureFailed = false;\n      }\n    }\n  }, {\n    key: \"shouldUseTouchEvents\",\n    value: function shouldUseTouchEvents(config) {\n      var _config$simultaneousH, _config$simultaneousH2;\n      return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) == null ? void 0 : _config$simultaneousH2.some(function (handler) {\n        return handler.isNative;\n      })) != null ? _config$simultaneousH : false;\n    }\n  }, {\n    key: \"setView\",\n    value: function setView(ref, propsRef) {\n      var _this2 = this;\n      if (ref == null) {\n        this.destroy();\n        this.view = null;\n        return;\n      }\n      var SUPPORTS_TOUCH = 'ontouchstart' in window;\n      this.propsRef = propsRef;\n      this.ref = ref;\n      this.view = findNodeHandle(ref);\n      this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.Manager(this.view, {\n        inputClass: Hammer.TouchInput\n      }) : new Hammer.Manager(this.view);\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      var NativeGestureClass = this.NativeGestureClass;\n      var gesture = new NativeGestureClass(this.getHammerConfig());\n      this.hammer.add(gesture);\n      this.hammer.on('hammer.input', function (ev) {\n        if (!_this2.config.enabled) {\n          _this2.hasGestureFailed = false;\n          _this2.isGestureRunning = false;\n          return;\n        }\n        _this2.onRawEvent(ev);\n        if (_this2.initialRotation === null && ev.rotation !== 0) {\n          _this2.initialRotation = ev.rotation;\n        }\n        if (ev.isFinal) {\n          setTimeout(function () {\n            _this2.initialRotation = null;\n            _this2.hasGestureFailed = false;\n          });\n        }\n      });\n      this.setupEvents();\n      this.sync();\n    }\n  }, {\n    key: \"setupEvents\",\n    value: function setupEvents() {\n      var _this3 = this;\n      if (!this.isDiscrete) {\n        this.hammer.on(`${this.name}start`, function (event) {\n          return _this3.onStart(event);\n        });\n        this.hammer.on(`${this.name}end ${this.name}cancel`, function (event) {\n          _this3.onGestureEnded(event);\n        });\n      }\n      this.hammer.on(this.name, function (ev) {\n        return _this3.onGestureActivated(ev);\n      });\n    }\n  }, {\n    key: \"onStart\",\n    value: function onStart(_ref4) {\n      var deltaX = _ref4.deltaX,\n        deltaY = _ref4.deltaY,\n        rotation = _ref4.rotation;\n      this.oldState = State.UNDETERMINED;\n      this.previousState = State.UNDETERMINED;\n      this.lastSentState = null;\n      this.isGestureRunning = true;\n      this.__initialX = deltaX;\n      this.__initialY = deltaY;\n      this.initialRotation = rotation;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(ev) {\n      this.sendEvent(ev);\n    }\n  }, {\n    key: \"onSuccess\",\n    value: function onSuccess() {}\n  }, {\n    key: \"_getPendingGestures\",\n    value: function _getPendingGestures() {\n      if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n        var stillWaiting = this.config.waitFor.filter(function (_ref5) {\n          var hasGestureFailed = _ref5.hasGestureFailed;\n          return hasGestureFailed === false;\n        });\n        return stillWaiting;\n      }\n      return [];\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      var pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n      return {\n        pointers: pointers\n      };\n    }\n  }, {\n    key: \"simulateCancelEvent\",\n    value: function simulateCancelEvent(_inputData) {}\n  }, {\n    key: \"ensureConfig\",\n    value: function ensureConfig(config) {\n      var _this4 = this;\n      var props = _objectSpread({}, config);\n      if ('minDist' in config) {\n        props.minDist = config.minDist;\n        props.minDistSq = props.minDist * props.minDist;\n      }\n      if ('minVelocity' in config) {\n        props.minVelocity = config.minVelocity;\n        props.minVelocitySq = props.minVelocity * props.minVelocity;\n      }\n      if ('maxDist' in config) {\n        props.maxDist = config.maxDist;\n        props.maxDistSq = config.maxDist * config.maxDist;\n      }\n      if ('waitFor' in config) {\n        props.waitFor = asArray(config.waitFor).map(function (_ref6) {\n          var handlerTag = _ref6.handlerTag;\n          return NodeManager.getHandler(handlerTag);\n        }).filter(function (v) {\n          return v;\n        });\n      } else {\n        props.waitFor = null;\n      }\n      if ('simultaneousHandlers' in config) {\n        var shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n        props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(function (handler) {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        }).filter(function (v) {\n          return v;\n        });\n        if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n          ghQueueMicrotask(function () {\n            _this4.destroy();\n            _this4.setView(_this4.ref, _this4.propsRef);\n          });\n        }\n      } else {\n        props.simultaneousHandlers = null;\n      }\n      var configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n      configProps.forEach(function (prop) {\n        if (typeof props[prop] === 'undefined') {\n          props[prop] = Number.NaN;\n        }\n      });\n      return props;\n    }\n  }]);\n}();\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        var handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          var argMapping = method.__nodeConfig.argMapping;\n          if (Array.isArray(argMapping)) {\n            for (var _ref7 of argMapping.entries()) {\n              var _ref8 = _slicedToArray(_ref7, 2);\n              var index = _ref8[0];\n              var _ref8$ = _slicedToArray(_ref8[1], 2);\n              var key = _ref8$[0];\n              var value = _ref8$[1];\n              if (key in event.nativeEvent) {\n                var nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nexport default GestureHandler;","map":{"version":3,"names":["Hammer","findNodeHandle","State","EventMap","NodeManager","ghQueueMicrotask","gestureInstances","GestureHandler","_this","_classCallCheck","isGestureRunning","view","hasGestureFailed","hammer","initialRotation","config","previousState","UNDETERMINED","pendingGestures","oldState","lastSentState","clearSelfAsPending","Array","isArray","waitFor","gesture","removePendingGesture","id","destroy","stop","isPointInView","_ref","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","sendEvent","nativeEvent","_this$propsRef$curren","propsRef","current","onGestureHandlerEvent","onGestureHandlerStateChange","event","transformEventData","invokeNullableMethod","state","sync","get","name","enable","recognizer","inputData","enabled","options","maxPointers","shouldEnableGestureOnSetup","isDiscrete","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","rotation","_this$isGestureEnable","isGestureEnabledForEvent","getConfig","_objectSpread","success","failed","simulateCancelEvent","params","getHammerConfig","set","gestureInstance","_createClass","key","Error","value","onWaitingEnded","_gesture","addPendingGesture","_config","_recognizer","_event","updateHasCustomActivationCriteria","updateGestureConfig","_ref2","_ref2$enabled","props","_objectWithoutProperties","_excluded","ensureConfig","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","clientX","clientY","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","INPUT_CANCEL","isFinal","onRawEvent","_ref3","isFirst","shouldUseTouchEvents","_config$simultaneousH","_config$simultaneousH2","simultaneousHandlers","some","handler","isNative","setView","_this2","SUPPORTS_TOUCH","window","Manager","inputClass","TouchInput","NativeGestureClass","add","on","ev","setTimeout","setupEvents","_this3","onStart","onGestureActivated","_ref4","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","_ref5","pointers","minPointers","_inputData","_this4","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","_ref6","getHandler","v","configProps","forEach","prop","Number","NaN","method","__getHandler","argMapping","__nodeConfig","_ref7","entries","_ref8","_slicedToArray","index","_ref8$","nativeValue","setValue"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\web_hammer\\GestureHandler.ts"],"sourcesContent":["/* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n  simultaneousHandlers: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n  get isNative() {\n    return false;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = this.ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange } =\n      this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  shouldUseTouchEvents(config: Config) {\n    return (\n      config.simultaneousHandlers?.some((handler) => handler.isNative) ?? false\n    );\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    // @ts-ignore\n    this.view = findNodeHandle(ref);\n\n    // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n    this.hammer =\n      SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config)\n        ? new Hammer.Manager(this.view as any, {\n            inputClass: Hammer.TouchInput,\n          })\n        : new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev as unknown as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart(event as unknown as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded(event as unknown as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated(ev as unknown as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n\n  // Validate the props\n  ensureConfig(config: Config): Required<Config> {\n    const props = { ...config };\n\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist! * props.minDist!;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist! * config.maxDist!;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor)\n        .map(({ handlerTag }: { handlerTag: number }) =>\n          NodeManager.getHandler(handlerTag)\n        )\n        .filter((v) => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers)\n        .map((handler: number | GestureHandler) => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        })\n        .filter((v) => v);\n\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n\n    const configProps = [\n      'minPointers',\n      'maxPointers',\n      'minDist',\n      'maxDist',\n      'maxDistSq',\n      'minVelocitySq',\n      'minDistSq',\n      'minVelocity',\n      'failOffsetXStart',\n      'failOffsetYStart',\n      'failOffsetXEnd',\n      'failOffsetYEnd',\n      'activeOffsetXStart',\n      'activeOffsetXEnd',\n      'activeOffsetYStart',\n      'activeOffsetYEnd',\n    ] as const;\n    configProps.forEach((prop: (typeof configProps)[number]) => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n  }\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}