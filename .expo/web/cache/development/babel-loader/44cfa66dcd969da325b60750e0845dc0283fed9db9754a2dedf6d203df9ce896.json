{"ast":null,"code":"\"use strict\";\n\nimport NodeManager from \"../../web/tools/NodeManager\";\nexport var GestureStateManager = {\n  create: function create(handlerTag) {\n    return {\n      begin: function begin() {\n        NodeManager.getHandler(handlerTag).begin();\n      },\n      activate: function activate() {\n        NodeManager.getHandler(handlerTag).activate(true);\n      },\n      fail: function fail() {\n        NodeManager.getHandler(handlerTag).fail();\n      },\n      end: function end() {\n        NodeManager.getHandler(handlerTag).end();\n      }\n    };\n  }\n};","map":{"version":3,"names":["NodeManager","GestureStateManager","create","handlerTag","begin","getHandler","activate","fail","end"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\gestureStateManager.web.ts"],"sourcesContent":["import NodeManager from '../../web/tools/NodeManager';\nimport { GestureStateManagerType } from './gestureStateManager';\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    return {\n      begin: () => {\n        NodeManager.getHandler(handlerTag).begin();\n      },\n\n      activate: () => {\n        NodeManager.getHandler(handlerTag).activate(true);\n      },\n\n      fail: () => {\n        NodeManager.getHandler(handlerTag).fail();\n      },\n\n      end: () => {\n        NodeManager.getHandler(handlerTag).end();\n      },\n    };\n  },\n};\n"],"mappings":";;AAAA,OAAOA,WAAW;AAGlB,OAAO,IAAMC,mBAAmB,GAAG;EACjCC,MAAM,WAANA,MAAMA,CAACC,UAAkB,EAA2B;IAClD,OAAO;MACLC,KAAK,EAAE,SAAPA,KAAKA,CAAA,EAAQ;QACXJ,WAAW,CAACK,UAAU,CAACF,UAAU,CAAC,CAACC,KAAK,CAAC,CAAC;MAC5C,CAAC;MAEDE,QAAQ,EAAE,SAAVA,QAAQA,CAAA,EAAQ;QACdN,WAAW,CAACK,UAAU,CAACF,UAAU,CAAC,CAACG,QAAQ,CAAC,IAAI,CAAC;MACnD,CAAC;MAEDC,IAAI,EAAE,SAANA,IAAIA,CAAA,EAAQ;QACVP,WAAW,CAACK,UAAU,CAACF,UAAU,CAAC,CAACI,IAAI,CAAC,CAAC;MAC3C,CAAC;MAEDC,GAAG,EAAE,SAALA,GAAGA,CAAA,EAAQ;QACTR,WAAW,CAACK,UAAU,CAACF,UAAU,CAAC,CAACK,GAAG,CAAC,CAAC;MAC1C;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}