{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport warnOnce from \"../Utilities/warnOnce\";\nimport EventCounts from \"./EventCounts\";\nimport MemoryInfo from \"./MemoryInfo\";\nimport NativePerformance from \"./NativePerformance\";\nimport NativePerformanceObserver from \"./NativePerformanceObserver\";\nimport { PerformanceEntry } from \"./PerformanceEntry\";\nimport { warnNoNativePerformanceObserver } from \"./PerformanceObserver\";\nimport { performanceEntryTypeToRaw, rawToPerformanceEntry } from \"./RawPerformanceEntry\";\nimport { RawPerformanceEntryTypeValues } from \"./RawPerformanceEntry\";\nimport ReactNativeStartupTiming from \"./ReactNativeStartupTiming\";\nvar getCurrentTimeStamp = global.nativePerformanceNow ? global.nativePerformanceNow : function () {\n  return Date.now();\n};\nexport var PerformanceMark = function (_PerformanceEntry) {\n  function PerformanceMark(markName, markOptions) {\n    var _markOptions$startTim;\n    var _this;\n    _classCallCheck(this, PerformanceMark);\n    _this = _callSuper(this, PerformanceMark, [{\n      name: markName,\n      entryType: 'mark',\n      startTime: (_markOptions$startTim = markOptions == null ? void 0 : markOptions.startTime) != null ? _markOptions$startTim : getCurrentTimeStamp(),\n      duration: 0\n    }]);\n    if (markOptions) {\n      _this.detail = markOptions.detail;\n    }\n    return _this;\n  }\n  _inherits(PerformanceMark, _PerformanceEntry);\n  return _createClass(PerformanceMark);\n}(PerformanceEntry);\nexport var PerformanceMeasure = function (_PerformanceEntry2) {\n  function PerformanceMeasure(measureName, measureOptions) {\n    var _measureOptions$durat;\n    var _this2;\n    _classCallCheck(this, PerformanceMeasure);\n    _this2 = _callSuper(this, PerformanceMeasure, [{\n      name: measureName,\n      entryType: 'measure',\n      startTime: 0,\n      duration: (_measureOptions$durat = measureOptions == null ? void 0 : measureOptions.duration) != null ? _measureOptions$durat : 0\n    }]);\n    if (measureOptions) {\n      _this2.detail = measureOptions.detail;\n    }\n    return _this2;\n  }\n  _inherits(PerformanceMeasure, _PerformanceEntry2);\n  return _createClass(PerformanceMeasure);\n}(PerformanceEntry);\nfunction warnNoNativePerformance() {\n  warnOnce('missing-native-performance', 'Missing native implementation of Performance');\n}\nvar Performance = function () {\n  function Performance() {\n    _classCallCheck(this, Performance);\n    this.eventCounts = new EventCounts();\n  }\n  return _createClass(Performance, [{\n    key: \"memory\",\n    get: function get() {\n      if (NativePerformance != null && NativePerformance.getSimpleMemoryInfo) {\n        var memoryInfo = NativePerformance.getSimpleMemoryInfo();\n        if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n          var totalJSHeapSize = memoryInfo.hermes_heapSize,\n            usedJSHeapSize = memoryInfo.hermes_allocatedBytes;\n          return new MemoryInfo({\n            jsHeapSizeLimit: null,\n            totalJSHeapSize: totalJSHeapSize,\n            usedJSHeapSize: usedJSHeapSize\n          });\n        } else {\n          return new MemoryInfo();\n        }\n      }\n      return new MemoryInfo();\n    }\n  }, {\n    key: \"reactNativeStartupTiming\",\n    get: function get() {\n      if (NativePerformance != null && NativePerformance.getReactNativeStartupTiming) {\n        return new ReactNativeStartupTiming(NativePerformance.getReactNativeStartupTiming());\n      }\n      return new ReactNativeStartupTiming();\n    }\n  }, {\n    key: \"mark\",\n    value: function mark(markName, markOptions) {\n      var mark = new PerformanceMark(markName, markOptions);\n      if (NativePerformance != null && NativePerformance.mark) {\n        NativePerformance.mark(markName, mark.startTime, mark.duration);\n      } else {\n        warnNoNativePerformance();\n      }\n      return mark;\n    }\n  }, {\n    key: \"clearMarks\",\n    value: function clearMarks(markName) {\n      if (!(NativePerformanceObserver != null && NativePerformanceObserver.clearEntries)) {\n        warnNoNativePerformanceObserver();\n        return;\n      }\n      NativePerformanceObserver == null ? void 0 : NativePerformanceObserver.clearEntries(RawPerformanceEntryTypeValues.MARK, markName);\n    }\n  }, {\n    key: \"measure\",\n    value: function measure(measureName, startMarkOrOptions, endMark) {\n      var options;\n      var startMarkName,\n        endMarkName = endMark,\n        duration,\n        startTime = 0,\n        endTime = 0;\n      if (typeof startMarkOrOptions === 'string') {\n        startMarkName = startMarkOrOptions;\n      } else if (startMarkOrOptions !== undefined) {\n        var _options$duration;\n        options = startMarkOrOptions;\n        if (endMark !== undefined) {\n          throw new TypeError(\"Performance.measure: Can't have both options and endMark\");\n        }\n        if (options.start === undefined && options.end === undefined) {\n          throw new TypeError('Performance.measure: Must have at least one of start/end specified in options');\n        }\n        if (options.start !== undefined && options.end !== undefined && options.duration !== undefined) {\n          throw new TypeError(\"Performance.measure: Can't have both start/end and duration explicitly in options\");\n        }\n        if (typeof options.start === 'number') {\n          startTime = options.start;\n        } else {\n          startMarkName = options.start;\n        }\n        if (typeof options.end === 'number') {\n          endTime = options.end;\n        } else {\n          endMarkName = options.end;\n        }\n        duration = (_options$duration = options.duration) != null ? _options$duration : duration;\n      }\n      var measure = new PerformanceMeasure(measureName, options);\n      if (NativePerformance != null && NativePerformance.measure) {\n        NativePerformance.measure(measureName, startTime, endTime, duration, startMarkName, endMarkName);\n      } else {\n        warnNoNativePerformance();\n      }\n      return measure;\n    }\n  }, {\n    key: \"clearMeasures\",\n    value: function clearMeasures(measureName) {\n      if (!(NativePerformanceObserver != null && NativePerformanceObserver.clearEntries)) {\n        warnNoNativePerformanceObserver();\n        return;\n      }\n      NativePerformanceObserver == null ? void 0 : NativePerformanceObserver.clearEntries(RawPerformanceEntryTypeValues.MEASURE, measureName);\n    }\n  }, {\n    key: \"now\",\n    value: function now() {\n      return getCurrentTimeStamp();\n    }\n  }, {\n    key: \"getEntries\",\n    value: function getEntries() {\n      if (!(NativePerformanceObserver != null && NativePerformanceObserver.clearEntries)) {\n        warnNoNativePerformanceObserver();\n        return [];\n      }\n      return NativePerformanceObserver.getEntries().map(rawToPerformanceEntry);\n    }\n  }, {\n    key: \"getEntriesByType\",\n    value: function getEntriesByType(entryType) {\n      if (entryType !== 'mark' && entryType !== 'measure') {\n        console.log(`Performance.getEntriesByType: Only valid for 'mark' and 'measure' entry types, got ${entryType}`);\n        return [];\n      }\n      if (!(NativePerformanceObserver != null && NativePerformanceObserver.clearEntries)) {\n        warnNoNativePerformanceObserver();\n        return [];\n      }\n      return NativePerformanceObserver.getEntries(performanceEntryTypeToRaw(entryType)).map(rawToPerformanceEntry);\n    }\n  }, {\n    key: \"getEntriesByName\",\n    value: function getEntriesByName(entryName, entryType) {\n      if (entryType !== undefined && entryType !== 'mark' && entryType !== 'measure') {\n        console.log(`Performance.getEntriesByName: Only valid for 'mark' and 'measure' entry types, got ${entryType}`);\n        return [];\n      }\n      if (!(NativePerformanceObserver != null && NativePerformanceObserver.clearEntries)) {\n        warnNoNativePerformanceObserver();\n        return [];\n      }\n      return NativePerformanceObserver.getEntries(entryType != null ? performanceEntryTypeToRaw(entryType) : undefined, entryName).map(rawToPerformanceEntry);\n    }\n  }]);\n}();\nexport { Performance as default };","map":{"version":3,"names":["warnOnce","EventCounts","MemoryInfo","NativePerformance","NativePerformanceObserver","PerformanceEntry","warnNoNativePerformanceObserver","performanceEntryTypeToRaw","rawToPerformanceEntry","RawPerformanceEntryTypeValues","ReactNativeStartupTiming","getCurrentTimeStamp","global","nativePerformanceNow","Date","now","PerformanceMark","_PerformanceEntry","markName","markOptions","_markOptions$startTim","_this","_classCallCheck","_callSuper","name","entryType","startTime","duration","detail","_inherits","_createClass","PerformanceMeasure","_PerformanceEntry2","measureName","measureOptions","_measureOptions$durat","_this2","warnNoNativePerformance","Performance","eventCounts","key","get","getSimpleMemoryInfo","memoryInfo","hasOwnProperty","totalJSHeapSize","hermes_heapSize","usedJSHeapSize","hermes_allocatedBytes","jsHeapSizeLimit","getReactNativeStartupTiming","value","mark","clearMarks","clearEntries","MARK","measure","startMarkOrOptions","endMark","options","startMarkName","endMarkName","endTime","undefined","_options$duration","TypeError","start","end","clearMeasures","MEASURE","getEntries","map","getEntriesByType","console","log","getEntriesByName","entryName","default"],"sources":["C:/Users/Yusuf Ali Aşkın/Downloads/Desktop/proje_afetnet/node_modules/react-native/Libraries/WebPerformance/Performance.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n// flowlint unsafe-getters-setters:off\n\nimport type {HighResTimeStamp, PerformanceEntryType} from './PerformanceEntry';\nimport type {PerformanceEntryList} from './PerformanceObserver';\n\nimport warnOnce from '../Utilities/warnOnce';\nimport EventCounts from './EventCounts';\nimport MemoryInfo from './MemoryInfo';\nimport NativePerformance from './NativePerformance';\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {PerformanceEntry} from './PerformanceEntry';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\nimport {\n  performanceEntryTypeToRaw,\n  rawToPerformanceEntry,\n} from './RawPerformanceEntry';\nimport {RawPerformanceEntryTypeValues} from './RawPerformanceEntry';\nimport ReactNativeStartupTiming from './ReactNativeStartupTiming';\n\ntype DetailType = mixed;\n\nexport type PerformanceMarkOptions = {\n  detail?: DetailType,\n  startTime?: HighResTimeStamp,\n};\n\ndeclare var global: {\n  // This value is defined directly via JSI, if available.\n  +nativePerformanceNow?: ?() => number,\n};\n\nconst getCurrentTimeStamp: () => HighResTimeStamp = global.nativePerformanceNow\n  ? global.nativePerformanceNow\n  : () => Date.now();\n\nexport class PerformanceMark extends PerformanceEntry {\n  detail: DetailType;\n\n  constructor(markName: string, markOptions?: PerformanceMarkOptions) {\n    super({\n      name: markName,\n      entryType: 'mark',\n      startTime: markOptions?.startTime ?? getCurrentTimeStamp(),\n      duration: 0,\n    });\n\n    if (markOptions) {\n      this.detail = markOptions.detail;\n    }\n  }\n}\n\nexport type TimeStampOrName = HighResTimeStamp | string;\n\nexport type PerformanceMeasureOptions = {\n  detail?: DetailType,\n  start?: TimeStampOrName,\n  end?: TimeStampOrName,\n  duration?: HighResTimeStamp,\n};\n\nexport class PerformanceMeasure extends PerformanceEntry {\n  detail: DetailType;\n\n  constructor(measureName: string, measureOptions?: PerformanceMeasureOptions) {\n    super({\n      name: measureName,\n      entryType: 'measure',\n      startTime: 0,\n      duration: measureOptions?.duration ?? 0,\n    });\n\n    if (measureOptions) {\n      this.detail = measureOptions.detail;\n    }\n  }\n}\n\nfunction warnNoNativePerformance() {\n  warnOnce(\n    'missing-native-performance',\n    'Missing native implementation of Performance',\n  );\n}\n\n/**\n * Partial implementation of the Performance interface for RN,\n * corresponding to the standard in\n * https://www.w3.org/TR/user-timing/#extensions-performance-interface\n */\nexport default class Performance {\n  eventCounts: EventCounts = new EventCounts();\n\n  // Get the current JS memory information.\n  get memory(): MemoryInfo {\n    if (NativePerformance?.getSimpleMemoryInfo) {\n      // JSI API implementations may have different variants of names for the JS\n      // heap information we need here. We will parse the result based on our\n      // guess of the implementation for now.\n      const memoryInfo = NativePerformance.getSimpleMemoryInfo();\n      if (memoryInfo.hasOwnProperty('hermes_heapSize')) {\n        // We got memory information from Hermes\n        const {\n          hermes_heapSize: totalJSHeapSize,\n          hermes_allocatedBytes: usedJSHeapSize,\n        } = memoryInfo;\n\n        return new MemoryInfo({\n          jsHeapSizeLimit: null, // We don't know the heap size limit from Hermes.\n          totalJSHeapSize,\n          usedJSHeapSize,\n        });\n      } else {\n        // JSC and V8 has no native implementations for memory information in JSI::Instrumentation\n        return new MemoryInfo();\n      }\n    }\n\n    return new MemoryInfo();\n  }\n\n  // Startup metrics is not used in web, but only in React Native.\n  get reactNativeStartupTiming(): ReactNativeStartupTiming {\n    if (NativePerformance?.getReactNativeStartupTiming) {\n      return new ReactNativeStartupTiming(\n        NativePerformance.getReactNativeStartupTiming(),\n      );\n    }\n    return new ReactNativeStartupTiming();\n  }\n\n  mark(\n    markName: string,\n    markOptions?: PerformanceMarkOptions,\n  ): PerformanceMark {\n    const mark = new PerformanceMark(markName, markOptions);\n\n    if (NativePerformance?.mark) {\n      NativePerformance.mark(markName, mark.startTime, mark.duration);\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return mark;\n  }\n\n  clearMarks(markName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MARK,\n      markName,\n    );\n  }\n\n  measure(\n    measureName: string,\n    startMarkOrOptions?: string | PerformanceMeasureOptions,\n    endMark?: string,\n  ): PerformanceMeasure {\n    let options;\n    let startMarkName,\n      endMarkName = endMark,\n      duration,\n      startTime = 0,\n      endTime = 0;\n\n    if (typeof startMarkOrOptions === 'string') {\n      startMarkName = startMarkOrOptions;\n    } else if (startMarkOrOptions !== undefined) {\n      options = startMarkOrOptions;\n      if (endMark !== undefined) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both options and endMark\",\n        );\n      }\n      if (options.start === undefined && options.end === undefined) {\n        throw new TypeError(\n          'Performance.measure: Must have at least one of start/end specified in options',\n        );\n      }\n      if (\n        options.start !== undefined &&\n        options.end !== undefined &&\n        options.duration !== undefined\n      ) {\n        throw new TypeError(\n          \"Performance.measure: Can't have both start/end and duration explicitly in options\",\n        );\n      }\n\n      if (typeof options.start === 'number') {\n        startTime = options.start;\n      } else {\n        startMarkName = options.start;\n      }\n\n      if (typeof options.end === 'number') {\n        endTime = options.end;\n      } else {\n        endMarkName = options.end;\n      }\n\n      duration = options.duration ?? duration;\n    }\n\n    const measure = new PerformanceMeasure(measureName, options);\n\n    if (NativePerformance?.measure) {\n      NativePerformance.measure(\n        measureName,\n        startTime,\n        endTime,\n        duration,\n        startMarkName,\n        endMarkName,\n      );\n    } else {\n      warnNoNativePerformance();\n    }\n\n    return measure;\n  }\n\n  clearMeasures(measureName?: string): void {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    NativePerformanceObserver?.clearEntries(\n      RawPerformanceEntryTypeValues.MEASURE,\n      measureName,\n    );\n  }\n\n  /**\n   * Returns a double, measured in milliseconds.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\n   */\n  now(): HighResTimeStamp {\n    return getCurrentTimeStamp();\n  }\n\n  /**\n   * An extension that allows to get back to JS all currently logged marks/measures\n   * (in our case, be it from JS or native), see\n   * https://www.w3.org/TR/performance-timeline/#extensions-to-the-performance-interface\n   */\n  getEntries(): PerformanceEntryList {\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries().map(rawToPerformanceEntry);\n  }\n\n  getEntriesByType(entryType: PerformanceEntryType): PerformanceEntryList {\n    if (entryType !== 'mark' && entryType !== 'measure') {\n      console.log(\n        `Performance.getEntriesByType: Only valid for 'mark' and 'measure' entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      performanceEntryTypeToRaw(entryType),\n    ).map(rawToPerformanceEntry);\n  }\n\n  getEntriesByName(\n    entryName: string,\n    entryType?: PerformanceEntryType,\n  ): PerformanceEntryList {\n    if (\n      entryType !== undefined &&\n      entryType !== 'mark' &&\n      entryType !== 'measure'\n    ) {\n      console.log(\n        `Performance.getEntriesByName: Only valid for 'mark' and 'measure' entry types, got ${entryType}`,\n      );\n      return [];\n    }\n\n    if (!NativePerformanceObserver?.clearEntries) {\n      warnNoNativePerformanceObserver();\n      return [];\n    }\n    return NativePerformanceObserver.getEntries(\n      entryType != null ? performanceEntryTypeToRaw(entryType) : undefined,\n      entryName,\n    ).map(rawToPerformanceEntry);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}