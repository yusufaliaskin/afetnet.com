{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { customDirectEventTypes } from \"./customDirectEventTypes\";\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\nimport { handlerIDToTag, registerOldGestureHandler, unregisterOldGestureHandler } from \"./handlersRegistry\";\nimport { getNextHandlerTag } from \"./getNextHandlerTag\";\nimport { filterConfig, scheduleFlushOperations } from \"./utils\";\nimport findNodeHandle from \"../findNodeHandle\";\nimport { deepEqual, isFabric, isReact19, isTestEnv, tagMessage } from \"../utils\";\nimport { ActionType } from \"../ActionType\";\nimport { PressabilityDebugView } from \"./PressabilityDebugView\";\nimport GestureHandlerRootViewContext from \"../GestureHandlerRootViewContext\";\nimport { ghQueueMicrotask } from \"../ghQueueMicrotask\";\nimport { MountRegistry } from \"../mountRegistry\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar UIManagerAny = UIManager;\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent'\n};\nvar customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nvar customGHEventsConfig = _objectSpread({\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}, isFabric() && Platform.OS === 'android' && customGHEventsConfigFabricAndroid);\nUIManagerAny.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerAny.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = UIManagerAny.getViewManagerConfig == null ? void 0 : UIManagerAny.getViewManagerConfig('getConstants');\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\nvar _UIManagerAny$setJSRe = UIManagerAny.setJSResponder,\n  oldSetJSResponder = _UIManagerAny$setJSRe === void 0 ? function () {} : _UIManagerAny$setJSRe,\n  _UIManagerAny$clearJS = UIManagerAny.clearJSResponder,\n  oldClearJSResponder = _UIManagerAny$clearJS === void 0 ? function () {} : _UIManagerAny$clearJS;\nUIManagerAny.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar allowTouches = true;\nvar DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', function () {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, State.UNDETERMINED, undefined), State.BEGAN, 'onBegan'), State.FAILED, 'onFailed'), State.CANCELLED, 'onCancelled'), State.ACTIVE, 'onActivated'), State.END, 'onEnded');\nvar UNRESOLVED_REFS_RETRY_LIMIT = 1;\nexport default function createHandler(_ref) {\n  var name = _ref.name,\n    _ref$allowedProps = _ref.allowedProps,\n    allowedProps = _ref$allowedProps === void 0 ? [] : _ref$allowedProps,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? {} : _ref$config,\n    transformProps = _ref.transformProps,\n    _ref$customNativeProp = _ref.customNativeProps,\n    customNativeProps = _ref$customNativeProp === void 0 ? [] : _ref$customNativeProp;\n  var Handler = function (_React$Component) {\n    function Handler(props) {\n      var _this;\n      _classCallCheck(this, Handler);\n      _this = _callSuper(this, Handler, [props]);\n      _this.handlerTag = -1;\n      _this.onGestureHandlerEvent = function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onGestureEvent === 'function') {\n            _this.props.onGestureEvent == null ? void 0 : _this.props.onGestureEvent(event);\n          }\n        } else {\n          _this.props.onGestureHandlerEvent == null ? void 0 : _this.props.onGestureHandlerEvent(event);\n        }\n      };\n      _this.onGestureHandlerStateChange = function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          if (typeof _this.props.onHandlerStateChange === 'function') {\n            _this.props.onHandlerStateChange == null ? void 0 : _this.props.onHandlerStateChange(event);\n          }\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          _this.props.onGestureHandlerStateChange == null ? void 0 : _this.props.onGestureHandlerStateChange(event);\n        }\n      };\n      _this.refHandler = function (node) {\n        var _child$props;\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = isReact19() ? (_child$props = child.props) == null ? void 0 : _child$props.ref : child == null ? void 0 : child.ref;\n        if (!ref) {\n          return;\n        }\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      };\n      _this.createGestureHandler = function (newConfig) {\n        _this.handlerTag = getNextHandlerTag();\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      };\n      _this.attachGestureHandler = function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, ActionType.JS_FUNCTION_OLD_API, _this.propsRef);\n        } else {\n          registerOldGestureHandler(_this.handlerTag, {\n            onGestureEvent: _this.onGestureHandlerEvent,\n            onGestureStateChange: _this.onGestureHandlerStateChange\n          });\n          var actionType = function (_this$props, _this$props2) {\n            var onGestureEvent = (_this$props = _this.props) == null ? void 0 : _this$props.onGestureEvent;\n            var isGestureHandlerWorklet = onGestureEvent && ('current' in onGestureEvent || 'workletEventHandler' in onGestureEvent);\n            var onHandlerStateChange = (_this$props2 = _this.props) == null ? void 0 : _this$props2.onHandlerStateChange;\n            var isStateChangeHandlerWorklet = onHandlerStateChange && ('current' in onHandlerStateChange || 'workletEventHandler' in onHandlerStateChange);\n            var isReanimatedHandler = isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n            if (isReanimatedHandler) {\n              return ActionType.REANIMATED_WORKLET;\n            } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n              return ActionType.NATIVE_ANIMATED_EVENT;\n            } else {\n              return ActionType.JS_FUNCTION_OLD_API;\n            }\n          }();\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, actionType);\n        }\n        scheduleFlushOperations();\n        ghQueueMicrotask(function () {\n          MountRegistry.gestureHandlerWillMount(_this);\n        });\n      };\n      _this.updateGestureHandler = function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n        scheduleFlushOperations();\n      };\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      _this.isMountedRef = React.createRef();\n      _this.state = {\n        allowTouches: allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    _inherits(Handler, _React$Component);\n    return _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        this.isMountedRef.current = true;\n        if (DEV_ON_ANDROID) {\n          this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', function () {\n            _this2.setState(function (_) {\n              return {\n                allowTouches: allowTouches\n              };\n            });\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        if (hasUnresolvedRefs(props)) {\n          ghQueueMicrotask(function () {\n            _this2.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          });\n        }\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        if (!this.viewNode) {\n          throw new Error(`[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`);\n        }\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n        this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this$inspectorToggle;\n        (_this$inspectorToggle = this.inspectorToggleListener) == null ? void 0 : _this$inspectorToggle.remove();\n        this.isMountedRef.current = false;\n        if (Platform.OS !== 'web') {\n          unregisterOldGestureHandler(this.handlerTag);\n        }\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n        scheduleFlushOperations();\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n        MountRegistry.gestureHandlerWillUnmount(this);\n      }\n    }, {\n      key: \"update\",\n      value: function update(remainingTries) {\n        var _this3 = this;\n        if (!this.isMountedRef.current) {\n          return;\n        }\n        var props = this.props;\n        if (hasUnresolvedRefs(props) && remainingTries > 0) {\n          ghQueueMicrotask(function () {\n            _this3.update(remainingTries - 1);\n          });\n        } else {\n          var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n          if (!deepEqual(this.config, newConfig)) {\n            this.updateGestureHandler(newConfig);\n          }\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props$testID;\n        if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n          throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation for more details.');\n        }\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props3 = this.props,\n          onGestureEvent = _this$props3.onGestureEvent,\n          onGestureHandlerEvent = _this$props3.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props4 = this.props,\n          onHandlerStateChange = _this$props4.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props4.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n          onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n        };\n        this.propsRef.current = events;\n        var child = null;\n        try {\n          child = React.Children.only(this.props.children);\n        } catch (e) {\n          throw new Error(tagMessage(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n        }\n        var grandChildren = child.props.children;\n        if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(_jsx(PressabilityDebugView, {\n            color: \"mediumspringgreen\",\n            hitSlop: child.props.hitSlop\n          }, \"pressabilityDebugView\"));\n        }\n        return React.cloneElement(child, _objectSpread(_objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, isTestEnv() ? {\n          handlerType: name,\n          handlerTag: this.handlerTag,\n          enabled: this.props.enabled\n        } : {}), {}, {\n          testID: (_this$props$testID = this.props.testID) != null ? _this$props$testID : child.props.testID\n        }, events), grandChildren);\n      }\n    }]);\n  }(React.Component);\n  Handler.displayName = name;\n  Handler.contextType = GestureHandlerRootViewContext;\n  return Handler;\n}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","RNGestureHandlerModule","State","handlerIDToTag","registerOldGestureHandler","unregisterOldGestureHandler","getNextHandlerTag","filterConfig","scheduleFlushOperations","findNodeHandle","deepEqual","isFabric","isReact19","isTestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","MountRegistry","jsx","_jsx","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","_objectSpread","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$setJSRe","setJSResponder","oldSetJSResponder","_UIManagerAny$clearJS","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","_defineProperty","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","_ref","name","_ref$allowedProps","allowedProps","_ref$config","config","transformProps","_ref$customNativeProp","customNativeProps","Handler","_React$Component","_this","_classCallCheck","_callSuper","handlerTag","event","nativeEvent","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","refHandler","node","_child$props","viewNode","child","Children","only","children","ref","createGestureHandler","newConfig","attachGestureHandler","newViewTag","viewTag","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props","_this$props2","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","gestureHandlerWillMount","updateGestureHandler","createRef","isMountedRef","id","Error","_inherits","_createClass","key","value","componentDidMount","_this2","inspectorToggleListener","setState","_","update","concat","_toConsumableArray","displayName","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","gestureHandlerWillUnmount","remainingTries","_this3","setNativeProps","updates","mergedProps","render","_this$props$testID","context","gestureEventHandler","_this$props3","gestureStateEventHandler","_this$props4","events","e","grandChildren","type","toArray","push","color","hitSlop","cloneElement","collapsable","handlerType","enabled","testID","Component","contextType"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  registerOldGestureHandler,\n  unregisterOldGestureHandler,\n} from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport {\n  deepEqual,\n  isFabric,\n  isReact19,\n  isTestEnv,\n  tagMessage,\n} from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\nimport { ReactElement } from 'react';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n\nconst UIManagerConstants = UIManagerAny.getViewManagerConfig?.('getConstants');\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>,\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag = -1;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      if (!this.viewNode) {\n        throw new Error(\n          `[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`\n        );\n      }\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // @ts-ignore Since React 19 ref is accessible as standard prop\n      // https://react.dev/blog/2024/04/25/react-19-upgrade-guide#deprecated-element-ref\n      const ref = isReact19() ? (child as ReactElement).props?.ref : child?.ref;\n\n      if (!ref) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.handlerTag = getNextHandlerTag();\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isTestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}