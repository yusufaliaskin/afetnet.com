{"ast":null,"code":"\"use strict\";\n\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var StateMachineEvent = function (StateMachineEvent) {\n  StateMachineEvent[\"NATIVE_BEGIN\"] = \"nativeBegin\";\n  StateMachineEvent[\"NATIVE_START\"] = \"nativeStart\";\n  StateMachineEvent[\"FINALIZE\"] = \"finalize\";\n  StateMachineEvent[\"LONG_PRESS_TOUCHES_DOWN\"] = \"longPressTouchesDown\";\n  return StateMachineEvent;\n}({});\nfunction getAndroidStatesConfig(handlePressIn, handlePressOut) {\n  return [{\n    eventName: StateMachineEvent.NATIVE_BEGIN\n  }, {\n    eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN,\n    callback: handlePressIn\n  }, {\n    eventName: StateMachineEvent.FINALIZE,\n    callback: handlePressOut\n  }];\n}\nfunction getIosStatesConfig(handlePressIn, handlePressOut) {\n  return [{\n    eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN\n  }, {\n    eventName: StateMachineEvent.NATIVE_START,\n    callback: handlePressIn\n  }, {\n    eventName: StateMachineEvent.FINALIZE,\n    callback: handlePressOut\n  }];\n}\nfunction getWebStatesConfig(handlePressIn, handlePressOut) {\n  return [{\n    eventName: StateMachineEvent.NATIVE_BEGIN\n  }, {\n    eventName: StateMachineEvent.NATIVE_START\n  }, {\n    eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN,\n    callback: handlePressIn\n  }, {\n    eventName: StateMachineEvent.FINALIZE,\n    callback: handlePressOut\n  }];\n}\nfunction getMacosStatesConfig(handlePressIn, handlePressOut) {\n  return [{\n    eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN\n  }, {\n    eventName: StateMachineEvent.NATIVE_BEGIN,\n    callback: handlePressIn\n  }, {\n    eventName: StateMachineEvent.NATIVE_START\n  }, {\n    eventName: StateMachineEvent.FINALIZE,\n    callback: handlePressOut\n  }];\n}\nfunction getUniversalStatesConfig(handlePressIn, handlePressOut) {\n  return [{\n    eventName: StateMachineEvent.FINALIZE,\n    callback: function callback(event) {\n      handlePressIn(event);\n      handlePressOut(event);\n    }\n  }];\n}\nexport function getStatesConfig(handlePressIn, handlePressOut) {\n  if (Platform.OS === 'android') {\n    return getAndroidStatesConfig(handlePressIn, handlePressOut);\n  } else if (Platform.OS === 'ios') {\n    return getIosStatesConfig(handlePressIn, handlePressOut);\n  } else if (Platform.OS === 'web') {\n    return getWebStatesConfig(handlePressIn, handlePressOut);\n  } else if (Platform.OS === 'macos') {\n    return getMacosStatesConfig(handlePressIn, handlePressOut);\n  } else {\n    return getUniversalStatesConfig(handlePressIn, handlePressOut);\n  }\n}","map":{"version":3,"names":["StateMachineEvent","getAndroidStatesConfig","handlePressIn","handlePressOut","eventName","NATIVE_BEGIN","LONG_PRESS_TOUCHES_DOWN","callback","FINALIZE","getIosStatesConfig","NATIVE_START","getWebStatesConfig","getMacosStatesConfig","getUniversalStatesConfig","event","getStatesConfig","Platform","OS"],"sources":["C:\\Users\\Yusuf Ali Aşkın\\Downloads\\Desktop\\proje_afetnet\\node_modules\\react-native-gesture-handler\\src\\components\\Pressable\\stateDefinitions.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { PressableEvent } from './PressableProps';\nimport { StateDefinition } from './StateMachine';\n\nexport enum StateMachineEvent {\n  NATIVE_BEGIN = 'nativeBegin',\n  NATIVE_START = 'nativeStart',\n  FINALIZE = 'finalize',\n  LONG_PRESS_TOUCHES_DOWN = 'longPressTouchesDown',\n}\n\nfunction getAndroidStatesConfig(\n  handlePressIn: (event: PressableEvent) => void,\n  handlePressOut: (event: PressableEvent) => void\n) {\n  return [\n    {\n      eventName: StateMachineEvent.NATIVE_BEGIN,\n    },\n    {\n      eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN,\n      callback: handlePressIn,\n    },\n    {\n      eventName: StateMachineEvent.FINALIZE,\n      callback: handlePressOut,\n    },\n  ];\n}\n\nfunction getIosStatesConfig(\n  handlePressIn: (event: PressableEvent) => void,\n  handlePressOut: (event: PressableEvent) => void\n) {\n  return [\n    {\n      eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN,\n    },\n    {\n      eventName: StateMachineEvent.NATIVE_START,\n      callback: handlePressIn,\n    },\n    {\n      eventName: StateMachineEvent.FINALIZE,\n      callback: handlePressOut,\n    },\n  ];\n}\n\nfunction getWebStatesConfig(\n  handlePressIn: (event: PressableEvent) => void,\n  handlePressOut: (event: PressableEvent) => void\n) {\n  return [\n    {\n      eventName: StateMachineEvent.NATIVE_BEGIN,\n    },\n    {\n      eventName: StateMachineEvent.NATIVE_START,\n    },\n    {\n      eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN,\n      callback: handlePressIn,\n    },\n    {\n      eventName: StateMachineEvent.FINALIZE,\n      callback: handlePressOut,\n    },\n  ];\n}\n\nfunction getMacosStatesConfig(\n  handlePressIn: (event: PressableEvent) => void,\n  handlePressOut: (event: PressableEvent) => void\n) {\n  return [\n    {\n      eventName: StateMachineEvent.LONG_PRESS_TOUCHES_DOWN,\n    },\n    {\n      eventName: StateMachineEvent.NATIVE_BEGIN,\n      callback: handlePressIn,\n    },\n    {\n      eventName: StateMachineEvent.NATIVE_START,\n    },\n    {\n      eventName: StateMachineEvent.FINALIZE,\n      callback: handlePressOut,\n    },\n  ];\n}\n\nfunction getUniversalStatesConfig(\n  handlePressIn: (event: PressableEvent) => void,\n  handlePressOut: (event: PressableEvent) => void\n) {\n  return [\n    {\n      eventName: StateMachineEvent.FINALIZE,\n      callback: (event: PressableEvent) => {\n        handlePressIn(event);\n        handlePressOut(event);\n      },\n    },\n  ];\n}\n\nexport function getStatesConfig(\n  handlePressIn: (event: PressableEvent) => void,\n  handlePressOut: (event: PressableEvent) => void\n): StateDefinition[] {\n  if (Platform.OS === 'android') {\n    return getAndroidStatesConfig(handlePressIn, handlePressOut);\n  } else if (Platform.OS === 'ios') {\n    return getIosStatesConfig(handlePressIn, handlePressOut);\n  } else if (Platform.OS === 'web') {\n    return getWebStatesConfig(handlePressIn, handlePressOut);\n  } else if (Platform.OS === 'macos') {\n    return getMacosStatesConfig(handlePressIn, handlePressOut);\n  } else {\n    // Unknown platform - using minimal universal setup.\n    return getUniversalStatesConfig(handlePressIn, handlePressOut);\n  }\n}\n"],"mappings":";;;AAIA,WAAYA,iBAAiB,aAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;AAO7B,SAASC,sBAAsBA,CAC7BC,aAA8C,EAC9CC,cAA+C,EAC/C;EACA,OAAO,CACL;IACEC,SAAS,EAAEJ,iBAAiB,CAACK;EAC/B,CAAC,EACD;IACED,SAAS,EAAEJ,iBAAiB,CAACM,uBAAuB;IACpDC,QAAQ,EAAEL;EACZ,CAAC,EACD;IACEE,SAAS,EAAEJ,iBAAiB,CAACQ,QAAQ;IACrCD,QAAQ,EAAEJ;EACZ,CAAC,CACF;AACH;AAEA,SAASM,kBAAkBA,CACzBP,aAA8C,EAC9CC,cAA+C,EAC/C;EACA,OAAO,CACL;IACEC,SAAS,EAAEJ,iBAAiB,CAACM;EAC/B,CAAC,EACD;IACEF,SAAS,EAAEJ,iBAAiB,CAACU,YAAY;IACzCH,QAAQ,EAAEL;EACZ,CAAC,EACD;IACEE,SAAS,EAAEJ,iBAAiB,CAACQ,QAAQ;IACrCD,QAAQ,EAAEJ;EACZ,CAAC,CACF;AACH;AAEA,SAASQ,kBAAkBA,CACzBT,aAA8C,EAC9CC,cAA+C,EAC/C;EACA,OAAO,CACL;IACEC,SAAS,EAAEJ,iBAAiB,CAACK;EAC/B,CAAC,EACD;IACED,SAAS,EAAEJ,iBAAiB,CAACU;EAC/B,CAAC,EACD;IACEN,SAAS,EAAEJ,iBAAiB,CAACM,uBAAuB;IACpDC,QAAQ,EAAEL;EACZ,CAAC,EACD;IACEE,SAAS,EAAEJ,iBAAiB,CAACQ,QAAQ;IACrCD,QAAQ,EAAEJ;EACZ,CAAC,CACF;AACH;AAEA,SAASS,oBAAoBA,CAC3BV,aAA8C,EAC9CC,cAA+C,EAC/C;EACA,OAAO,CACL;IACEC,SAAS,EAAEJ,iBAAiB,CAACM;EAC/B,CAAC,EACD;IACEF,SAAS,EAAEJ,iBAAiB,CAACK,YAAY;IACzCE,QAAQ,EAAEL;EACZ,CAAC,EACD;IACEE,SAAS,EAAEJ,iBAAiB,CAACU;EAC/B,CAAC,EACD;IACEN,SAAS,EAAEJ,iBAAiB,CAACQ,QAAQ;IACrCD,QAAQ,EAAEJ;EACZ,CAAC,CACF;AACH;AAEA,SAASU,wBAAwBA,CAC/BX,aAA8C,EAC9CC,cAA+C,EAC/C;EACA,OAAO,CACL;IACEC,SAAS,EAAEJ,iBAAiB,CAACQ,QAAQ;IACrCD,QAAQ,EAAG,SAAXA,QAAQA,CAAGO,KAAqB,EAAK;MACnCZ,aAAa,CAACY,KAAK,CAAC;MACpBX,cAAc,CAACW,KAAK,CAAC;IACvB;EACF,CAAC,CACF;AACH;AAEA,OAAO,SAASC,eAAeA,CAC7Bb,aAA8C,EAC9CC,cAA+C,EAC5B;EACnB,IAAIa,QAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;IAC7B,OAAOhB,sBAAsB,CAACC,aAAa,EAAEC,cAAc,CAAC;EAC9D,CAAC,MAAM,IAAIa,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IAChC,OAAOR,kBAAkB,CAACP,aAAa,EAAEC,cAAc,CAAC;EAC1D,CAAC,MAAM,IAAIa,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;IAChC,OAAON,kBAAkB,CAACT,aAAa,EAAEC,cAAc,CAAC;EAC1D,CAAC,MAAM,IAAIa,QAAQ,CAACC,EAAE,KAAK,OAAO,EAAE;IAClC,OAAOL,oBAAoB,CAACV,aAAa,EAAEC,cAAc,CAAC;EAC5D,CAAC,MAAM;IAEL,OAAOU,wBAAwB,CAACX,aAAa,EAAEC,cAAc,CAAC;EAChE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}