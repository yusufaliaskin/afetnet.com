{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport axios from 'axios';\nvar AFAD_API_BASE_URL = 'https://deprem.afad.gov.tr/apiv2';\nvar EarthquakeService = function () {\n  function EarthquakeService() {\n    _classCallCheck(this, EarthquakeService);\n    this.apiClient = axios.create({\n      baseURL: AFAD_API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n  }\n  return _createClass(EarthquakeService, [{\n    key: \"formatDate\",\n    value: function formatDate(date) {\n      return date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0') + ' ' + String(date.getHours()).padStart(2, '0') + ':' + String(date.getMinutes()).padStart(2, '0') + ':' + String(date.getSeconds()).padStart(2, '0');\n    }\n  }, {\n    key: \"getLatestEarthquakes\",\n    value: (function () {\n      var _getLatestEarthquakes = _asyncToGenerator(function* () {\n        var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n        var minMagnitude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        try {\n          var response = yield this.apiClient.get('/event_catalog', {\n            params: {\n              limit: limit,\n              minmag: minMagnitude,\n              orderby: 'time-desc'\n            }\n          });\n          if (response.data && response.data.features) {\n            console.log('AFAD API\\'sinden başarıyla veri alındı');\n            return this.formatEarthquakeData(response.data.features);\n          }\n          throw new Error('API\\'den veri alınamadı');\n        } catch (error) {\n          console.warn('AFAD API bağlantı hatası, mock data kullanılıyor:', error.message);\n          var mockData = {\n            features: this.generateRealisticMockData(limit, minMagnitude)\n          };\n          return this.formatEarthquakeData(mockData.features);\n        }\n      });\n      function getLatestEarthquakes() {\n        return _getLatestEarthquakes.apply(this, arguments);\n      }\n      return getLatestEarthquakes;\n    }())\n  }, {\n    key: \"generateRealisticMockData\",\n    value: function generateRealisticMockData(limit, minMagnitude) {\n      var turkishCities = [{\n        name: 'İSTANBUL',\n        lat: 41.0082,\n        lon: 28.9784\n      }, {\n        name: 'ANKARA',\n        lat: 39.9334,\n        lon: 32.8597\n      }, {\n        name: 'İZMİR',\n        lat: 38.4192,\n        lon: 27.1287\n      }, {\n        name: 'BURSA',\n        lat: 40.1826,\n        lon: 29.0665\n      }, {\n        name: 'ANTALYA',\n        lat: 36.8969,\n        lon: 30.7133\n      }, {\n        name: 'ADANA',\n        lat: 37.0000,\n        lon: 35.3213\n      }, {\n        name: 'KONYA',\n        lat: 37.8667,\n        lon: 32.4833\n      }, {\n        name: 'GAZİANTEP',\n        lat: 37.0662,\n        lon: 37.3833\n      }, {\n        name: 'ŞANLIURFA',\n        lat: 37.1591,\n        lon: 38.7969\n      }, {\n        name: 'KAYSERİ',\n        lat: 38.7312,\n        lon: 35.4787\n      }, {\n        name: 'ESKİŞEHİR',\n        lat: 39.7767,\n        lon: 30.5206\n      }, {\n        name: 'DİYARBAKIR',\n        lat: 37.9144,\n        lon: 40.2306\n      }, {\n        name: 'SAMSUN',\n        lat: 41.2928,\n        lon: 36.3313\n      }, {\n        name: 'DENİZLİ',\n        lat: 37.7765,\n        lon: 29.0864\n      }, {\n        name: 'MALATYA',\n        lat: 38.3552,\n        lon: 38.3095\n      }, {\n        name: 'ERZURUM',\n        lat: 39.9334,\n        lon: 41.2769\n      }, {\n        name: 'VAN',\n        lat: 38.4891,\n        lon: 43.4089\n      }, {\n        name: 'ELAZIĞ',\n        lat: 38.6748,\n        lon: 39.2226\n      }, {\n        name: 'BINGÖL',\n        lat: 38.8845,\n        lon: 40.4957\n      }, {\n        name: 'MUŞ',\n        lat: 38.9462,\n        lon: 41.7539\n      }];\n      var mockData = [];\n      var now = new Date();\n      for (var i = 0; i < limit; i++) {\n        var city = turkishCities[Math.floor(Math.random() * turkishCities.length)];\n        var magnitude = Math.max(minMagnitude, Math.random() * 4 + 1.5);\n        var timeOffset = Math.random() * 24 * 60 * 60 * 1000;\n        var eventTime = new Date(now.getTime() - timeOffset);\n        var latVariation = (Math.random() - 0.5) * 0.5;\n        var lonVariation = (Math.random() - 0.5) * 0.5;\n        mockData.push({\n          properties: {\n            mag: parseFloat(magnitude.toFixed(1)),\n            eventid: `mock_${Date.now()}_${i}`,\n            location: `${city.name} MERKEZ (${city.name})`,\n            date: eventTime.toISOString(),\n            latitude: city.lat + latVariation,\n            longitude: city.lon + lonVariation,\n            depth: Math.random() * 20 + 2,\n            type: Math.random() > 0.8 ? 'aftershock' : 'earthquake'\n          }\n        });\n      }\n      return mockData.sort(function (a, b) {\n        return new Date(b.properties.date) - new Date(a.properties.date);\n      });\n    }\n  }, {\n    key: \"getEarthquakesByLocation\",\n    value: (function () {\n      var _getEarthquakesByLocation = _asyncToGenerator(function* (lat, lon) {\n        var radius = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n        var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;\n        try {\n          var mockData = {\n            features: [{\n              properties: {\n                mag: 4.2,\n                eventid: '12350',\n                location: 'İSTANBUL MERKEZ (İSTANBUL)',\n                date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n                latitude: lat + (Math.random() - 0.5) * 0.1,\n                longitude: lon + (Math.random() - 0.5) * 0.1,\n                depth: 8.5\n              }\n            }, {\n              properties: {\n                mag: 3.1,\n                eventid: '12351',\n                location: 'BÖLGE YAKIN (ŞEHIR)',\n                date: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n                latitude: lat + (Math.random() - 0.5) * 0.2,\n                longitude: lon + (Math.random() - 0.5) * 0.2,\n                depth: 12.3\n              }\n            }]\n          };\n          return this.formatEarthquakeData(mockData.features.slice(0, limit));\n        } catch (error) {\n          console.error('Mock data hatası:', error);\n          throw new Error('Bölgesel deprem verileri alınamadı');\n        }\n      });\n      function getEarthquakesByLocation(_x, _x2) {\n        return _getEarthquakesByLocation.apply(this, arguments);\n      }\n      return getEarthquakesByLocation;\n    }())\n  }, {\n    key: \"getEarthquakesByDateRange\",\n    value: (function () {\n      var _getEarthquakesByDateRange = _asyncToGenerator(function* (startDate, endDate) {\n        var minMagnitude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        try {\n          var mockData = {\n            features: [{\n              properties: {\n                mag: 3.8,\n                eventid: '12352',\n                location: 'ANKARA MERKEZ (ANKARA)',\n                date: new Date(startDate).toISOString(),\n                latitude: 39.9334,\n                longitude: 32.8597,\n                depth: 10.2\n              }\n            }, {\n              properties: {\n                mag: 2.9,\n                eventid: '12353',\n                location: 'İZMİR MERKEZ (İZMİR)',\n                date: new Date(endDate).toISOString(),\n                latitude: 38.4192,\n                longitude: 27.1287,\n                depth: 7.8\n              }\n            }]\n          };\n          return this.formatEarthquakeData(mockData.features.filter(function (f) {\n            return f.properties.mag >= minMagnitude;\n          }));\n        } catch (error) {\n          console.error('Mock data hatası:', error);\n          throw new Error('Tarih aralığındaki deprem verileri alınamadı');\n        }\n      });\n      function getEarthquakesByDateRange(_x3, _x4) {\n        return _getEarthquakesByDateRange.apply(this, arguments);\n      }\n      return getEarthquakesByDateRange;\n    }())\n  }, {\n    key: \"formatEarthquakeData\",\n    value: function formatEarthquakeData(rawData) {\n      var _this = this;\n      return rawData.map(function (earthquake) {\n        var properties = earthquake.properties;\n        var magnitude = parseFloat(properties.mag || properties.magnitude) || 0;\n        var eventTime = new Date(properties.date || properties.time || properties.eventtime);\n        var isAftershock = properties.type === 'aftershock';\n        return {\n          id: properties.eventid || properties.id || Math.random().toString(36).substr(2, 9),\n          magnitude: magnitude,\n          location: properties.location || properties.place || 'Bilinmeyen Konum',\n          depth: parseFloat(properties.depth) || 0,\n          time: eventTime,\n          coordinates: {\n            latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n            longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0)\n          },\n          latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n          longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0),\n          source: 'AFAD',\n          severity: _this.calculateSeverity(magnitude),\n          distance: _this.formatTimeAgo(eventTime),\n          region: properties.region || 'Türkiye',\n          color: _this.getSeverityColor(magnitude),\n          isAftershock: isAftershock,\n          type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n          formattedTime: eventTime.toLocaleString('tr-TR', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit'\n          }),\n          formattedDate: eventTime.toLocaleDateString('tr-TR', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n          })\n        };\n      });\n    }\n  }, {\n    key: \"calculateSeverity\",\n    value: function calculateSeverity(magnitude) {\n      if (magnitude >= 7.0) return 'Çok Yüksek';\n      if (magnitude >= 6.0) return 'Yüksek';\n      if (magnitude >= 5.0) return 'Orta';\n      if (magnitude >= 4.0) return 'Düşük';\n      return 'Çok Düşük';\n    }\n  }, {\n    key: \"calculateDistance\",\n    value: function calculateDistance(lat1, lon1, lat2, lon2) {\n      var R = 6371;\n      var dLat = this.toRadians(lat2 - lat1);\n      var dLon = this.toRadians(lon2 - lon1);\n      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c;\n    }\n  }, {\n    key: \"toRadians\",\n    value: function toRadians(degrees) {\n      return degrees * (Math.PI / 180);\n    }\n  }, {\n    key: \"formatTimeAgo\",\n    value: function formatTimeAgo(date) {\n      var now = new Date();\n      var diffMs = now - date;\n      var diffMins = Math.floor(diffMs / 60000);\n      var diffHours = Math.floor(diffMins / 60);\n      var diffDays = Math.floor(diffHours / 24);\n      if (diffMins < 1) return 'Şimdi';\n      if (diffMins < 60) return `${diffMins} dk önce`;\n      if (diffHours < 24) return `${diffHours} sa önce`;\n      return `${diffDays} gün önce`;\n    }\n  }, {\n    key: \"getSeverityColor\",\n    value: function getSeverityColor(magnitude) {\n      if (magnitude >= 7.0) return '#FF3B30';\n      if (magnitude >= 6.0) return '#FF9500';\n      if (magnitude >= 5.0) return '#FFCC00';\n      if (magnitude >= 4.0) return '#34C759';\n      return '#007AFF';\n    }\n  }]);\n}();\nvar earthquakeService = new EarthquakeService();\nexport default earthquakeService;","map":{"version":3,"names":["axios","AFAD_API_BASE_URL","EarthquakeService","_classCallCheck","apiClient","create","baseURL","timeout","headers","_createClass","key","value","formatDate","date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","_getLatestEarthquakes","_asyncToGenerator","limit","arguments","length","undefined","minMagnitude","response","get","params","minmag","orderby","data","features","console","log","formatEarthquakeData","Error","error","warn","message","mockData","generateRealisticMockData","getLatestEarthquakes","apply","turkishCities","name","lat","lon","now","Date","i","city","Math","floor","random","magnitude","max","timeOffset","eventTime","getTime","latVariation","lonVariation","push","properties","mag","parseFloat","toFixed","eventid","location","toISOString","latitude","longitude","depth","type","sort","a","b","_getEarthquakesByLocation","radius","slice","getEarthquakesByLocation","_x","_x2","_getEarthquakesByDateRange","startDate","endDate","filter","f","getEarthquakesByDateRange","_x3","_x4","rawData","_this","map","earthquake","time","eventtime","isAftershock","id","toString","substr","place","coordinates","geometry","source","severity","calculateSeverity","distance","formatTimeAgo","region","color","getSeverityColor","formattedTime","toLocaleString","year","month","day","hour","minute","second","formattedDate","toLocaleDateString","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","toRadians","dLon","sin","cos","c","atan2","sqrt","degrees","PI","diffMs","diffMins","diffHours","diffDays","earthquakeService"],"sources":["C:/Users/Yusuf Ali Aşkın/Downloads/Desktop/proje_afetnet/src/services/earthquakeService.js"],"sourcesContent":["import axios from 'axios';\n\nconst AFAD_API_BASE_URL = 'https://deprem.afad.gov.tr/apiv2';\n\nclass EarthquakeService {\n  constructor() {\n    this.apiClient = axios.create({\n      baseURL: AFAD_API_BASE_URL,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n    });\n  }\n\n  /**\n   * AFAD API için tarih formatı: YYYY-MM-DD HH:mm:ss\n   */\n  formatDate(date) {\n    return date.getFullYear() + '-' + \n           String(date.getMonth() + 1).padStart(2, '0') + '-' + \n           String(date.getDate()).padStart(2, '0') + ' ' + \n           String(date.getHours()).padStart(2, '0') + ':' + \n           String(date.getMinutes()).padStart(2, '0') + ':' + \n           String(date.getSeconds()).padStart(2, '0');\n  }\n\n  /**\n   * Son deprem verilerini getirir\n   * @param {number} limit - Getirilecek deprem sayısı (varsayılan: 50)\n   * @param {number} minMagnitude - Minimum büyüklük (varsayılan: 0)\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getLatestEarthquakes(limit = 50, minMagnitude = 0) {\n    try {\n      // AFAD API'sinden gerçek veri çekmeyi dene\n      const response = await this.apiClient.get('/event_catalog', {\n        params: {\n          limit: limit,\n          minmag: minMagnitude,\n          orderby: 'time-desc'\n        }\n      });\n\n      if (response.data && response.data.features) {\n        console.log('AFAD API\\'sinden başarıyla veri alındı');\n        return this.formatEarthquakeData(response.data.features);\n      }\n      \n      throw new Error('API\\'den veri alınamadı');\n    } catch (error) {\n      console.warn('AFAD API bağlantı hatası, mock data kullanılıyor:', error.message);\n      \n      // Fallback mock data - daha gerçekçi ve güncel veriler\n      const mockData = {\n        features: this.generateRealisticMockData(limit, minMagnitude)\n      };\n\n      return this.formatEarthquakeData(mockData.features);\n    }\n  }\n\n  /**\n   * Gerçekçi mock deprem verileri üretir\n   * @param {number} limit - Üretilecek deprem sayısı\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Array} Mock deprem verileri\n   */\n  generateRealisticMockData(limit, minMagnitude) {\n    const turkishCities = [\n      { name: 'İSTANBUL', lat: 41.0082, lon: 28.9784 },\n      { name: 'ANKARA', lat: 39.9334, lon: 32.8597 },\n      { name: 'İZMİR', lat: 38.4192, lon: 27.1287 },\n      { name: 'BURSA', lat: 40.1826, lon: 29.0665 },\n      { name: 'ANTALYA', lat: 36.8969, lon: 30.7133 },\n      { name: 'ADANA', lat: 37.0000, lon: 35.3213 },\n      { name: 'KONYA', lat: 37.8667, lon: 32.4833 },\n      { name: 'GAZİANTEP', lat: 37.0662, lon: 37.3833 },\n      { name: 'ŞANLIURFA', lat: 37.1591, lon: 38.7969 },\n      { name: 'KAYSERİ', lat: 38.7312, lon: 35.4787 },\n      { name: 'ESKİŞEHİR', lat: 39.7767, lon: 30.5206 },\n      { name: 'DİYARBAKIR', lat: 37.9144, lon: 40.2306 },\n      { name: 'SAMSUN', lat: 41.2928, lon: 36.3313 },\n      { name: 'DENİZLİ', lat: 37.7765, lon: 29.0864 },\n      { name: 'MALATYA', lat: 38.3552, lon: 38.3095 },\n      { name: 'ERZURUM', lat: 39.9334, lon: 41.2769 },\n      { name: 'VAN', lat: 38.4891, lon: 43.4089 },\n      { name: 'ELAZIĞ', lat: 38.6748, lon: 39.2226 },\n      { name: 'BINGÖL', lat: 38.8845, lon: 40.4957 },\n      { name: 'MUŞ', lat: 38.9462, lon: 41.7539 }\n    ];\n\n    const mockData = [];\n    const now = new Date();\n\n    for (let i = 0; i < limit; i++) {\n      const city = turkishCities[Math.floor(Math.random() * turkishCities.length)];\n      const magnitude = Math.max(minMagnitude, (Math.random() * 4 + 1.5)); // 1.5-5.5 arası\n      const timeOffset = Math.random() * 24 * 60 * 60 * 1000; // Son 24 saat içinde\n      const eventTime = new Date(now.getTime() - timeOffset);\n      \n      // Koordinatlara küçük varyasyon ekle\n      const latVariation = (Math.random() - 0.5) * 0.5;\n      const lonVariation = (Math.random() - 0.5) * 0.5;\n\n      mockData.push({\n        properties: {\n          mag: parseFloat(magnitude.toFixed(1)),\n          eventid: `mock_${Date.now()}_${i}`,\n          location: `${city.name} MERKEZ (${city.name})`,\n          date: eventTime.toISOString(),\n          latitude: city.lat + latVariation,\n          longitude: city.lon + lonVariation,\n          depth: Math.random() * 20 + 2, // 2-22 km arası derinlik\n          type: Math.random() > 0.8 ? 'aftershock' : 'earthquake' // %20 artçı deprem\n        }\n      });\n    }\n\n    return mockData.sort((a, b) => new Date(b.properties.date) - new Date(a.properties.date));\n  }\n\n  /**\n   * Belirli bir bölgedeki depremleri getirir\n   * @param {number} lat - Enlem\n   * @param {number} lon - Boylam\n   * @param {number} radius - Yarıçap (km)\n   * @param {number} limit - Getirilecek deprem sayısı\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByLocation(lat, lon, radius = 100, limit = 20) {\n    try {\n      // Geçici mock data - API bağlantı sorunu nedeniyle\n      const mockData = {\n        features: [\n          {\n            properties: {\n              mag: 4.2,\n              eventid: '12350',\n              location: 'İSTANBUL MERKEZ (İSTANBUL)',\n              date: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n              latitude: lat + (Math.random() - 0.5) * 0.1,\n              longitude: lon + (Math.random() - 0.5) * 0.1,\n              depth: 8.5\n            }\n          },\n          {\n            properties: {\n              mag: 3.1,\n              eventid: '12351',\n              location: 'BÖLGE YAKIN (ŞEHIR)',\n              date: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\n              latitude: lat + (Math.random() - 0.5) * 0.2,\n              longitude: lon + (Math.random() - 0.5) * 0.2,\n              depth: 12.3\n            }\n          }\n        ]\n      };\n\n      return this.formatEarthquakeData(mockData.features.slice(0, limit));\n    } catch (error) {\n      console.error('Mock data hatası:', error);\n      throw new Error('Bölgesel deprem verileri alınamadı');\n    }\n  }\n\n  /**\n   * Belirli bir tarih aralığındaki depremleri getirir\n   * @param {string} startDate - Başlangıç tarihi (YYYY-MM-DD)\n   * @param {string} endDate - Bitiş tarihi (YYYY-MM-DD)\n   * @param {number} minMagnitude - Minimum büyüklük\n   * @returns {Promise<Array>} Deprem verileri dizisi\n   */\n  async getEarthquakesByDateRange(startDate, endDate, minMagnitude = 0) {\n    try {\n      // Geçici mock data - API bağlantı sorunu nedeniyle\n      const mockData = {\n        features: [\n          {\n            properties: {\n              mag: 3.8,\n              eventid: '12352',\n              location: 'ANKARA MERKEZ (ANKARA)',\n              date: new Date(startDate).toISOString(),\n              latitude: 39.9334,\n              longitude: 32.8597,\n              depth: 10.2\n            }\n          },\n          {\n            properties: {\n              mag: 2.9,\n              eventid: '12353',\n              location: 'İZMİR MERKEZ (İZMİR)',\n              date: new Date(endDate).toISOString(),\n              latitude: 38.4192,\n              longitude: 27.1287,\n              depth: 7.8\n            }\n          }\n        ]\n      };\n\n      return this.formatEarthquakeData(mockData.features.filter(f => f.properties.mag >= minMagnitude));\n    } catch (error) {\n      console.error('Mock data hatası:', error);\n      throw new Error('Tarih aralığındaki deprem verileri alınamadı');\n    }\n  }\n\n  /**\n   * Ham deprem verilerini uygulama formatına dönüştürür\n   * @param {Array} rawData - Ham AFAD verileri\n   * @returns {Array} Formatlanmış deprem verileri\n   */\n  formatEarthquakeData(rawData) {\n    return rawData.map(earthquake => {\n      const properties = earthquake.properties;\n      \n      const magnitude = parseFloat(properties.mag || properties.magnitude) || 0;\n      const eventTime = new Date(properties.date || properties.time || properties.eventtime);\n      const isAftershock = properties.type === 'aftershock';\n      \n      return {\n        id: properties.eventid || properties.id || Math.random().toString(36).substr(2, 9),\n        magnitude: magnitude,\n        location: properties.location || properties.place || 'Bilinmeyen Konum',\n        depth: parseFloat(properties.depth) || 0,\n        time: eventTime,\n        coordinates: {\n          latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n          longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0)\n        },\n        latitude: parseFloat(properties.latitude) || (earthquake.geometry ? earthquake.geometry.coordinates[1] : 0),\n        longitude: parseFloat(properties.longitude) || (earthquake.geometry ? earthquake.geometry.coordinates[0] : 0),\n        source: 'AFAD',\n        severity: this.calculateSeverity(magnitude),\n        distance: this.formatTimeAgo(eventTime),\n        region: properties.region || 'Türkiye',\n        color: this.getSeverityColor(magnitude),\n        isAftershock: isAftershock,\n        type: isAftershock ? 'Artçı Deprem' : 'Ana Deprem',\n        formattedTime: eventTime.toLocaleString('tr-TR', {\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        }),\n        formattedDate: eventTime.toLocaleDateString('tr-TR', {\n          year: 'numeric',\n          month: 'long',\n          day: 'numeric'\n        })\n      };\n    });\n  }\n\n  /**\n   * Deprem büyüklüğüne göre şiddet seviyesi hesaplar\n   * @param {number} magnitude - Deprem büyüklüğü\n   * @returns {string} Şiddet seviyesi\n   */\n  calculateSeverity(magnitude) {\n    if (magnitude >= 7.0) return 'Çok Yüksek';\n    if (magnitude >= 6.0) return 'Yüksek';\n    if (magnitude >= 5.0) return 'Orta';\n    if (magnitude >= 4.0) return 'Düşük';\n    return 'Çok Düşük';\n  }\n\n  /**\n   * İki koordinat arasındaki mesafeyi hesaplar (km)\n   * @param {number} lat1 - İlk nokta enlemi\n   * @param {number} lon1 - İlk nokta boylamı\n   * @param {number} lat2 - İkinci nokta enlemi\n   * @param {number} lon2 - İkinci nokta boylamı\n   * @returns {number} Mesafe (km)\n   */\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Dünya'nın yarıçapı (km)\n    const dLat = this.toRadians(lat2 - lat1);\n    const dLon = this.toRadians(lon2 - lon1);\n    const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(this.toRadians(lat1)) * Math.cos(this.toRadians(lat2)) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\n   * Dereceyi radyana çevirir\n   * @param {number} degrees - Derece değeri\n   * @returns {number} Radian değeri\n   */\n  toRadians(degrees) {\n    return degrees * (Math.PI / 180);\n  }\n\n  /**\n   * Zamanı \"X dakika/saat/gün önce\" formatında döndürür\n   * @param {Date} date - Deprem zamanı\n   * @returns {string} Formatlanmış zaman\n   */\n  formatTimeAgo(date) {\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n\n    if (diffMins < 1) return 'Şimdi';\n    if (diffMins < 60) return `${diffMins} dk önce`;\n    if (diffHours < 24) return `${diffHours} sa önce`;\n    return `${diffDays} gün önce`;\n  }\n\n  /**\n   * Deprem büyüklüğüne göre renk döndürür\n   * @param {number} magnitude - Deprem büyüklüğü\n   * @returns {string} Renk kodu\n   */\n  getSeverityColor(magnitude) {\n    if (magnitude >= 7.0) return '#FF3B30'; // Kırmızı - Çok Yüksek\n    if (magnitude >= 6.0) return '#FF9500'; // Turuncu - Yüksek\n    if (magnitude >= 5.0) return '#FFCC00'; // Sarı - Orta\n    if (magnitude >= 4.0) return '#34C759'; // Yeşil - Düşük\n    return '#007AFF'; // Mavi - Çok Düşük\n  }\n}\n\n// Singleton instance\nconst earthquakeService = new EarthquakeService();\nexport default earthquakeService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}